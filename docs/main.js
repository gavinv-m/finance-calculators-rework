/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var t={56:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},72:t=>{var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var s={},r=[],a=0;a<t.length;a++){var l=t[a],c=i.base?l[0]+i.base:l[0],h=s[c]||0,d="".concat(c," ").concat(h);s[c]=h+1;var u=n(d),g={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)e[u].references++,e[u].updater(g);else{var p=o(g,i);i.byIndex=a,e.splice(a,0,{identifier:d,updater:p,references:1})}r.push(d)}return r}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var s=i(t=t||[],o=o||{});return function(t){t=t||[];for(var r=0;r<s.length;r++){var a=n(s[r]);e[a].references--}for(var l=i(t,o),c=0;c<s.length;c++){var h=n(s[c]);0===e[h].references&&(e[h].updater(),e.splice(h,1))}s=l}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},208:(t,e,n)=>{n.d(e,{A:()=>a});var i=n(354),o=n.n(i),s=n(314),r=n.n(s)()(o());r.push([t.id,"/* form css start */\nbody {\n  font-family: Arial, sans-serif;\n}\n/* header */\n.header-sec {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px 0px;\n  background-color: #fff;\n}\n.btns {\n  background-color: #d0b870;\n  color: white;\n  border: none;\n  font-size: 16px;\n  font-weight: bold;\n  border-radius: 50px;\n  transition: background 0.3s ease-in-out;\n  width: 45px;\n  height: 45px;\n  z-index: 4;\n}\n.download i {\n  font-size: 18px;\n}\n.table-design h5 {\n  font-weight: 600;\n  color: #d0b870;\n}\n#yearlyTables th,\ntd {\n  text-align: center;\n  padding: 18px 10px !important;\n}\n#yearlyTables table {\n  text-align: center;\n}\n.table {\n  --bs-table-bg: transparent !important;\n}\n#yearlyTables th {\n  font-size: 19px;\n  font-weight: 700;\n  color: #d0b870;\n}\ncanvas {\n  width: 100% !important;\n  height: 100% !important;\n  padding: 20px;\n  object-fit: contain;\n}\n\n.logo img {\n  width: 150px;\n}\n\n.iconbar ul {\n  list-style: none;\n  display: flex;\n  gap: 15px;\n}\n\n.icon-item {\n  width: 36px;\n  height: 36px;\n  border-radius: 50%;\n  background: #d0b870;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  transition: 0.3s;\n}\n.icon-item a {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n}\n\n.icon-item svg {\n  fill: white;\n  width: 20px;\n  height: 20px;\n}\n.uk-navbar-toggle {\n  padding: 0 0;\n  color: #2f2f2f;\n  font-weight: 300;\n  text-transform: none;\n}\n\n/* css start */\n.nav-pills .nav-link.active {\n  background-color: #000000a3;\n  color: white;\n  border-radius: 5px;\n  padding: 14px 30px;\n  font-weight: 600;\n}\n.nav-pills .nav-link {\n  color: black;\n}\n.card {\n  border-radius: 12px;\n  box-shadow: 0px 0px 16px 0px #00000040;\n}\n.input-group-text {\n  background-color: #206ba4;\n  color: white;\n  border: none;\n  background: black;\n}\n.card button {\n  background-color: black;\n  padding: 14px 20px;\n  font-size: 16px;\n}\n.card button:hover {\n  background-color: black;\n}\n.card-1 {\n  background: #206ba4;\n  margin-block: 40px !important;\n}\n.form-control {\n  padding: 20px 0.75rem;\n}\n.card-2 {\n  padding: 20px;\n}\n.card-2-inner h4 {\n  font-size: 26px;\n  font-weight: 700;\n  color: #d0b870;\n}\n\n.card-service {\n  gap: 20px;\n  justify-content: space-around;\n}\n.tab-content h1 {\n  font-size: 40px;\n  color: #d0b870;\n  font-weight: 700;\n  text-transform: capitalize;\n  padding-bottom: 10px;\n  position: relative;\n}\n.result {\n  font-size: 24px;\n  font-weight: 500;\n}\n.card-2-inner {\n  padding-block: 40px !important;\n  height: 100%;\n  box-shadow: rgba(0, 0, 0, 0.02) 0px 1px 3px 0px,\n    rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;\n}\n\n.card-2-inner h5 {\n  font-size: 22px;\n  font-weight: 700;\n  padding-bottom: 20px;\n}\n.card-2-inner p {\n  font-size: 22px;\n  font-weight: 700;\n}\n.input-circle span {\n  padding: 2px 12px;\n  position: absolute;\n  top: 12px;\n  right: 15px;\n  color: white;\n  border-radius: 34px;\n  background: lightgray;\n  cursor: pointer !important;\n}\n.form-floating {\n  position: relative;\n  width: 100%;\n}\ninput::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n.error {\n  text-align: start !important;\n  display: flex;\n  padding: 10px;\n  color: #852828;\n  font-size: 16px;\n  font-weight: 600;\n}\n/* Firefox */\ninput[type='number'] {\n  -moz-appearance: textfield;\n}\n.form-control {\n  padding: 8px 0.75rem;\n}\n.accordion-body {\n  background-color: white;\n}\n.accordion-button:not(.collapsed) {\n  color: white;\n  background-color: #d0b870 !important;\n  box-shadow: inset 0 calc(-1 * var(--bs-accordion-border-width)) 0\n    var(--bs-accordion-border-color);\n  font-weight: 600;\n}\n.accordion-button:not(.collapsed)::after {\n  filter: brightness(0) invert(1);\n}\n.tab-content h1::after {\n  content: '';\n  border-bottom: 2px solid #000;\n  position: absolute;\n  width: 40%;\n  left: 0;\n  bottom: 1px;\n  left: 50%;\n  transform: translate(-50%, 0);\n}\n.space {\n  width: 77%;\n  margin: 20px auto;\n}\n\n/* footer */\nfooter {\n  background: #2f2f2f;\n  color: #fff;\n  padding: 10px;\n  margin-top: 4rem;\n}\n.footer-sec {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n}\n.copyright p {\n  font-size: 17px;\n  line-height: 1.2;\n  color: #b0a4ac;\n  font-weight: 300;\n  text-align: center;\n}\n.website p {\n  font-size: 15px;\n  color: #d0b870;\n}\n.website a {\n  font-size: 15px;\n  color: #b0a4ac !important;\n  text-decoration: none;\n}\n.footer-item {\n  margin: 5px 0;\n}\n/* projection css start */\ndiv#projections h3 {\n  padding-block: 23px;\n  font-size: 26px;\n  font-weight: 700;\n}\ndiv#projections ul li {\n  list-style: none;\n  font-size: 20px;\n}\np.dynamicPara {\n  font-size: 24px !important;\n  color: #d0b870;\n}\n/* dropdown css */\nselect#timeDuration {\n  width: 15%;\n  margin-left: auto;\n  font-weight: 700;\n  color: #d0b870;\n  padding: 18px;\n  border: 2px solid;\n  background: rgba(0, 0, 0, 0.8);\n}\n/*-- responisve --*/\n@media screen and (max-width: 991px) {\n  select#timeDuration {\n    width: 45%;\n    margin-top: 40px;\n  }\n  .row.mob-block > div {\n    width: 100%;\n  }\n  .row.mob-block {\n    display: block;\n  }\n  .space {\n    width: 100%;\n  }\n}\n@media (max-width: 760px) {\n  .footer-sec {\n    justify-content: center !important;\n  }\n}\n@media (max-width: 500px) {\n  select#timeDuration {\n    width: 100%;\n    margin-top: 40px;\n  }\n  .iconbar {\n    display: none;\n  }\n  .header-sec {\n    justify-content: center;\n  }\n}\n.drops {\n  width: 15%;\n  margin-left: auto;\n  font-weight: 700;\n  color: #d0b870;\n  padding: 18px !important;\n  border: 2px solid;\n  background: rgba(0, 0, 0, 0.8);\n}\n/* \n.print-button {\n  padding: 10px 20px;\n  background-color: #d0b870;\n  color: white;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  margin-top: 20px;\n} */\n\n/* Print Styles */\n@media print {\n  .print-button,\n  .navigation-bar,\n  .sidebar,\n  .footer {\n    display: none !important; /* hide navbars, footers, buttons, etc. */\n  }\n\n  body {\n    background: white;\n    color: black;\n  }\n\n  /* Optional: adjust layout for printing */\n  .main-content {\n    width: 100%;\n    padding: 0;\n    margin: 0;\n  }\n\n  html,\n  body {\n    height: auto;\n  }\n}\n/* @media (max-width: 991px) {\n  .print-button {\n    top: -22px;\n    width: 50px;\n  }\n} */\n.btn-flex {\n  display: flex;\n  justify-content: flex-end;\n  gap: 20px;\n  align-items: end;\n  flex-direction: column;\n  position: absolute;\n  top: -25px;\n  right: 0;\n}\n\nhtml {\n  visibility: visible;\n  opacity: 1;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,mBAAmB;AACnB;EACE,8BAA8B;AAChC;AACA,WAAW;AACX;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,iBAAiB;EACjB,sBAAsB;AACxB;AACA;EACE,yBAAyB;EACzB,YAAY;EACZ,YAAY;EACZ,eAAe;EACf,iBAAiB;EACjB,mBAAmB;EACnB,uCAAuC;EACvC,WAAW;EACX,YAAY;EACZ,UAAU;AACZ;AACA;EACE,eAAe;AACjB;AACA;EACE,gBAAgB;EAChB,cAAc;AAChB;AACA;;EAEE,kBAAkB;EAClB,6BAA6B;AAC/B;AACA;EACE,kBAAkB;AACpB;AACA;EACE,qCAAqC;AACvC;AACA;EACE,eAAe;EACf,gBAAgB;EAChB,cAAc;AAChB;AACA;EACE,sBAAsB;EACtB,uBAAuB;EACvB,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,SAAS;AACX;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,mBAAmB;EACnB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,gBAAgB;AAClB;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,WAAW;EACX,YAAY;AACd;;AAEA;EACE,WAAW;EACX,WAAW;EACX,YAAY;AACd;AACA;EACE,YAAY;EACZ,cAAc;EACd,gBAAgB;EAChB,oBAAoB;AACtB;;AAEA,cAAc;AACd;EACE,2BAA2B;EAC3B,YAAY;EACZ,kBAAkB;EAClB,kBAAkB;EAClB,gBAAgB;AAClB;AACA;EACE,YAAY;AACd;AACA;EACE,mBAAmB;EACnB,sCAAsC;AACxC;AACA;EACE,yBAAyB;EACzB,YAAY;EACZ,YAAY;EACZ,iBAAiB;AACnB;AACA;EACE,uBAAuB;EACvB,kBAAkB;EAClB,eAAe;AACjB;AACA;EACE,uBAAuB;AACzB;AACA;EACE,mBAAmB;EACnB,6BAA6B;AAC/B;AACA;EACE,qBAAqB;AACvB;AACA;EACE,aAAa;AACf;AACA;EACE,eAAe;EACf,gBAAgB;EAChB,cAAc;AAChB;;AAEA;EACE,SAAS;EACT,6BAA6B;AAC/B;AACA;EACE,eAAe;EACf,cAAc;EACd,gBAAgB;EAChB,0BAA0B;EAC1B,oBAAoB;EACpB,kBAAkB;AACpB;AACA;EACE,eAAe;EACf,gBAAgB;AAClB;AACA;EACE,8BAA8B;EAC9B,YAAY;EACZ;0CACwC;AAC1C;;AAEA;EACE,eAAe;EACf,gBAAgB;EAChB,oBAAoB;AACtB;AACA;EACE,eAAe;EACf,gBAAgB;AAClB;AACA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,YAAY;EACZ,mBAAmB;EACnB,qBAAqB;EACrB,0BAA0B;AAC5B;AACA;EACE,kBAAkB;EAClB,WAAW;AACb;AACA;;EAEE,wBAAwB;EACxB,SAAS;AACX;AACA;EACE,4BAA4B;EAC5B,aAAa;EACb,aAAa;EACb,cAAc;EACd,eAAe;EACf,gBAAgB;AAClB;AACA,YAAY;AACZ;EACE,0BAA0B;AAC5B;AACA;EACE,oBAAoB;AACtB;AACA;EACE,uBAAuB;AACzB;AACA;EACE,YAAY;EACZ,oCAAoC;EACpC;oCACkC;EAClC,gBAAgB;AAClB;AACA;EACE,+BAA+B;AACjC;AACA;EACE,WAAW;EACX,6BAA6B;EAC7B,kBAAkB;EAClB,UAAU;EACV,OAAO;EACP,WAAW;EACX,SAAS;EACT,6BAA6B;AAC/B;AACA;EACE,UAAU;EACV,iBAAiB;AACnB;;AAEA,WAAW;AACX;EACE,mBAAmB;EACnB,WAAW;EACX,aAAa;EACb,gBAAgB;AAClB;AACA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,eAAe;AACjB;AACA;EACE,eAAe;EACf,gBAAgB;EAChB,cAAc;EACd,gBAAgB;EAChB,kBAAkB;AACpB;AACA;EACE,eAAe;EACf,cAAc;AAChB;AACA;EACE,eAAe;EACf,yBAAyB;EACzB,qBAAqB;AACvB;AACA;EACE,aAAa;AACf;AACA,yBAAyB;AACzB;EACE,mBAAmB;EACnB,eAAe;EACf,gBAAgB;AAClB;AACA;EACE,gBAAgB;EAChB,eAAe;AACjB;AACA;EACE,0BAA0B;EAC1B,cAAc;AAChB;AACA,iBAAiB;AACjB;EACE,UAAU;EACV,iBAAiB;EACjB,gBAAgB;EAChB,cAAc;EACd,aAAa;EACb,iBAAiB;EACjB,8BAA8B;AAChC;AACA,mBAAmB;AACnB;EACE;IACE,UAAU;IACV,gBAAgB;EAClB;EACA;IACE,WAAW;EACb;EACA;IACE,cAAc;EAChB;EACA;IACE,WAAW;EACb;AACF;AACA;EACE;IACE,kCAAkC;EACpC;AACF;AACA;EACE;IACE,WAAW;IACX,gBAAgB;EAClB;EACA;IACE,aAAa;EACf;EACA;IACE,uBAAuB;EACzB;AACF;AACA;EACE,UAAU;EACV,iBAAiB;EACjB,gBAAgB;EAChB,cAAc;EACd,wBAAwB;EACxB,iBAAiB;EACjB,8BAA8B;AAChC;AACA;;;;;;;;;GASG;;AAEH,iBAAiB;AACjB;EACE;;;;IAIE,wBAAwB,EAAE,yCAAyC;EACrE;;EAEA;IACE,iBAAiB;IACjB,YAAY;EACd;;EAEA,yCAAyC;EACzC;IACE,WAAW;IACX,UAAU;IACV,SAAS;EACX;;EAEA;;IAEE,YAAY;EACd;AACF;AACA;;;;;GAKG;AACH;EACE,aAAa;EACb,yBAAyB;EACzB,SAAS;EACT,gBAAgB;EAChB,sBAAsB;EACtB,kBAAkB;EAClB,UAAU;EACV,QAAQ;AACV;;AAEA;EACE,mBAAmB;EACnB,UAAU;AACZ",sourcesContent:["/* form css start */\r\nbody {\r\n  font-family: Arial, sans-serif;\r\n}\r\n/* header */\r\n.header-sec {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px 0px;\r\n  background-color: #fff;\r\n}\r\n.btns {\r\n  background-color: #d0b870;\r\n  color: white;\r\n  border: none;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  border-radius: 50px;\r\n  transition: background 0.3s ease-in-out;\r\n  width: 45px;\r\n  height: 45px;\r\n  z-index: 4;\r\n}\r\n.download i {\r\n  font-size: 18px;\r\n}\r\n.table-design h5 {\r\n  font-weight: 600;\r\n  color: #d0b870;\r\n}\r\n#yearlyTables th,\r\ntd {\r\n  text-align: center;\r\n  padding: 18px 10px !important;\r\n}\r\n#yearlyTables table {\r\n  text-align: center;\r\n}\r\n.table {\r\n  --bs-table-bg: transparent !important;\r\n}\r\n#yearlyTables th {\r\n  font-size: 19px;\r\n  font-weight: 700;\r\n  color: #d0b870;\r\n}\r\ncanvas {\r\n  width: 100% !important;\r\n  height: 100% !important;\r\n  padding: 20px;\r\n  object-fit: contain;\r\n}\r\n\r\n.logo img {\r\n  width: 150px;\r\n}\r\n\r\n.iconbar ul {\r\n  list-style: none;\r\n  display: flex;\r\n  gap: 15px;\r\n}\r\n\r\n.icon-item {\r\n  width: 36px;\r\n  height: 36px;\r\n  border-radius: 50%;\r\n  background: #d0b870;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  transition: 0.3s;\r\n}\r\n.icon-item a {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.icon-item svg {\r\n  fill: white;\r\n  width: 20px;\r\n  height: 20px;\r\n}\r\n.uk-navbar-toggle {\r\n  padding: 0 0;\r\n  color: #2f2f2f;\r\n  font-weight: 300;\r\n  text-transform: none;\r\n}\r\n\r\n/* css start */\r\n.nav-pills .nav-link.active {\r\n  background-color: #000000a3;\r\n  color: white;\r\n  border-radius: 5px;\r\n  padding: 14px 30px;\r\n  font-weight: 600;\r\n}\r\n.nav-pills .nav-link {\r\n  color: black;\r\n}\r\n.card {\r\n  border-radius: 12px;\r\n  box-shadow: 0px 0px 16px 0px #00000040;\r\n}\r\n.input-group-text {\r\n  background-color: #206ba4;\r\n  color: white;\r\n  border: none;\r\n  background: black;\r\n}\r\n.card button {\r\n  background-color: black;\r\n  padding: 14px 20px;\r\n  font-size: 16px;\r\n}\r\n.card button:hover {\r\n  background-color: black;\r\n}\r\n.card-1 {\r\n  background: #206ba4;\r\n  margin-block: 40px !important;\r\n}\r\n.form-control {\r\n  padding: 20px 0.75rem;\r\n}\r\n.card-2 {\r\n  padding: 20px;\r\n}\r\n.card-2-inner h4 {\r\n  font-size: 26px;\r\n  font-weight: 700;\r\n  color: #d0b870;\r\n}\r\n\r\n.card-service {\r\n  gap: 20px;\r\n  justify-content: space-around;\r\n}\r\n.tab-content h1 {\r\n  font-size: 40px;\r\n  color: #d0b870;\r\n  font-weight: 700;\r\n  text-transform: capitalize;\r\n  padding-bottom: 10px;\r\n  position: relative;\r\n}\r\n.result {\r\n  font-size: 24px;\r\n  font-weight: 500;\r\n}\r\n.card-2-inner {\r\n  padding-block: 40px !important;\r\n  height: 100%;\r\n  box-shadow: rgba(0, 0, 0, 0.02) 0px 1px 3px 0px,\r\n    rgba(27, 31, 35, 0.15) 0px 0px 0px 1px;\r\n}\r\n\r\n.card-2-inner h5 {\r\n  font-size: 22px;\r\n  font-weight: 700;\r\n  padding-bottom: 20px;\r\n}\r\n.card-2-inner p {\r\n  font-size: 22px;\r\n  font-weight: 700;\r\n}\r\n.input-circle span {\r\n  padding: 2px 12px;\r\n  position: absolute;\r\n  top: 12px;\r\n  right: 15px;\r\n  color: white;\r\n  border-radius: 34px;\r\n  background: lightgray;\r\n  cursor: pointer !important;\r\n}\r\n.form-floating {\r\n  position: relative;\r\n  width: 100%;\r\n}\r\ninput::-webkit-outer-spin-button,\r\ninput::-webkit-inner-spin-button {\r\n  -webkit-appearance: none;\r\n  margin: 0;\r\n}\r\n.error {\r\n  text-align: start !important;\r\n  display: flex;\r\n  padding: 10px;\r\n  color: #852828;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n}\r\n/* Firefox */\r\ninput[type='number'] {\r\n  -moz-appearance: textfield;\r\n}\r\n.form-control {\r\n  padding: 8px 0.75rem;\r\n}\r\n.accordion-body {\r\n  background-color: white;\r\n}\r\n.accordion-button:not(.collapsed) {\r\n  color: white;\r\n  background-color: #d0b870 !important;\r\n  box-shadow: inset 0 calc(-1 * var(--bs-accordion-border-width)) 0\r\n    var(--bs-accordion-border-color);\r\n  font-weight: 600;\r\n}\r\n.accordion-button:not(.collapsed)::after {\r\n  filter: brightness(0) invert(1);\r\n}\r\n.tab-content h1::after {\r\n  content: '';\r\n  border-bottom: 2px solid #000;\r\n  position: absolute;\r\n  width: 40%;\r\n  left: 0;\r\n  bottom: 1px;\r\n  left: 50%;\r\n  transform: translate(-50%, 0);\r\n}\r\n.space {\r\n  width: 77%;\r\n  margin: 20px auto;\r\n}\r\n\r\n/* footer */\r\nfooter {\r\n  background: #2f2f2f;\r\n  color: #fff;\r\n  padding: 10px;\r\n  margin-top: 4rem;\r\n}\r\n.footer-sec {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n}\r\n.copyright p {\r\n  font-size: 17px;\r\n  line-height: 1.2;\r\n  color: #b0a4ac;\r\n  font-weight: 300;\r\n  text-align: center;\r\n}\r\n.website p {\r\n  font-size: 15px;\r\n  color: #d0b870;\r\n}\r\n.website a {\r\n  font-size: 15px;\r\n  color: #b0a4ac !important;\r\n  text-decoration: none;\r\n}\r\n.footer-item {\r\n  margin: 5px 0;\r\n}\r\n/* projection css start */\r\ndiv#projections h3 {\r\n  padding-block: 23px;\r\n  font-size: 26px;\r\n  font-weight: 700;\r\n}\r\ndiv#projections ul li {\r\n  list-style: none;\r\n  font-size: 20px;\r\n}\r\np.dynamicPara {\r\n  font-size: 24px !important;\r\n  color: #d0b870;\r\n}\r\n/* dropdown css */\r\nselect#timeDuration {\r\n  width: 15%;\r\n  margin-left: auto;\r\n  font-weight: 700;\r\n  color: #d0b870;\r\n  padding: 18px;\r\n  border: 2px solid;\r\n  background: rgba(0, 0, 0, 0.8);\r\n}\r\n/*-- responisve --*/\r\n@media screen and (max-width: 991px) {\r\n  select#timeDuration {\r\n    width: 45%;\r\n    margin-top: 40px;\r\n  }\r\n  .row.mob-block > div {\r\n    width: 100%;\r\n  }\r\n  .row.mob-block {\r\n    display: block;\r\n  }\r\n  .space {\r\n    width: 100%;\r\n  }\r\n}\r\n@media (max-width: 760px) {\r\n  .footer-sec {\r\n    justify-content: center !important;\r\n  }\r\n}\r\n@media (max-width: 500px) {\r\n  select#timeDuration {\r\n    width: 100%;\r\n    margin-top: 40px;\r\n  }\r\n  .iconbar {\r\n    display: none;\r\n  }\r\n  .header-sec {\r\n    justify-content: center;\r\n  }\r\n}\r\n.drops {\r\n  width: 15%;\r\n  margin-left: auto;\r\n  font-weight: 700;\r\n  color: #d0b870;\r\n  padding: 18px !important;\r\n  border: 2px solid;\r\n  background: rgba(0, 0, 0, 0.8);\r\n}\r\n/* \r\n.print-button {\r\n  padding: 10px 20px;\r\n  background-color: #d0b870;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 6px;\r\n  cursor: pointer;\r\n  margin-top: 20px;\r\n} */\r\n\r\n/* Print Styles */\r\n@media print {\r\n  .print-button,\r\n  .navigation-bar,\r\n  .sidebar,\r\n  .footer {\r\n    display: none !important; /* hide navbars, footers, buttons, etc. */\r\n  }\r\n\r\n  body {\r\n    background: white;\r\n    color: black;\r\n  }\r\n\r\n  /* Optional: adjust layout for printing */\r\n  .main-content {\r\n    width: 100%;\r\n    padding: 0;\r\n    margin: 0;\r\n  }\r\n\r\n  html,\r\n  body {\r\n    height: auto;\r\n  }\r\n}\r\n/* @media (max-width: 991px) {\r\n  .print-button {\r\n    top: -22px;\r\n    width: 50px;\r\n  }\r\n} */\r\n.btn-flex {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 20px;\r\n  align-items: end;\r\n  flex-direction: column;\r\n  position: absolute;\r\n  top: -25px;\r\n  right: 0;\r\n}\r\n\r\nhtml {\r\n  visibility: visible;\r\n  opacity: 1;\r\n}\r\n"],sourceRoot:""}]);const a=r},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",i=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),i&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),i&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,i,o,s){"string"==typeof t&&(t=[[null,t,void 0]]);var r={};if(i)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(r[l]=!0)}for(var c=0;c<t.length;c++){var h=[].concat(t[c]);i&&r[h[0]]||(void 0!==s&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=s),n&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=n):h[2]=n),o&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=o):h[4]="".concat(o)),e.push(h))}},e}},354:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),s="/*# ".concat(o," */");return[e].concat([s]).join("\n")}return[e].join("\n")}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},659:t=>{var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,o&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(i,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var s=e[i]={id:i,exports:{}};return t[i](s,s.exports,n),s.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0;var i=n(72),o=n.n(i),s=n(825),r=n.n(s),a=n(659),l=n.n(a),c=n(56),h=n.n(c),d=n(540),u=n.n(d),g=n(113),p=n.n(g),f=n(208),m={};function b(t){let e=t%1==0?Math.abs(t).toLocaleString():Math.abs(t).toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2});return t<0?`- $${e}`:`$${e}`}function x(t){return t%1==0?t.toLocaleString():t.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2})}function y(t){document.getElementById(t).parentNode.innerHTML=`<canvas id="${t}"></canvas>`}function A(t){return t+.5|0}m.styleTagTransform=p(),m.setAttributes=h(),m.insert=l().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=u(),o()(f.A,m),f.A&&f.A.locals&&f.A.locals;const v=(t,e,n)=>Math.max(Math.min(t,n),e);function _(t){return v(A(2.55*t),0,255)}function w(t){return v(A(255*t),0,255)}function C(t){return v(A(t/2.55)/100,0,1)}function E(t){return v(A(100*t),0,100)}const M={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},k=[..."0123456789ABCDEF"],B=t=>k[15&t],S=t=>k[(240&t)>>4]+k[15&t],I=t=>(240&t)>>4==(15&t);const P=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function D(t,e,n){const i=e*Math.min(n,1-n),o=(e,o=(e+t/30)%12)=>n-i*Math.max(Math.min(o-3,9-o,1),-1);return[o(0),o(8),o(4)]}function R(t,e,n){const i=(i,o=(i+t/60)%6)=>n-n*e*Math.max(Math.min(o,4-o,1),0);return[i(5),i(3),i(1)]}function T(t,e,n){const i=D(t,1,.5);let o;for(e+n>1&&(o=1/(e+n),e*=o,n*=o),o=0;o<3;o++)i[o]*=1-e-n,i[o]+=e;return i}function O(t){const e=t.r/255,n=t.g/255,i=t.b/255,o=Math.max(e,n,i),s=Math.min(e,n,i),r=(o+s)/2;let a,l,c;return o!==s&&(c=o-s,l=r>.5?c/(2-o-s):c/(o+s),a=function(t,e,n,i,o){return t===o?(e-n)/i+(e<n?6:0):e===o?(n-t)/i+2:(t-e)/i+4}(e,n,i,c,o),a=60*a+.5),[0|a,l||0,r]}function F(t,e,n,i){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,n,i)).map(w)}function L(t,e,n){return F(D,t,e,n)}function z(t){return(t%360+360)%360}const $={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},V={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let W;const N=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,j=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,H=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function Y(t,e,n){if(t){let i=O(t);i[e]=Math.max(0,Math.min(i[e]+i[e]*n,0===e?360:1)),i=L(i),t.r=i[0],t.g=i[1],t.b=i[2]}}function U(t,e){return t?Object.assign(e||{},t):t}function q(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=w(t[3]))):(e=U(t,{r:0,g:0,b:0,a:1})).a=w(e.a),e}function X(t){return"r"===t.charAt(0)?function(t){const e=N.exec(t);let n,i,o,s=255;if(e){if(e[7]!==n){const t=+e[7];s=e[8]?_(t):v(255*t,0,255)}return n=+e[1],i=+e[3],o=+e[5],n=255&(e[2]?_(n):v(n,0,255)),i=255&(e[4]?_(i):v(i,0,255)),o=255&(e[6]?_(o):v(o,0,255)),{r:n,g:i,b:o,a:s}}}(t):function(t){const e=P.exec(t);let n,i=255;if(!e)return;e[5]!==n&&(i=e[6]?_(+e[5]):w(+e[5]));const o=z(+e[2]),s=+e[3]/100,r=+e[4]/100;return n="hwb"===e[1]?function(t,e,n){return F(T,t,e,n)}(o,s,r):"hsv"===e[1]?function(t,e,n){return F(R,t,e,n)}(o,s,r):L(o,s,r),{r:n[0],g:n[1],b:n[2],a:i}}(t)}class G{constructor(t){if(t instanceof G)return t;const e=typeof t;let n;var i,o,s;"object"===e?n=q(t):"string"===e&&(s=(i=t).length,"#"===i[0]&&(4===s||5===s?o={r:255&17*M[i[1]],g:255&17*M[i[2]],b:255&17*M[i[3]],a:5===s?17*M[i[4]]:255}:7!==s&&9!==s||(o={r:M[i[1]]<<4|M[i[2]],g:M[i[3]]<<4|M[i[4]],b:M[i[5]]<<4|M[i[6]],a:9===s?M[i[7]]<<4|M[i[8]]:255})),n=o||function(t){W||(W=function(){const t={},e=Object.keys(V),n=Object.keys($);let i,o,s,r,a;for(i=0;i<e.length;i++){for(r=a=e[i],o=0;o<n.length;o++)s=n[o],a=a.replace(s,$[s]);s=parseInt(V[r],16),t[a]=[s>>16&255,s>>8&255,255&s]}return t}(),W.transparent=[0,0,0,0]);const e=W[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||X(t)),this._rgb=n,this._valid=!!n}get valid(){return this._valid}get rgb(){var t=U(this._rgb);return t&&(t.a=C(t.a)),t}set rgb(t){this._rgb=q(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${C(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):void 0;var t}hexString(){return this._valid?(t=this._rgb,e=(t=>I(t.r)&&I(t.g)&&I(t.b)&&I(t.a))(t)?B:S,t?"#"+e(t.r)+e(t.g)+e(t.b)+((t,e)=>t<255?e(t):"")(t.a,e):void 0):void 0;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=O(t),n=e[0],i=E(e[1]),o=E(e[2]);return t.a<255?`hsla(${n}, ${i}%, ${o}%, ${C(t.a)})`:`hsl(${n}, ${i}%, ${o}%)`}(this._rgb):void 0}mix(t,e){if(t){const n=this.rgb,i=t.rgb;let o;const s=e===o?.5:e,r=2*s-1,a=n.a-i.a,l=((r*a==-1?r:(r+a)/(1+r*a))+1)/2;o=1-l,n.r=255&l*n.r+o*i.r+.5,n.g=255&l*n.g+o*i.g+.5,n.b=255&l*n.b+o*i.b+.5,n.a=s*n.a+(1-s)*i.a,this.rgb=n}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,n){const i=H(C(t.r)),o=H(C(t.g)),s=H(C(t.b));return{r:w(j(i+n*(H(C(e.r))-i))),g:w(j(o+n*(H(C(e.g))-o))),b:w(j(s+n*(H(C(e.b))-s))),a:t.a+n*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new G(this.rgb)}alpha(t){return this._rgb.a=w(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=A(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Y(this._rgb,2,t),this}darken(t){return Y(this._rgb,2,-t),this}saturate(t){return Y(this._rgb,1,t),this}desaturate(t){return Y(this._rgb,1,-t),this}rotate(t){return function(t,e){var n=O(t);n[0]=z(n[0]+e),n=L(n),t.r=n[0],t.g=n[1],t.b=n[2]}(this._rgb,t),this}}function Z(){}const K=(()=>{let t=0;return()=>t++})();function J(t){return null==t}function Q(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function tt(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}function et(t){return("number"==typeof t||t instanceof Number)&&isFinite(+t)}function nt(t,e){return et(t)?t:e}function it(t,e){return void 0===t?e:t}const ot=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function st(t,e,n){if(t&&"function"==typeof t.call)return t.apply(n,e)}function rt(t,e,n,i){let o,s,r;if(Q(t))if(s=t.length,i)for(o=s-1;o>=0;o--)e.call(n,t[o],o);else for(o=0;o<s;o++)e.call(n,t[o],o);else if(tt(t))for(r=Object.keys(t),s=r.length,o=0;o<s;o++)e.call(n,t[r[o]],r[o])}function at(t,e){let n,i,o,s;if(!t||!e||t.length!==e.length)return!1;for(n=0,i=t.length;n<i;++n)if(o=t[n],s=e[n],o.datasetIndex!==s.datasetIndex||o.index!==s.index)return!1;return!0}function lt(t){if(Q(t))return t.map(lt);if(tt(t)){const e=Object.create(null),n=Object.keys(t),i=n.length;let o=0;for(;o<i;++o)e[n[o]]=lt(t[n[o]]);return e}return t}function ct(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function ht(t,e,n,i){if(!ct(t))return;const o=e[t],s=n[t];tt(o)&&tt(s)?dt(o,s,i):e[t]=lt(s)}function dt(t,e,n){const i=Q(e)?e:[e],o=i.length;if(!tt(t))return t;const s=(n=n||{}).merger||ht;let r;for(let e=0;e<o;++e){if(r=i[e],!tt(r))continue;const o=Object.keys(r);for(let e=0,i=o.length;e<i;++e)s(o[e],t,r,n)}return t}function ut(t,e){return dt(t,e,{merger:gt})}function gt(t,e,n){if(!ct(t))return;const i=e[t],o=n[t];tt(i)&&tt(o)?ut(i,o):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=lt(o))}const pt={"":t=>t,x:t=>t.x,y:t=>t.y};function ft(t,e){const n=pt[e]||(pt[e]=function(t){const e=function(t){const e=t.split("."),n=[];let i="";for(const t of e)i+=t,i.endsWith("\\")?i=i.slice(0,-1)+".":(n.push(i),i="");return n}(t);return t=>{for(const n of e){if(""===n)break;t=t&&t[n]}return t}}(e));return n(t)}function mt(t){return t.charAt(0).toUpperCase()+t.slice(1)}const bt=t=>void 0!==t,xt=t=>"function"==typeof t,yt=(t,e)=>{if(t.size!==e.size)return!1;for(const n of t)if(!e.has(n))return!1;return!0},At=Math.PI,vt=2*At,_t=vt+At,wt=Number.POSITIVE_INFINITY,Ct=At/180,Et=At/2,Mt=At/4,kt=2*At/3,Bt=Math.log10,St=Math.sign;function It(t,e,n){return Math.abs(t-e)<n}function Pt(t){const e=Math.round(t);t=It(t,e,t/1e3)?e:t;const n=Math.pow(10,Math.floor(Bt(t))),i=t/n;return(i<=1?1:i<=2?2:i<=5?5:10)*n}function Dt(t){return!function(t){return"symbol"==typeof t||"object"==typeof t&&null!==t&&!(Symbol.toPrimitive in t||"toString"in t||"valueOf"in t)}(t)&&!isNaN(parseFloat(t))&&isFinite(t)}function Rt(t,e,n){let i,o,s;for(i=0,o=t.length;i<o;i++)s=t[i][n],isNaN(s)||(e.min=Math.min(e.min,s),e.max=Math.max(e.max,s))}function Tt(t){return t*(At/180)}function Ot(t){return t*(180/At)}function Ft(t){if(!et(t))return;let e=1,n=0;for(;Math.round(t*e)/e!==t;)e*=10,n++;return n}function Lt(t,e){const n=e.x-t.x,i=e.y-t.y,o=Math.sqrt(n*n+i*i);let s=Math.atan2(i,n);return s<-.5*At&&(s+=vt),{angle:s,distance:o}}function zt(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function $t(t,e){return(t-e+_t)%vt-At}function Vt(t){return(t%vt+vt)%vt}function Wt(t,e,n,i){const o=Vt(t),s=Vt(e),r=Vt(n),a=Vt(s-o),l=Vt(r-o),c=Vt(o-s),h=Vt(o-r);return o===s||o===r||i&&s===r||a>l&&c<h}function Nt(t,e,n){return Math.max(e,Math.min(n,t))}function jt(t,e,n,i=1e-6){return t>=Math.min(e,n)-i&&t<=Math.max(e,n)+i}function Ht(t,e,n){n=n||(n=>t[n]<e);let i,o=t.length-1,s=0;for(;o-s>1;)i=s+o>>1,n(i)?s=i:o=i;return{lo:s,hi:o}}const Yt=(t,e,n,i)=>Ht(t,n,i?i=>{const o=t[i][e];return o<n||o===n&&t[i+1][e]===n}:i=>t[i][e]<n),Ut=(t,e,n)=>Ht(t,n,(i=>t[i][e]>=n)),qt=["push","pop","shift","splice","unshift"];function Xt(t,e){const n=t._chartjs;if(!n)return;const i=n.listeners,o=i.indexOf(e);-1!==o&&i.splice(o,1),i.length>0||(qt.forEach((e=>{delete t[e]})),delete t._chartjs)}function Gt(t){const e=new Set(t);return e.size===t.length?t:Array.from(e)}const Zt="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function Kt(t,e){let n=[],i=!1;return function(...o){n=o,i||(i=!0,Zt.call(window,(()=>{i=!1,t.apply(e,n)})))}}const Jt=t=>"start"===t?"left":"end"===t?"right":"center",Qt=(t,e,n)=>"start"===t?e:"end"===t?n:(e+n)/2;function te(t,e,n){const i=e.length;let o=0,s=i;if(t._sorted){const{iScale:r,vScale:a,_parsed:l}=t,c=t.dataset&&t.dataset.options?t.dataset.options.spanGaps:null,h=r.axis,{min:d,max:u,minDefined:g,maxDefined:p}=r.getUserBounds();if(g){if(o=Math.min(Yt(l,h,d).lo,n?i:Yt(e,h,r.getPixelForValue(d)).lo),c){const t=l.slice(0,o+1).reverse().findIndex((t=>!J(t[a.axis])));o-=Math.max(0,t)}o=Nt(o,0,i-1)}if(p){let t=Math.max(Yt(l,r.axis,u,!0).hi+1,n?0:Yt(e,h,r.getPixelForValue(u),!0).hi+1);if(c){const e=l.slice(t-1).findIndex((t=>!J(t[a.axis])));t+=Math.max(0,e)}s=Nt(t,o,i)-o}else s=i-o}return{start:o,count:s}}function ee(t){const{xScale:e,yScale:n,_scaleRanges:i}=t,o={xmin:e.min,xmax:e.max,ymin:n.min,ymax:n.max};if(!i)return t._scaleRanges=o,!0;const s=i.xmin!==e.min||i.xmax!==e.max||i.ymin!==n.min||i.ymax!==n.max;return Object.assign(i,o),s}const ne=t=>0===t||1===t,ie=(t,e,n)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*vt/n),oe=(t,e,n)=>Math.pow(2,-10*t)*Math.sin((t-e)*vt/n)+1,se={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*Et),easeOutSine:t=>Math.sin(t*Et),easeInOutSine:t=>-.5*(Math.cos(At*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>ne(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>ne(t)?t:ie(t,.075,.3),easeOutElastic:t=>ne(t)?t:oe(t,.075,.3),easeInOutElastic(t){const e=.1125;return ne(t)?t:t<.5?.5*ie(2*t,e,.45):.5+.5*oe(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-se.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,n=2.75;return t<1/n?e*t*t:t<2/n?e*(t-=1.5/n)*t+.75:t<2.5/n?e*(t-=2.25/n)*t+.9375:e*(t-=2.625/n)*t+.984375},easeInOutBounce:t=>t<.5?.5*se.easeInBounce(2*t):.5*se.easeOutBounce(2*t-1)+.5};function re(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function ae(t){return re(t)?t:new G(t)}function le(t){return re(t)?t:new G(t).saturate(.5).darken(.1).hexString()}const ce=["x","y","borderWidth","radius","tension"],he=["color","borderColor","backgroundColor"],de=new Map;function ue(t,e,n){return function(t,e){e=e||{};const n=t+JSON.stringify(e);let i=de.get(n);return i||(i=new Intl.NumberFormat(t,e),de.set(n,i)),i}(e,n).format(t)}const ge={values:t=>Q(t)?t:""+t,numeric(t,e,n){if(0===t)return"0";const i=this.chart.options.locale;let o,s=t;if(n.length>1){const e=Math.max(Math.abs(n[0].value),Math.abs(n[n.length-1].value));(e<1e-4||e>1e15)&&(o="scientific"),s=function(t,e){let n=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(n)>=1&&t!==Math.floor(t)&&(n=t-Math.floor(t)),n}(t,n)}const r=Bt(Math.abs(s)),a=isNaN(r)?1:Math.max(Math.min(-1*Math.floor(r),20),0),l={notation:o,minimumFractionDigits:a,maximumFractionDigits:a};return Object.assign(l,this.options.ticks.format),ue(t,i,l)},logarithmic(t,e,n){if(0===t)return"0";const i=n[e].significand||t/Math.pow(10,Math.floor(Bt(t)));return[1,2,3,5,10,15].includes(i)||e>.8*n.length?ge.numeric.call(this,t,e,n):""}};var pe={formatters:ge};const fe=Object.create(null),me=Object.create(null);function be(t,e){if(!e)return t;const n=e.split(".");for(let e=0,i=n.length;e<i;++e){const i=n[e];t=t[i]||(t[i]=Object.create(null))}return t}function xe(t,e,n){return"string"==typeof e?dt(be(t,e),n):dt(be(t,""),e)}class ye{constructor(t,e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>le(e.backgroundColor),this.hoverBorderColor=(t,e)=>le(e.borderColor),this.hoverColor=(t,e)=>le(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t),this.apply(e)}set(t,e){return xe(this,t,e)}get(t){return be(this,t)}describe(t,e){return xe(me,t,e)}override(t,e){return xe(fe,t,e)}route(t,e,n,i){const o=be(this,t),s=be(this,n),r="_"+e;Object.defineProperties(o,{[r]:{value:o[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[r],e=s[i];return tt(t)?Object.assign({},e,t):it(t,e)},set(t){this[r]=t}}})}apply(t){t.forEach((t=>t(this)))}}var Ae=new ye({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[function(t){t.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),t.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),t.set("animations",{colors:{type:"color",properties:he},numbers:{type:"number",properties:ce}}),t.describe("animations",{_fallback:"animation"}),t.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}})},function(t){t.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})},function(t){t.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",clip:!0,grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:pe.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),t.route("scale.ticks","color","","color"),t.route("scale.grid","color","","borderColor"),t.route("scale.border","color","","borderColor"),t.route("scale.title","color","","color"),t.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t&&"dash"!==t}),t.describe("scales",{_fallback:"scale"}),t.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t})}]);function ve(t,e,n,i,o){let s=e[o];return s||(s=e[o]=t.measureText(o).width,n.push(o)),s>i&&(i=s),i}function _e(t,e,n,i){let o=(i=i||{}).data=i.data||{},s=i.garbageCollect=i.garbageCollect||[];i.font!==e&&(o=i.data={},s=i.garbageCollect=[],i.font=e),t.save(),t.font=e;let r=0;const a=n.length;let l,c,h,d,u;for(l=0;l<a;l++)if(d=n[l],null==d||Q(d)){if(Q(d))for(c=0,h=d.length;c<h;c++)u=d[c],null==u||Q(u)||(r=ve(t,o,s,r,u))}else r=ve(t,o,s,r,d);t.restore();const g=s.length/2;if(g>n.length){for(l=0;l<g;l++)delete o[s[l]];s.splice(0,g)}return r}function we(t,e,n){const i=t.currentDevicePixelRatio,o=0!==n?Math.max(n/2,.5):0;return Math.round((e-o)*i)/i+o}function Ce(t,e){(e||t)&&((e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore())}function Ee(t,e,n,i){Me(t,e,n,i,null)}function Me(t,e,n,i,o){let s,r,a,l,c,h,d,u;const g=e.pointStyle,p=e.rotation,f=e.radius;let m=(p||0)*Ct;if(g&&"object"==typeof g&&(s=g.toString(),"[object HTMLImageElement]"===s||"[object HTMLCanvasElement]"===s))return t.save(),t.translate(n,i),t.rotate(m),t.drawImage(g,-g.width/2,-g.height/2,g.width,g.height),void t.restore();if(!(isNaN(f)||f<=0)){switch(t.beginPath(),g){default:o?t.ellipse(n,i,o/2,f,0,0,vt):t.arc(n,i,f,0,vt),t.closePath();break;case"triangle":h=o?o/2:f,t.moveTo(n+Math.sin(m)*h,i-Math.cos(m)*f),m+=kt,t.lineTo(n+Math.sin(m)*h,i-Math.cos(m)*f),m+=kt,t.lineTo(n+Math.sin(m)*h,i-Math.cos(m)*f),t.closePath();break;case"rectRounded":c=.516*f,l=f-c,r=Math.cos(m+Mt)*l,d=Math.cos(m+Mt)*(o?o/2-c:l),a=Math.sin(m+Mt)*l,u=Math.sin(m+Mt)*(o?o/2-c:l),t.arc(n-d,i-a,c,m-At,m-Et),t.arc(n+u,i-r,c,m-Et,m),t.arc(n+d,i+a,c,m,m+Et),t.arc(n-u,i+r,c,m+Et,m+At),t.closePath();break;case"rect":if(!p){l=Math.SQRT1_2*f,h=o?o/2:l,t.rect(n-h,i-l,2*h,2*l);break}m+=Mt;case"rectRot":d=Math.cos(m)*(o?o/2:f),r=Math.cos(m)*f,a=Math.sin(m)*f,u=Math.sin(m)*(o?o/2:f),t.moveTo(n-d,i-a),t.lineTo(n+u,i-r),t.lineTo(n+d,i+a),t.lineTo(n-u,i+r),t.closePath();break;case"crossRot":m+=Mt;case"cross":d=Math.cos(m)*(o?o/2:f),r=Math.cos(m)*f,a=Math.sin(m)*f,u=Math.sin(m)*(o?o/2:f),t.moveTo(n-d,i-a),t.lineTo(n+d,i+a),t.moveTo(n+u,i-r),t.lineTo(n-u,i+r);break;case"star":d=Math.cos(m)*(o?o/2:f),r=Math.cos(m)*f,a=Math.sin(m)*f,u=Math.sin(m)*(o?o/2:f),t.moveTo(n-d,i-a),t.lineTo(n+d,i+a),t.moveTo(n+u,i-r),t.lineTo(n-u,i+r),m+=Mt,d=Math.cos(m)*(o?o/2:f),r=Math.cos(m)*f,a=Math.sin(m)*f,u=Math.sin(m)*(o?o/2:f),t.moveTo(n-d,i-a),t.lineTo(n+d,i+a),t.moveTo(n+u,i-r),t.lineTo(n-u,i+r);break;case"line":r=o?o/2:Math.cos(m)*f,a=Math.sin(m)*f,t.moveTo(n-r,i-a),t.lineTo(n+r,i+a);break;case"dash":t.moveTo(n,i),t.lineTo(n+Math.cos(m)*(o?o/2:f),i+Math.sin(m)*f);break;case!1:t.closePath()}t.fill(),e.borderWidth>0&&t.stroke()}}function ke(t,e,n){return n=n||.5,!e||t&&t.x>e.left-n&&t.x<e.right+n&&t.y>e.top-n&&t.y<e.bottom+n}function Be(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function Se(t){t.restore()}function Ie(t,e,n,i,o){if(!e)return t.lineTo(n.x,n.y);if("middle"===o){const i=(e.x+n.x)/2;t.lineTo(i,e.y),t.lineTo(i,n.y)}else"after"===o!=!!i?t.lineTo(e.x,n.y):t.lineTo(n.x,e.y);t.lineTo(n.x,n.y)}function Pe(t,e,n,i){if(!e)return t.lineTo(n.x,n.y);t.bezierCurveTo(i?e.cp1x:e.cp2x,i?e.cp1y:e.cp2y,i?n.cp2x:n.cp1x,i?n.cp2y:n.cp1y,n.x,n.y)}function De(t,e,n,i,o){if(o.strikethrough||o.underline){const s=t.measureText(i),r=e-s.actualBoundingBoxLeft,a=e+s.actualBoundingBoxRight,l=n-s.actualBoundingBoxAscent,c=n+s.actualBoundingBoxDescent,h=o.strikethrough?(l+c)/2:c;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=o.decorationWidth||2,t.moveTo(r,h),t.lineTo(a,h),t.stroke()}}function Re(t,e){const n=t.fillStyle;t.fillStyle=e.color,t.fillRect(e.left,e.top,e.width,e.height),t.fillStyle=n}function Te(t,e,n,i,o,s={}){const r=Q(e)?e:[e],a=s.strokeWidth>0&&""!==s.strokeColor;let l,c;for(t.save(),t.font=o.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),J(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,s),l=0;l<r.length;++l)c=r[l],s.backdrop&&Re(t,s.backdrop),a&&(s.strokeColor&&(t.strokeStyle=s.strokeColor),J(s.strokeWidth)||(t.lineWidth=s.strokeWidth),t.strokeText(c,n,i,s.maxWidth)),t.fillText(c,n,i,s.maxWidth),De(t,n,i,c,s),i+=Number(o.lineHeight);t.restore()}function Oe(t,e){const{x:n,y:i,w:o,h:s,radius:r}=e;t.arc(n+r.topLeft,i+r.topLeft,r.topLeft,1.5*At,At,!0),t.lineTo(n,i+s-r.bottomLeft),t.arc(n+r.bottomLeft,i+s-r.bottomLeft,r.bottomLeft,At,Et,!0),t.lineTo(n+o-r.bottomRight,i+s),t.arc(n+o-r.bottomRight,i+s-r.bottomRight,r.bottomRight,Et,0,!0),t.lineTo(n+o,i+r.topRight),t.arc(n+o-r.topRight,i+r.topRight,r.topRight,0,-Et,!0),t.lineTo(n+r.topLeft,i)}const Fe=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,Le=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function ze(t,e){const n=(""+t).match(Fe);if(!n||"normal"===n[1])return 1.2*e;switch(t=+n[2],n[3]){case"px":return t;case"%":t/=100}return e*t}function $e(t,e){const n={},i=tt(e),o=i?Object.keys(e):e,s=tt(t)?i?n=>it(t[n],t[e[n]]):e=>t[e]:()=>t;for(const t of o)n[t]=+s(t)||0;return n}function Ve(t){return $e(t,{top:"y",right:"x",bottom:"y",left:"x"})}function We(t){return $e(t,["topLeft","topRight","bottomLeft","bottomRight"])}function Ne(t){const e=Ve(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function je(t,e){t=t||{},e=e||Ae.font;let n=it(t.size,e.size);"string"==typeof n&&(n=parseInt(n,10));let i=it(t.style,e.style);i&&!(""+i).match(Le)&&(console.warn('Invalid font style specified: "'+i+'"'),i=void 0);const o={family:it(t.family,e.family),lineHeight:ze(it(t.lineHeight,e.lineHeight),n),size:n,style:i,weight:it(t.weight,e.weight),string:""};return o.string=function(t){return!t||J(t.size)||J(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(o),o}function He(t,e,n,i){let o,s,r,a=!0;for(o=0,s=t.length;o<s;++o)if(r=t[o],void 0!==r&&(void 0!==e&&"function"==typeof r&&(r=r(e),a=!1),void 0!==n&&Q(r)&&(r=r[n%r.length],a=!1),void 0!==r))return i&&!a&&(i.cacheable=!1),r}function Ye(t,e){return Object.assign(Object.create(t),e)}function Ue(t,e=[""],n,i,o=()=>t[0]){const s=n||t;void 0===i&&(i=on("_fallback",t));const r={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:s,_fallback:i,_getTarget:o,override:n=>Ue([n,...t],e,s,i)};return new Proxy(r,{deleteProperty:(e,n)=>(delete e[n],delete e._keys,delete t[0][n],!0),get:(n,i)=>Ke(n,i,(()=>function(t,e,n,i){let o;for(const s of e)if(o=on(Ge(s,t),n),void 0!==o)return Ze(t,o)?en(n,i,t,o):o}(i,e,t,n))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>sn(t).includes(e),ownKeys:t=>sn(t),set(t,e,n){const i=t._storage||(t._storage=o());return t[e]=i[e]=n,delete t._keys,!0}})}function qe(t,e,n,i){const o={_cacheable:!1,_proxy:t,_context:e,_subProxy:n,_stack:new Set,_descriptors:Xe(t,i),setContext:e=>qe(t,e,n,i),override:o=>qe(t.override(o),e,n,i)};return new Proxy(o,{deleteProperty:(e,n)=>(delete e[n],delete t[n],!0),get:(t,e,n)=>Ke(t,e,(()=>function(t,e,n){const{_proxy:i,_context:o,_subProxy:s,_descriptors:r}=t;let a=i[e];return xt(a)&&r.isScriptable(e)&&(a=function(t,e,n,i){const{_proxy:o,_context:s,_subProxy:r,_stack:a}=n;if(a.has(t))throw new Error("Recursion detected: "+Array.from(a).join("->")+"->"+t);a.add(t);let l=e(s,r||i);return a.delete(t),Ze(t,l)&&(l=en(o._scopes,o,t,l)),l}(e,a,t,n)),Q(a)&&a.length&&(a=function(t,e,n,i){const{_proxy:o,_context:s,_subProxy:r,_descriptors:a}=n;if(void 0!==s.index&&i(t))return e[s.index%e.length];if(tt(e[0])){const n=e,i=o._scopes.filter((t=>t!==n));e=[];for(const l of n){const n=en(i,o,t,l);e.push(qe(n,s,r&&r[t],a))}}return e}(e,a,t,r.isIndexable)),Ze(e,a)&&(a=qe(a,o,s&&s[e],r)),a}(t,e,n))),getOwnPropertyDescriptor:(e,n)=>e._descriptors.allKeys?Reflect.has(t,n)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,n),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,n)=>Reflect.has(t,n),ownKeys:()=>Reflect.ownKeys(t),set:(e,n,i)=>(t[n]=i,delete e[n],!0)})}function Xe(t,e={scriptable:!0,indexable:!0}){const{_scriptable:n=e.scriptable,_indexable:i=e.indexable,_allKeys:o=e.allKeys}=t;return{allKeys:o,scriptable:n,indexable:i,isScriptable:xt(n)?n:()=>n,isIndexable:xt(i)?i:()=>i}}const Ge=(t,e)=>t?t+mt(e):e,Ze=(t,e)=>tt(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function Ke(t,e,n){if(Object.prototype.hasOwnProperty.call(t,e)||"constructor"===e)return t[e];const i=n();return t[e]=i,i}function Je(t,e,n){return xt(t)?t(e,n):t}const Qe=(t,e)=>!0===t?e:"string"==typeof t?ft(e,t):void 0;function tn(t,e,n,i,o){for(const s of e){const e=Qe(n,s);if(e){t.add(e);const s=Je(e._fallback,n,o);if(void 0!==s&&s!==n&&s!==i)return s}else if(!1===e&&void 0!==i&&n!==i)return null}return!1}function en(t,e,n,i){const o=e._rootScopes,s=Je(e._fallback,n,i),r=[...t,...o],a=new Set;a.add(i);let l=nn(a,r,n,s||n,i);return null!==l&&(void 0===s||s===n||(l=nn(a,r,s,l,i),null!==l))&&Ue(Array.from(a),[""],o,s,(()=>function(t,e,n){const i=t._getTarget();e in i||(i[e]={});const o=i[e];return Q(o)&&tt(n)?n:o||{}}(e,n,i)))}function nn(t,e,n,i,o){for(;n;)n=tn(t,e,n,i,o);return n}function on(t,e){for(const n of e){if(!n)continue;const e=n[t];if(void 0!==e)return e}}function sn(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const n of t)for(const t of Object.keys(n).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function rn(t,e,n,i){const{iScale:o}=t,{key:s="r"}=this._parsing,r=new Array(i);let a,l,c,h;for(a=0,l=i;a<l;++a)c=a+n,h=e[c],r[a]={r:o.parse(ft(h,s),c)};return r}const an=Number.EPSILON||1e-14,ln=(t,e)=>e<t.length&&!t[e].skip&&t[e],cn=t=>"x"===t?"y":"x";function hn(t,e,n,i){const o=t.skip?e:t,s=e,r=n.skip?e:n,a=zt(s,o),l=zt(r,s);let c=a/(a+l),h=l/(a+l);c=isNaN(c)?0:c,h=isNaN(h)?0:h;const d=i*c,u=i*h;return{previous:{x:s.x-d*(r.x-o.x),y:s.y-d*(r.y-o.y)},next:{x:s.x+u*(r.x-o.x),y:s.y+u*(r.y-o.y)}}}function dn(t,e,n){return Math.max(Math.min(t,n),e)}function un(t,e,n,i,o){let s,r,a,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const n=cn(e),i=t.length,o=Array(i).fill(0),s=Array(i);let r,a,l,c=ln(t,0);for(r=0;r<i;++r)if(a=l,l=c,c=ln(t,r+1),l){if(c){const t=c[e]-l[e];o[r]=0!==t?(c[n]-l[n])/t:0}s[r]=a?c?St(o[r-1])!==St(o[r])?0:(o[r-1]+o[r])/2:o[r-1]:o[r]}!function(t,e,n){const i=t.length;let o,s,r,a,l,c=ln(t,0);for(let h=0;h<i-1;++h)l=c,c=ln(t,h+1),l&&c&&(It(e[h],0,an)?n[h]=n[h+1]=0:(o=n[h]/e[h],s=n[h+1]/e[h],a=Math.pow(o,2)+Math.pow(s,2),a<=9||(r=3/Math.sqrt(a),n[h]=o*r*e[h],n[h+1]=s*r*e[h])))}(t,o,s),function(t,e,n="x"){const i=cn(n),o=t.length;let s,r,a,l=ln(t,0);for(let c=0;c<o;++c){if(r=a,a=l,l=ln(t,c+1),!a)continue;const o=a[n],h=a[i];r&&(s=(o-r[n])/3,a[`cp1${n}`]=o-s,a[`cp1${i}`]=h-s*e[c]),l&&(s=(l[n]-o)/3,a[`cp2${n}`]=o+s,a[`cp2${i}`]=h+s*e[c])}}(t,s,e)}(t,o);else{let n=i?t[t.length-1]:t[0];for(s=0,r=t.length;s<r;++s)a=t[s],l=hn(n,a,t[Math.min(s+1,r-(i?0:1))%r],e.tension),a.cp1x=l.previous.x,a.cp1y=l.previous.y,a.cp2x=l.next.x,a.cp2y=l.next.y,n=a}e.capBezierPoints&&function(t,e){let n,i,o,s,r,a=ke(t[0],e);for(n=0,i=t.length;n<i;++n)r=s,s=a,a=n<i-1&&ke(t[n+1],e),s&&(o=t[n],r&&(o.cp1x=dn(o.cp1x,e.left,e.right),o.cp1y=dn(o.cp1y,e.top,e.bottom)),a&&(o.cp2x=dn(o.cp2x,e.left,e.right),o.cp2y=dn(o.cp2y,e.top,e.bottom)))}(t,n)}function gn(){return"undefined"!=typeof window&&"undefined"!=typeof document}function pn(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function fn(t,e,n){let i;return"string"==typeof t?(i=parseInt(t,10),-1!==t.indexOf("%")&&(i=i/100*e.parentNode[n])):i=t,i}const mn=t=>t.ownerDocument.defaultView.getComputedStyle(t,null),bn=["top","right","bottom","left"];function xn(t,e,n){const i={};n=n?"-"+n:"";for(let o=0;o<4;o++){const s=bn[o];i[s]=parseFloat(t[e+"-"+s+n])||0}return i.width=i.left+i.right,i.height=i.top+i.bottom,i}function yn(t,e){if("native"in t)return t;const{canvas:n,currentDevicePixelRatio:i}=e,o=mn(n),s="border-box"===o.boxSizing,r=xn(o,"padding"),a=xn(o,"border","width"),{x:l,y:c,box:h}=function(t,e){const n=t.touches,i=n&&n.length?n[0]:t,{offsetX:o,offsetY:s}=i;let r,a,l=!1;if(((t,e,n)=>(t>0||e>0)&&(!n||!n.shadowRoot))(o,s,t.target))r=o,a=s;else{const t=e.getBoundingClientRect();r=i.clientX-t.left,a=i.clientY-t.top,l=!0}return{x:r,y:a,box:l}}(t,n),d=r.left+(h&&a.left),u=r.top+(h&&a.top);let{width:g,height:p}=e;return s&&(g-=r.width+a.width,p-=r.height+a.height),{x:Math.round((l-d)/g*n.width/i),y:Math.round((c-u)/p*n.height/i)}}const An=t=>Math.round(10*t)/10;function vn(t,e,n){const i=e||1,o=Math.floor(t.height*i),s=Math.floor(t.width*i);t.height=Math.floor(t.height),t.width=Math.floor(t.width);const r=t.canvas;return r.style&&(n||!r.style.height&&!r.style.width)&&(r.style.height=`${t.height}px`,r.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==i||r.height!==o||r.width!==s)&&(t.currentDevicePixelRatio=i,r.height=o,r.width=s,t.ctx.setTransform(i,0,0,i,0,0),!0)}const _n=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};gn()&&(window.addEventListener("test",null,e),window.removeEventListener("test",null,e))}catch(t){}return t}();function wn(t,e){const n=function(t,e){return mn(t).getPropertyValue(e)}(t,e),i=n&&n.match(/^(\d+)(\.\d+)?px$/);return i?+i[1]:void 0}function Cn(t,e,n,i){return{x:t.x+n*(e.x-t.x),y:t.y+n*(e.y-t.y)}}function En(t,e,n,i){return{x:t.x+n*(e.x-t.x),y:"middle"===i?n<.5?t.y:e.y:"after"===i?n<1?t.y:e.y:n>0?e.y:t.y}}function Mn(t,e,n,i){const o={x:t.cp2x,y:t.cp2y},s={x:e.cp1x,y:e.cp1y},r=Cn(t,o,n),a=Cn(o,s,n),l=Cn(s,e,n),c=Cn(r,a,n),h=Cn(a,l,n);return Cn(c,h,n)}function kn(t,e,n){return t?function(t,e){return{x:n=>t+t+e-n,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,n):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function Bn(t,e){let n,i;"ltr"!==e&&"rtl"!==e||(n=t.canvas.style,i=[n.getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",e,"important"),t.prevTextDirection=i)}function Sn(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function In(t){return"angle"===t?{between:Wt,compare:$t,normalize:Vt}:{between:jt,compare:(t,e)=>t-e,normalize:t=>t}}function Pn({start:t,end:e,count:n,loop:i,style:o}){return{start:t%n,end:e%n,loop:i&&(e-t+1)%n==0,style:o}}function Dn(t,e,n){if(!n)return[t];const{property:i,start:o,end:s}=n,r=e.length,{compare:a,between:l,normalize:c}=In(i),{start:h,end:d,loop:u,style:g}=function(t,e,n){const{property:i,start:o,end:s}=n,{between:r,normalize:a}=In(i),l=e.length;let c,h,{start:d,end:u,loop:g}=t;if(g){for(d+=l,u+=l,c=0,h=l;c<h&&r(a(e[d%l][i]),o,s);++c)d--,u--;d%=l,u%=l}return u<d&&(u+=l),{start:d,end:u,loop:g,style:t.style}}(t,e,n),p=[];let f,m,b,x=!1,y=null;for(let t=h,n=h;t<=d;++t)m=e[t%r],m.skip||(f=c(m[i]),f!==b&&(x=l(f,o,s),null===y&&(x||l(o,b,f)&&0!==a(o,b))&&(y=0===a(f,o)?t:n),null!==y&&(!x||0===a(s,f)||l(s,b,f))&&(p.push(Pn({start:y,end:t,loop:u,count:r,style:g})),y=null),n=t,b=f));return null!==y&&p.push(Pn({start:y,end:d,loop:u,count:r,style:g})),p}function Rn(t,e){const n=[],i=t.segments;for(let o=0;o<i.length;o++){const s=Dn(i[o],t.points,e);s.length&&n.push(...s)}return n}function Tn(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function On(t,e){if(!e)return!1;const n=[],i=function(t,e){return re(e)?(n.includes(e)||n.push(e),n.indexOf(e)):e};return JSON.stringify(t,i)!==JSON.stringify(e,i)}function Fn(t,e,n){return t.options.clip?t[n]:e[n]}function Ln(t,e){const n=e._clip;if(n.disabled)return!1;const i=function(t,e){const{xScale:n,yScale:i}=t;return n&&i?{left:Fn(n,e,"left"),right:Fn(n,e,"right"),top:Fn(i,e,"top"),bottom:Fn(i,e,"bottom")}:e}(e,t.chartArea);return{left:!1===n.left?0:i.left-(!0===n.left?0:n.left),right:!1===n.right?t.width:i.right+(!0===n.right?0:n.right),top:!1===n.top?0:i.top-(!0===n.top?0:n.top),bottom:!1===n.bottom?t.height:i.bottom+(!0===n.bottom?0:n.bottom)}}class zn{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,n,i){const o=e.listeners[i],s=e.duration;o.forEach((i=>i({chart:t,initial:e.initial,numSteps:s,currentStep:Math.min(n-e.start,s)})))}_refresh(){this._request||(this._running=!0,this._request=Zt.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((n,i)=>{if(!n.running||!n.items.length)return;const o=n.items;let s,r=o.length-1,a=!1;for(;r>=0;--r)s=o[r],s._active?(s._total>n.duration&&(n.duration=s._total),s.tick(t),a=!0):(o[r]=o[o.length-1],o.pop());a&&(i.draw(),this._notify(i,n,t,"progress")),o.length||(n.running=!1,this._notify(i,n,t,"complete"),n.initial=!1),e+=o.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let n=e.get(t);return n||(n={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,n)),n}listen(t,e,n){this._getAnims(t).listeners[e].push(n)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const n=e.items;let i=n.length-1;for(;i>=0;--i)n[i].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}}var $n=new zn;const Vn="transparent",Wn={boolean:(t,e,n)=>n>.5?e:t,color(t,e,n){const i=ae(t||Vn),o=i.valid&&ae(e||Vn);return o&&o.valid?o.mix(i,n).hexString():e},number:(t,e,n)=>t+(e-t)*n};class Nn{constructor(t,e,n,i){const o=e[n];i=He([t.to,i,o,t.from]);const s=He([t.from,o,i]);this._active=!0,this._fn=t.fn||Wn[t.type||typeof s],this._easing=se[t.easing]||se.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=n,this._from=s,this._to=i,this._promises=void 0}active(){return this._active}update(t,e,n){if(this._active){this._notify(!1);const i=this._target[this._prop],o=n-this._start,s=this._duration-o;this._start=n,this._duration=Math.floor(Math.max(s,t.duration)),this._total+=o,this._loop=!!t.loop,this._to=He([t.to,e,i,t.from]),this._from=He([t.from,i,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,n=this._duration,i=this._prop,o=this._from,s=this._loop,r=this._to;let a;if(this._active=o!==r&&(s||e<n),!this._active)return this._target[i]=r,void this._notify(!0);e<0?this._target[i]=o:(a=e/n%2,a=s&&a>1?2-a:a,a=this._easing(Math.min(1,Math.max(0,a))),this._target[i]=this._fn(o,r,a))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,n)=>{t.push({res:e,rej:n})}))}_notify(t){const e=t?"res":"rej",n=this._promises||[];for(let t=0;t<n.length;t++)n[t][e]()}}class jn{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!tt(t))return;const e=Object.keys(Ae.animation),n=this._properties;Object.getOwnPropertyNames(t).forEach((i=>{const o=t[i];if(!tt(o))return;const s={};for(const t of e)s[t]=o[t];(Q(o.properties)&&o.properties||[i]).forEach((t=>{t!==i&&n.has(t)||n.set(t,s)}))}))}_animateOptions(t,e){const n=e.options,i=function(t,e){if(!e)return;let n=t.options;if(n)return n.$shared&&(t.options=n=Object.assign({},n,{$shared:!1,$animations:{}})),n;t.options=e}(t,n);if(!i)return[];const o=this._createAnimations(i,n);return n.$shared&&function(t,e){const n=[],i=Object.keys(e);for(let e=0;e<i.length;e++){const o=t[i[e]];o&&o.active()&&n.push(o.wait())}return Promise.all(n)}(t.options.$animations,n).then((()=>{t.options=n}),(()=>{})),o}_createAnimations(t,e){const n=this._properties,i=[],o=t.$animations||(t.$animations={}),s=Object.keys(e),r=Date.now();let a;for(a=s.length-1;a>=0;--a){const l=s[a];if("$"===l.charAt(0))continue;if("options"===l){i.push(...this._animateOptions(t,e));continue}const c=e[l];let h=o[l];const d=n.get(l);if(h){if(d&&h.active()){h.update(d,c,r);continue}h.cancel()}d&&d.duration?(o[l]=h=new Nn(d,t,l,c),i.push(h)):t[l]=c}return i}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const n=this._createAnimations(t,e);return n.length?($n.add(this._chart,n),!0):void 0}}function Hn(t,e){const n=t&&t.options||{},i=n.reverse,o=void 0===n.min?e:0,s=void 0===n.max?e:0;return{start:i?s:o,end:i?o:s}}function Yn(t,e){const n=[],i=t._getSortedDatasetMetas(e);let o,s;for(o=0,s=i.length;o<s;++o)n.push(i[o].index);return n}function Un(t,e,n,i={}){const o=t.keys,s="single"===i.mode;let r,a,l,c;if(null===e)return;let h=!1;for(r=0,a=o.length;r<a;++r){if(l=+o[r],l===n){if(h=!0,i.all)continue;break}c=t.values[l],et(c)&&(s||0===e||St(e)===St(c))&&(e+=c)}return h||i.all?e:0}function qn(t,e){const n=t&&t.options.stacked;return n||void 0===n&&void 0!==e.stack}function Xn(t,e,n){const i=t[e]||(t[e]={});return i[n]||(i[n]={})}function Gn(t,e,n,i){for(const o of e.getMatchingVisibleMetas(i).reverse()){const e=t[o.index];if(n&&e>0||!n&&e<0)return o.index}return null}function Zn(t,e){const{chart:n,_cachedMeta:i}=t,o=n._stacks||(n._stacks={}),{iScale:s,vScale:r,index:a}=i,l=s.axis,c=r.axis,h=function(t,e,n){return`${t.id}.${e.id}.${n.stack||n.type}`}(s,r,i),d=e.length;let u;for(let t=0;t<d;++t){const n=e[t],{[l]:s,[c]:d}=n;u=(n._stacks||(n._stacks={}))[c]=Xn(o,h,s),u[a]=d,u._top=Gn(u,r,!0,i.type),u._bottom=Gn(u,r,!1,i.type),(u._visualValues||(u._visualValues={}))[a]=d}}function Kn(t,e){const n=t.scales;return Object.keys(n).filter((t=>n[t].axis===e)).shift()}function Jn(t,e){const n=t.controller.index,i=t.vScale&&t.vScale.axis;if(i){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[i]||void 0===e[i][n])return;delete e[i][n],void 0!==e[i]._visualValues&&void 0!==e[i]._visualValues[n]&&delete e[i]._visualValues[n]}}}const Qn=t=>"reset"===t||"none"===t,ti=(t,e)=>e?t:Object.assign({},t);class ei{static defaults={};static datasetElementType=null;static dataElementType=null;constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=qn(t.vScale,t),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(t){this.index!==t&&Jn(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,n=this.getDataset(),i=(t,e,n,i)=>"x"===t?e:"r"===t?i:n,o=e.xAxisID=it(n.xAxisID,Kn(t,"x")),s=e.yAxisID=it(n.yAxisID,Kn(t,"y")),r=e.rAxisID=it(n.rAxisID,Kn(t,"r")),a=e.indexAxis,l=e.iAxisID=i(a,o,s,r),c=e.vAxisID=i(a,s,o,r);e.xScale=this.getScaleForId(o),e.yScale=this.getScaleForId(s),e.rScale=this.getScaleForId(r),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(c)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&Xt(this._data,this),t._stacked&&Jn(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),n=this._data;if(tt(e)){const t=this._cachedMeta;this._data=function(t,e){const{iScale:n,vScale:i}=e,o="x"===n.axis?"x":"y",s="x"===i.axis?"x":"y",r=Object.keys(t),a=new Array(r.length);let l,c,h;for(l=0,c=r.length;l<c;++l)h=r[l],a[l]={[o]:h,[s]:t[h]};return a}(e,t)}else if(n!==e){if(n){Xt(n,this);const t=this._cachedMeta;Jn(t),t._parsed=[]}e&&Object.isExtensible(e)&&((i=e)._chartjs?i._chartjs.listeners.push(this):(Object.defineProperty(i,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),qt.forEach((t=>{const e="_onData"+mt(t),n=i[t];Object.defineProperty(i,t,{configurable:!0,enumerable:!1,value(...t){const o=n.apply(this,t);return i._chartjs.listeners.forEach((n=>{"function"==typeof n[e]&&n[e](...t)})),o}})})))),this._syncList=[],this._data=e}var i}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,n=this.getDataset();let i=!1;this._dataCheck();const o=e._stacked;e._stacked=qn(e.vScale,e),e.stack!==n.stack&&(i=!0,Jn(e),e.stack=n.stack),this._resyncElements(t),(i||o!==e._stacked)&&(Zn(this,e._parsed),e._stacked=qn(e.vScale,e))}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),n=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(n,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:n,_data:i}=this,{iScale:o,_stacked:s}=n,r=o.axis;let a,l,c,h=0===t&&e===i.length||n._sorted,d=t>0&&n._parsed[t-1];if(!1===this._parsing)n._parsed=i,n._sorted=!0,c=i;else{c=Q(i[t])?this.parseArrayData(n,i,t,e):tt(i[t])?this.parseObjectData(n,i,t,e):this.parsePrimitiveData(n,i,t,e);const o=()=>null===l[r]||d&&l[r]<d[r];for(a=0;a<e;++a)n._parsed[a+t]=l=c[a],h&&(o()&&(h=!1),d=l);n._sorted=h}s&&Zn(this,c)}parsePrimitiveData(t,e,n,i){const{iScale:o,vScale:s}=t,r=o.axis,a=s.axis,l=o.getLabels(),c=o===s,h=new Array(i);let d,u,g;for(d=0,u=i;d<u;++d)g=d+n,h[d]={[r]:c||o.parse(l[g],g),[a]:s.parse(e[g],g)};return h}parseArrayData(t,e,n,i){const{xScale:o,yScale:s}=t,r=new Array(i);let a,l,c,h;for(a=0,l=i;a<l;++a)c=a+n,h=e[c],r[a]={x:o.parse(h[0],c),y:s.parse(h[1],c)};return r}parseObjectData(t,e,n,i){const{xScale:o,yScale:s}=t,{xAxisKey:r="x",yAxisKey:a="y"}=this._parsing,l=new Array(i);let c,h,d,u;for(c=0,h=i;c<h;++c)d=c+n,u=e[d],l[c]={x:o.parse(ft(u,r),d),y:s.parse(ft(u,a),d)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,n){const i=this.chart,o=this._cachedMeta,s=e[t.axis];return Un({keys:Yn(i,!0),values:e._stacks[t.axis]._visualValues},s,o.index,{mode:n})}updateRangeFromParsed(t,e,n,i){const o=n[e.axis];let s=null===o?NaN:o;const r=i&&n._stacks[e.axis];i&&r&&(i.values=r,s=Un(i,o,this._cachedMeta.index)),t.min=Math.min(t.min,s),t.max=Math.max(t.max,s)}getMinMax(t,e){const n=this._cachedMeta,i=n._parsed,o=n._sorted&&t===n.iScale,s=i.length,r=this._getOtherScale(t),a=((t,e,n)=>t&&!e.hidden&&e._stacked&&{keys:Yn(n,!0),values:null})(e,n,this.chart),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:c,max:h}=function(t){const{min:e,max:n,minDefined:i,maxDefined:o}=t.getUserBounds();return{min:i?e:Number.NEGATIVE_INFINITY,max:o?n:Number.POSITIVE_INFINITY}}(r);let d,u;function g(){u=i[d];const e=u[r.axis];return!et(u[t.axis])||c>e||h<e}for(d=0;d<s&&(g()||(this.updateRangeFromParsed(l,t,u,a),!o));++d);if(o)for(d=s-1;d>=0;--d)if(!g()){this.updateRangeFromParsed(l,t,u,a);break}return l}getAllParsedValues(t){const e=this._cachedMeta._parsed,n=[];let i,o,s;for(i=0,o=e.length;i<o;++i)s=e[i][t.axis],et(s)&&n.push(s);return n}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,n=e.iScale,i=e.vScale,o=this.getParsed(t);return{label:n?""+n.getLabelForValue(o[n.axis]):"",value:i?""+i.getLabelForValue(o[i.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,n,i,o;return tt(t)?(e=t.top,n=t.right,i=t.bottom,o=t.left):e=n=i=o=t,{top:e,right:n,bottom:i,left:o,disabled:!1===t}}(it(this.options.clip,function(t,e,n){if(!1===n)return!1;const i=Hn(t,n),o=Hn(e,n);return{top:o.end,right:i.end,bottom:o.start,left:i.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,n=this._cachedMeta,i=n.data||[],o=e.chartArea,s=[],r=this._drawStart||0,a=this._drawCount||i.length-r,l=this.options.drawActiveElementsOnTop;let c;for(n.dataset&&n.dataset.draw(t,o,r,a),c=r;c<r+a;++c){const e=i[c];e.hidden||(e.active&&l?s.push(e):e.draw(t,o))}for(c=0;c<s.length;++c)s[c].draw(t,o)}getStyle(t,e){const n=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(n):this.resolveDataElementOptions(t||0,n)}getContext(t,e,n){const i=this.getDataset();let o;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];o=e.$context||(e.$context=function(t,e,n){return Ye(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:n,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),o.parsed=this.getParsed(t),o.raw=i.data[t],o.index=o.dataIndex=t}else o=this.$context||(this.$context=function(t,e){return Ye(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),o.dataset=i,o.index=o.datasetIndex=this.index;return o.active=!!e,o.mode=n,o}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",n){const i="active"===e,o=this._cachedDataOpts,s=t+"-"+e,r=o[s],a=this.enableOptionSharing&&bt(n);if(r)return ti(r,a);const l=this.chart.config,c=l.datasetElementScopeKeys(this._type,t),h=i?[`${t}Hover`,"hover",t,""]:[t,""],d=l.getOptionScopes(this.getDataset(),c),u=Object.keys(Ae.elements[t]),g=l.resolveNamedOptions(d,u,(()=>this.getContext(n,i,e)),h);return g.$shared&&(g.$shared=a,o[s]=Object.freeze(ti(g,a))),g}_resolveAnimations(t,e,n){const i=this.chart,o=this._cachedDataOpts,s=`animation-${e}`,r=o[s];if(r)return r;let a;if(!1!==i.options.animation){const i=this.chart.config,o=i.datasetAnimationScopeKeys(this._type,e),s=i.getOptionScopes(this.getDataset(),o);a=i.createResolver(s,this.getContext(t,n,e))}const l=new jn(i,a&&a.animations);return a&&a._cacheable&&(o[s]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||Qn(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const n=this.resolveDataElementOptions(t,e),i=this._sharedOptions,o=this.getSharedOptions(n),s=this.includeOptions(e,o)||o!==i;return this.updateSharedOptions(o,e,n),{sharedOptions:o,includeOptions:s}}updateElement(t,e,n,i){Qn(i)?Object.assign(t,n):this._resolveAnimations(e,i).update(t,n)}updateSharedOptions(t,e,n){t&&!Qn(e)&&this._resolveAnimations(void 0,e).update(t,n)}_setStyle(t,e,n,i){t.active=i;const o=this.getStyle(e,i);this._resolveAnimations(e,n,i).update(t,{options:!i&&this.getSharedOptions(o)||o})}removeHoverStyle(t,e,n){this._setStyle(t,n,"active",!1)}setHoverStyle(t,e,n){this._setStyle(t,n,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,n=this._cachedMeta.data;for(const[t,e,n]of this._syncList)this[t](e,n);this._syncList=[];const i=n.length,o=e.length,s=Math.min(o,i);s&&this.parse(0,s),o>i?this._insertElements(i,o-i,t):o<i&&this._removeElements(o,i-o)}_insertElements(t,e,n=!0){const i=this._cachedMeta,o=i.data,s=t+e;let r;const a=t=>{for(t.length+=e,r=t.length-1;r>=s;r--)t[r]=t[r-e]};for(a(o),r=t;r<s;++r)o[r]=new this.dataElementType;this._parsing&&a(i._parsed),this.parse(t,e),n&&this.updateElements(o,t,e,"reset")}updateElements(t,e,n,i){}_removeElements(t,e){const n=this._cachedMeta;if(this._parsing){const i=n._parsed.splice(t,e);n._stacked&&Jn(n,i)}n.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,n,i]=t;this[e](n,i)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const n=arguments.length-2;n&&this._sync(["_insertElements",t,n])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function ni(t){const e=t.iScale,n=function(t,e){if(!t._cache.$bar){const n=t.getMatchingVisibleMetas(e);let i=[];for(let e=0,o=n.length;e<o;e++)i=i.concat(n[e].controller.getAllParsedValues(t));t._cache.$bar=Gt(i.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let i,o,s,r,a=e._length;const l=()=>{32767!==s&&-32768!==s&&(bt(r)&&(a=Math.min(a,Math.abs(s-r)||a)),r=s)};for(i=0,o=n.length;i<o;++i)s=e.getPixelForValue(n[i]),l();for(r=void 0,i=0,o=e.ticks.length;i<o;++i)s=e.getPixelForTick(i),l();return a}function ii(t,e,n,i){return Q(t)?function(t,e,n,i){const o=n.parse(t[0],i),s=n.parse(t[1],i),r=Math.min(o,s),a=Math.max(o,s);let l=r,c=a;Math.abs(r)>Math.abs(a)&&(l=a,c=r),e[n.axis]=c,e._custom={barStart:l,barEnd:c,start:o,end:s,min:r,max:a}}(t,e,n,i):e[n.axis]=n.parse(t,i),e}function oi(t,e,n,i){const o=t.iScale,s=t.vScale,r=o.getLabels(),a=o===s,l=[];let c,h,d,u;for(c=n,h=n+i;c<h;++c)u=e[c],d={},d[o.axis]=a||o.parse(r[c],c),l.push(ii(u,d,s,c));return l}function si(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function ri(t,e,n,i){let o=e.borderSkipped;const s={};if(!o)return void(t.borderSkipped=s);if(!0===o)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:r,end:a,reverse:l,top:c,bottom:h}=function(t){let e,n,i,o,s;return t.horizontal?(e=t.base>t.x,n="left",i="right"):(e=t.base<t.y,n="bottom",i="top"),e?(o="end",s="start"):(o="start",s="end"),{start:n,end:i,reverse:e,top:o,bottom:s}}(t);"middle"===o&&n&&(t.enableBorderRadius=!0,(n._top||0)===i?o=c:(n._bottom||0)===i?o=h:(s[ai(h,r,a,l)]=!0,o=c)),s[ai(o,r,a,l)]=!0,t.borderSkipped=s}function ai(t,e,n,i){var o,s,r;return i?(r=n,t=li(t=(o=t)===(s=e)?r:o===r?s:o,n,e)):t=li(t,e,n),t}function li(t,e,n){return"start"===t?e:"end"===t?n:t}function ci(t,{inflateAmount:e},n){t.inflateAmount="auto"===e?1===n?.33:0:e}class hi extends ei{static id="doughnut";static defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"};static descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t&&!t.startsWith("borderDash")&&!t.startsWith("hoverBorderDash")};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:n,color:i}}=t.legend.options;return e.labels.map(((e,o)=>{const s=t.getDatasetMeta(0).controller.getStyle(o);return{text:e,fillStyle:s.backgroundColor,strokeStyle:s.borderColor,fontColor:i,lineWidth:s.borderWidth,pointStyle:n,hidden:!t.getDataVisibility(o),index:o}}))}return[]}},onClick(t,e,n){n.chart.toggleDataVisibility(e.index),n.chart.update()}}}};constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const n=this.getDataset().data,i=this._cachedMeta;if(!1===this._parsing)i._parsed=n;else{let o,s,r=t=>+n[t];if(tt(n[t])){const{key:t="value"}=this._parsing;r=e=>+ft(n[e],t)}for(o=t,s=t+e;o<s;++o)i._parsed[o]=r(o)}}_getRotation(){return Tt(this.options.rotation-90)}_getCircumference(){return Tt(this.options.circumference)}_getRotationExtents(){let t=vt,e=-vt;for(let n=0;n<this.chart.data.datasets.length;++n)if(this.chart.isDatasetVisible(n)&&this.chart.getDatasetMeta(n).type===this._type){const i=this.chart.getDatasetMeta(n).controller,o=i._getRotation(),s=i._getCircumference();t=Math.min(t,o),e=Math.max(e,o+s)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:n}=e,i=this._cachedMeta,o=i.data,s=this.getMaxBorderWidth()+this.getMaxOffset(o)+this.options.spacing,r=Math.max((Math.min(n.width,n.height)-s)/2,0),a=Math.min((c=r,"string"==typeof(l=this.options.cutout)&&l.endsWith("%")?parseFloat(l)/100:+l/c),1);var l,c;const h=this._getRingWeight(this.index),{circumference:d,rotation:u}=this._getRotationExtents(),{ratioX:g,ratioY:p,offsetX:f,offsetY:m}=function(t,e,n){let i=1,o=1,s=0,r=0;if(e<vt){const a=t,l=a+e,c=Math.cos(a),h=Math.sin(a),d=Math.cos(l),u=Math.sin(l),g=(t,e,i)=>Wt(t,a,l,!0)?1:Math.max(e,e*n,i,i*n),p=(t,e,i)=>Wt(t,a,l,!0)?-1:Math.min(e,e*n,i,i*n),f=g(0,c,d),m=g(Et,h,u),b=p(At,c,d),x=p(At+Et,h,u);i=(f-b)/2,o=(m-x)/2,s=-(f+b)/2,r=-(m+x)/2}return{ratioX:i,ratioY:o,offsetX:s,offsetY:r}}(u,d,a),b=(n.width-s)/g,x=(n.height-s)/p,y=Math.max(Math.min(b,x)/2,0),A=ot(this.options.radius,y),v=(A-Math.max(A*a,0))/this._getVisibleDatasetWeightTotal();this.offsetX=f*A,this.offsetY=m*A,i.total=this.calculateTotal(),this.outerRadius=A-v*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-v*h,0),this.updateElements(o,0,o.length,t)}_circumference(t,e){const n=this.options,i=this._cachedMeta,o=this._getCircumference();return e&&n.animation.animateRotate||!this.chart.getDataVisibility(t)||null===i._parsed[t]||i.data[t].hidden?0:this.calculateCircumference(i._parsed[t]*o/vt)}updateElements(t,e,n,i){const o="reset"===i,s=this.chart,r=s.chartArea,a=s.options.animation,l=(r.left+r.right)/2,c=(r.top+r.bottom)/2,h=o&&a.animateScale,d=h?0:this.innerRadius,u=h?0:this.outerRadius,{sharedOptions:g,includeOptions:p}=this._getSharedOptions(e,i);let f,m=this._getRotation();for(f=0;f<e;++f)m+=this._circumference(f,o);for(f=e;f<e+n;++f){const e=this._circumference(f,o),n=t[f],s={x:l+this.offsetX,y:c+this.offsetY,startAngle:m,endAngle:m+e,circumference:e,outerRadius:u,innerRadius:d};p&&(s.options=g||this.resolveDataElementOptions(f,n.active?"active":i)),m+=e,this.updateElement(n,f,s,i)}}calculateTotal(){const t=this._cachedMeta,e=t.data;let n,i=0;for(n=0;n<e.length;n++){const o=t._parsed[n];null===o||isNaN(o)||!this.chart.getDataVisibility(n)||e[n].hidden||(i+=Math.abs(o))}return i}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?vt*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,n=this.chart,i=n.data.labels||[],o=ue(e._parsed[t],n.options.locale);return{label:i[t]||"",value:o}}getMaxBorderWidth(t){let e=0;const n=this.chart;let i,o,s,r,a;if(!t)for(i=0,o=n.data.datasets.length;i<o;++i)if(n.isDatasetVisible(i)){s=n.getDatasetMeta(i),t=s.data,r=s.controller;break}if(!t)return 0;for(i=0,o=t.length;i<o;++i)a=r.resolveDataElementOptions(i),"inner"!==a.borderAlign&&(e=Math.max(e,a.borderWidth||0,a.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let n=0,i=t.length;n<i;++n){const t=this.resolveDataElementOptions(n);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let n=0;n<t;++n)this.chart.isDatasetVisible(n)&&(e+=this._getRingWeight(n));return e}_getRingWeight(t){return Math.max(it(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}class di extends ei{static id="polarArea";static defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:n,color:i}}=t.legend.options;return e.labels.map(((e,o)=>{const s=t.getDatasetMeta(0).controller.getStyle(o);return{text:e,fillStyle:s.backgroundColor,strokeStyle:s.borderColor,fontColor:i,lineWidth:s.borderWidth,pointStyle:n,hidden:!t.getDataVisibility(o),index:o}}))}return[]}},onClick(t,e,n){n.chart.toggleDataVisibility(e.index),n.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,n=this.chart,i=n.data.labels||[],o=ue(e._parsed[t].r,n.options.locale);return{label:i[t]||"",value:o}}parseObjectData(t,e,n,i){return rn.bind(this)(t,e,n,i)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,n)=>{const i=this.getParsed(n).r;!isNaN(i)&&this.chart.getDataVisibility(n)&&(i<e.min&&(e.min=i),i>e.max&&(e.max=i))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,n=t.options,i=Math.min(e.right-e.left,e.bottom-e.top),o=Math.max(i/2,0),s=(o-Math.max(n.cutoutPercentage?o/100*n.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=o-s*this.index,this.innerRadius=this.outerRadius-s}updateElements(t,e,n,i){const o="reset"===i,s=this.chart,r=s.options.animation,a=this._cachedMeta.rScale,l=a.xCenter,c=a.yCenter,h=a.getIndexAngle(0)-.5*At;let d,u=h;const g=360/this.countVisibleElements();for(d=0;d<e;++d)u+=this._computeAngle(d,i,g);for(d=e;d<e+n;d++){const e=t[d];let n=u,p=u+this._computeAngle(d,i,g),f=s.getDataVisibility(d)?a.getDistanceFromCenterForValue(this.getParsed(d).r):0;u=p,o&&(r.animateScale&&(f=0),r.animateRotate&&(n=p=h));const m={x:l,y:c,innerRadius:0,outerRadius:f,startAngle:n,endAngle:p,options:this.resolveDataElementOptions(d,e.active?"active":i)};this.updateElement(e,d,m,i)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,n)=>{!isNaN(this.getParsed(n).r)&&this.chart.getDataVisibility(n)&&e++})),e}_computeAngle(t,e,n){return this.chart.getDataVisibility(t)?Tt(this.resolveDataElementOptions(t,e).angle||n):0}}var ui=Object.freeze({__proto__:null,BarController:class extends ei{static id="bar";static defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}};static overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};parsePrimitiveData(t,e,n,i){return oi(t,e,n,i)}parseArrayData(t,e,n,i){return oi(t,e,n,i)}parseObjectData(t,e,n,i){const{iScale:o,vScale:s}=t,{xAxisKey:r="x",yAxisKey:a="y"}=this._parsing,l="x"===o.axis?r:a,c="x"===s.axis?r:a,h=[];let d,u,g,p;for(d=n,u=n+i;d<u;++d)p=e[d],g={},g[o.axis]=o.parse(ft(p,l),d),h.push(ii(ft(p,c),g,s,d));return h}updateRangeFromParsed(t,e,n,i){super.updateRangeFromParsed(t,e,n,i);const o=n._custom;o&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,o.min),t.max=Math.max(t.max,o.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:n,vScale:i}=e,o=this.getParsed(t),s=o._custom,r=si(s)?"["+s.start+", "+s.end+"]":""+i.getLabelForValue(o[i.axis]);return{label:""+n.getLabelForValue(o[n.axis]),value:r}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,n,i){const o="reset"===i,{index:s,_cachedMeta:{vScale:r}}=this,a=r.getBasePixel(),l=r.isHorizontal(),c=this._getRuler(),{sharedOptions:h,includeOptions:d}=this._getSharedOptions(e,i);for(let u=e;u<e+n;u++){const e=this.getParsed(u),n=o||J(e[r.axis])?{base:a,head:a}:this._calculateBarValuePixels(u),g=this._calculateBarIndexPixels(u,c),p=(e._stacks||{})[r.axis],f={horizontal:l,base:n.base,enableBorderRadius:!p||si(e._custom)||s===p._top||s===p._bottom,x:l?n.head:g.center,y:l?g.center:n.head,height:l?g.size:Math.abs(n.size),width:l?Math.abs(n.size):g.size};d&&(f.options=h||this.resolveDataElementOptions(u,t[u].active?"active":i));const m=f.options||t[u].options;ri(f,m,p,s),ci(f,m,c.ratio),this.updateElement(t[u],u,f,i)}}_getStacks(t,e){const{iScale:n}=this._cachedMeta,i=n.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),o=n.options.stacked,s=[],r=this._cachedMeta.controller.getParsed(e),a=r&&r[n.axis],l=t=>{const e=t._parsed.find((t=>t[n.axis]===a)),i=e&&e[t.vScale.axis];if(J(i)||isNaN(i))return!0};for(const n of i)if((void 0===e||!l(n))&&((!1===o||-1===s.indexOf(n.stack)||void 0===o&&void 0===n.stack)&&s.push(n.stack),n.index===t))break;return s.length||s.push(void 0),s}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,n){const i=this._getStacks(t,n),o=void 0!==e?i.indexOf(e):-1;return-1===o?i.length-1:o}_getRuler(){const t=this.options,e=this._cachedMeta,n=e.iScale,i=[];let o,s;for(o=0,s=e.data.length;o<s;++o)i.push(n.getPixelForValue(this.getParsed(o)[n.axis],o));const r=t.barThickness;return{min:r||ni(e),pixels:i,start:n._startPixel,end:n._endPixel,stackCount:this._getStackCount(),scale:n,grouped:t.grouped,ratio:r?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:n,index:i},options:{base:o,minBarLength:s}}=this,r=o||0,a=this.getParsed(t),l=a._custom,c=si(l);let h,d,u=a[e.axis],g=0,p=n?this.applyStack(e,a,n):u;p!==u&&(g=p-u,p=u),c&&(u=l.barStart,p=l.barEnd-l.barStart,0!==u&&St(u)!==St(l.barEnd)&&(g=0),g+=u);const f=J(o)||c?g:o;let m=e.getPixelForValue(f);if(h=this.chart.getDataVisibility(t)?e.getPixelForValue(g+p):m,d=h-m,Math.abs(d)<s){d=function(t,e,n){return 0!==t?St(t):(e.isHorizontal()?1:-1)*(e.min>=n?1:-1)}(d,e,r)*s,u===r&&(m-=d/2);const t=e.getPixelForDecimal(0),o=e.getPixelForDecimal(1),l=Math.min(t,o),g=Math.max(t,o);m=Math.max(Math.min(m,g),l),h=m+d,n&&!c&&(a._stacks[e.axis]._visualValues[i]=e.getValueForPixel(h)-e.getValueForPixel(m))}if(m===e.getPixelForValue(r)){const t=St(d)*e.getLineWidthForValue(r)/2;m+=t,d-=t}return{size:d,base:m,head:h,center:h+d/2}}_calculateBarIndexPixels(t,e){const n=e.scale,i=this.options,o=i.skipNull,s=it(i.maxBarThickness,1/0);let r,a;if(e.grouped){const n=o?this._getStackCount(t):e.stackCount,l="flex"===i.barThickness?function(t,e,n,i){const o=e.pixels,s=o[t];let r=t>0?o[t-1]:null,a=t<o.length-1?o[t+1]:null;const l=n.categoryPercentage;null===r&&(r=s-(null===a?e.end-e.start:a-s)),null===a&&(a=s+s-r);const c=s-(s-Math.min(r,a))/2*l;return{chunk:Math.abs(a-r)/2*l/i,ratio:n.barPercentage,start:c}}(t,e,i,n):function(t,e,n,i){const o=n.barThickness;let s,r;return J(o)?(s=e.min*n.categoryPercentage,r=n.barPercentage):(s=o*i,r=1),{chunk:s/i,ratio:r,start:e.pixels[t]-s/2}}(t,e,i,n),c=this._getStackIndex(this.index,this._cachedMeta.stack,o?t:void 0);r=l.start+l.chunk*c+l.chunk/2,a=Math.min(s,l.chunk*l.ratio)}else r=n.getPixelForValue(this.getParsed(t)[n.axis],t),a=Math.min(s,e.min*e.ratio);return{base:r-a/2,head:r+a/2,center:r,size:a}}draw(){const t=this._cachedMeta,e=t.vScale,n=t.data,i=n.length;let o=0;for(;o<i;++o)null===this.getParsed(o)[e.axis]||n[o].hidden||n[o].draw(this._ctx)}},BubbleController:class extends ei{static id="bubble";static defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}};static overrides={scales:{x:{type:"linear"},y:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,n,i){const o=super.parsePrimitiveData(t,e,n,i);for(let t=0;t<o.length;t++)o[t]._custom=this.resolveDataElementOptions(t+n).radius;return o}parseArrayData(t,e,n,i){const o=super.parseArrayData(t,e,n,i);for(let t=0;t<o.length;t++){const i=e[n+t];o[t]._custom=it(i[2],this.resolveDataElementOptions(t+n).radius)}return o}parseObjectData(t,e,n,i){const o=super.parseObjectData(t,e,n,i);for(let t=0;t<o.length;t++){const i=e[n+t];o[t]._custom=it(i&&i.r&&+i.r,this.resolveDataElementOptions(t+n).radius)}return o}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let n=t.length-1;n>=0;--n)e=Math.max(e,t[n].size(this.resolveDataElementOptions(n))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,n=this.chart.data.labels||[],{xScale:i,yScale:o}=e,s=this.getParsed(t),r=i.getLabelForValue(s.x),a=o.getLabelForValue(s.y),l=s._custom;return{label:n[t]||"",value:"("+r+", "+a+(l?", "+l:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,n,i){const o="reset"===i,{iScale:s,vScale:r}=this._cachedMeta,{sharedOptions:a,includeOptions:l}=this._getSharedOptions(e,i),c=s.axis,h=r.axis;for(let d=e;d<e+n;d++){const e=t[d],n=!o&&this.getParsed(d),u={},g=u[c]=o?s.getPixelForDecimal(.5):s.getPixelForValue(n[c]),p=u[h]=o?r.getBasePixel():r.getPixelForValue(n[h]);u.skip=isNaN(g)||isNaN(p),l&&(u.options=a||this.resolveDataElementOptions(d,e.active?"active":i),o&&(u.options.radius=0)),this.updateElement(e,d,u,i)}}resolveDataElementOptions(t,e){const n=this.getParsed(t);let i=super.resolveDataElementOptions(t,e);i.$shared&&(i=Object.assign({},i,{$shared:!1}));const o=i.radius;return"active"!==e&&(i.radius=0),i.radius+=it(n&&n._custom,o),i}},DoughnutController:hi,LineController:class extends ei{static id="line";static defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1};static overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:n,data:i=[],_dataset:o}=e,s=this.chart._animationsDisabled;let{start:r,count:a}=te(e,i,s);this._drawStart=r,this._drawCount=a,ee(e)&&(r=0,a=i.length),n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!o._decimated,n.points=i;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(n,void 0,{animated:!s,options:l},t),this.updateElements(i,r,a,t)}updateElements(t,e,n,i){const o="reset"===i,{iScale:s,vScale:r,_stacked:a,_dataset:l}=this._cachedMeta,{sharedOptions:c,includeOptions:h}=this._getSharedOptions(e,i),d=s.axis,u=r.axis,{spanGaps:g,segment:p}=this.options,f=Dt(g)?g:Number.POSITIVE_INFINITY,m=this.chart._animationsDisabled||o||"none"===i,b=e+n,x=t.length;let y=e>0&&this.getParsed(e-1);for(let n=0;n<x;++n){const g=t[n],x=m?g:{};if(n<e||n>=b){x.skip=!0;continue}const A=this.getParsed(n),v=J(A[u]),_=x[d]=s.getPixelForValue(A[d],n),w=x[u]=o||v?r.getBasePixel():r.getPixelForValue(a?this.applyStack(r,A,a):A[u],n);x.skip=isNaN(_)||isNaN(w)||v,x.stop=n>0&&Math.abs(A[d]-y[d])>f,p&&(x.parsed=A,x.raw=l.data[n]),h&&(x.options=c||this.resolveDataElementOptions(n,g.active?"active":i)),m||this.updateElement(g,n,x,i),y=A}}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,n=e.options&&e.options.borderWidth||0,i=t.data||[];if(!i.length)return n;const o=i[0].size(this.resolveDataElementOptions(0)),s=i[i.length-1].size(this.resolveDataElementOptions(i.length-1));return Math.max(n,o,s)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}},PieController:class extends hi{static id="pie";static defaults={cutout:0,rotation:0,circumference:360,radius:"100%"}},PolarAreaController:di,RadarController:class extends ei{static id="radar";static defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}};static overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};getLabelAndValue(t){const e=this._cachedMeta.vScale,n=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(n[e.axis])}}parseObjectData(t,e,n,i){return rn.bind(this)(t,e,n,i)}update(t){const e=this._cachedMeta,n=e.dataset,i=e.data||[],o=e.iScale.getLabels();if(n.points=i,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const s={_loop:!0,_fullLoop:o.length===i.length,options:e};this.updateElement(n,void 0,s,t)}this.updateElements(i,0,i.length,t)}updateElements(t,e,n,i){const o=this._cachedMeta.rScale,s="reset"===i;for(let r=e;r<e+n;r++){const e=t[r],n=this.resolveDataElementOptions(r,e.active?"active":i),a=o.getPointPositionForValue(r,this.getParsed(r).r),l=s?o.xCenter:a.x,c=s?o.yCenter:a.y,h={x:l,y:c,angle:a.angle,skip:isNaN(l)||isNaN(c),options:n};this.updateElement(e,r,h,i)}}},ScatterController:class extends ei{static id="scatter";static defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1};static overrides={interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}};getLabelAndValue(t){const e=this._cachedMeta,n=this.chart.data.labels||[],{xScale:i,yScale:o}=e,s=this.getParsed(t),r=i.getLabelForValue(s.x),a=o.getLabelForValue(s.y);return{label:n[t]||"",value:"("+r+", "+a+")"}}update(t){const e=this._cachedMeta,{data:n=[]}=e,i=this.chart._animationsDisabled;let{start:o,count:s}=te(e,n,i);if(this._drawStart=o,this._drawCount=s,ee(e)&&(o=0,s=n.length),this.options.showLine){this.datasetElementType||this.addElements();const{dataset:o,_dataset:s}=e;o._chart=this.chart,o._datasetIndex=this.index,o._decimated=!!s._decimated,o.points=n;const r=this.resolveDatasetElementOptions(t);r.segment=this.options.segment,this.updateElement(o,void 0,{animated:!i,options:r},t)}else this.datasetElementType&&(delete e.dataset,this.datasetElementType=!1);this.updateElements(n,o,s,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(t,e,n,i){const o="reset"===i,{iScale:s,vScale:r,_stacked:a,_dataset:l}=this._cachedMeta,c=this.resolveDataElementOptions(e,i),h=this.getSharedOptions(c),d=this.includeOptions(i,h),u=s.axis,g=r.axis,{spanGaps:p,segment:f}=this.options,m=Dt(p)?p:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||o||"none"===i;let x=e>0&&this.getParsed(e-1);for(let c=e;c<e+n;++c){const e=t[c],n=this.getParsed(c),p=b?e:{},y=J(n[g]),A=p[u]=s.getPixelForValue(n[u],c),v=p[g]=o||y?r.getBasePixel():r.getPixelForValue(a?this.applyStack(r,n,a):n[g],c);p.skip=isNaN(A)||isNaN(v)||y,p.stop=c>0&&Math.abs(n[u]-x[u])>m,f&&(p.parsed=n,p.raw=l.data[c]),d&&(p.options=h||this.resolveDataElementOptions(c,e.active?"active":i)),b||this.updateElement(e,c,p,i),x=n}this.updateSharedOptions(h,i,c)}getMaxOverflow(){const t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let t=0;for(let n=e.length-1;n>=0;--n)t=Math.max(t,e[n].size(this.resolveDataElementOptions(n))/2);return t>0&&t}const n=t.dataset,i=n.options&&n.options.borderWidth||0;if(!e.length)return i;const o=e[0].size(this.resolveDataElementOptions(0)),s=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(i,o,s)/2}}});function gi(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class pi{static override(t){Object.assign(pi.prototype,t)}options;constructor(t){this.options=t||{}}init(){}formats(){return gi()}parse(){return gi()}format(){return gi()}add(){return gi()}diff(){return gi()}startOf(){return gi()}endOf(){return gi()}}var fi=pi;function mi(t,e,n,i){const{controller:o,data:s,_sorted:r}=t,a=o._cachedMeta.iScale,l=t.dataset&&t.dataset.options?t.dataset.options.spanGaps:null;if(a&&e===a.axis&&"r"!==e&&r&&s.length){const r=a._reversePixels?Ut:Yt;if(!i){const i=r(s,e,n);if(l){const{vScale:e}=o._cachedMeta,{_parsed:n}=t,s=n.slice(0,i.lo+1).reverse().findIndex((t=>!J(t[e.axis])));i.lo-=Math.max(0,s);const r=n.slice(i.hi).findIndex((t=>!J(t[e.axis])));i.hi+=Math.max(0,r)}return i}if(o._sharedOptions){const t=s[0],i="function"==typeof t.getRange&&t.getRange(e);if(i){const t=r(s,e,n-i),o=r(s,e,n+i);return{lo:t.lo,hi:o.hi}}}}return{lo:0,hi:s.length-1}}function bi(t,e,n,i,o){const s=t.getSortedVisibleDatasetMetas(),r=n[e];for(let t=0,n=s.length;t<n;++t){const{index:n,data:a}=s[t],{lo:l,hi:c}=mi(s[t],e,r,o);for(let t=l;t<=c;++t){const e=a[t];e.skip||i(e,n,t)}}}function xi(t,e,n,i,o){const s=[];return o||t.isPointInArea(e)?(bi(t,n,e,(function(n,r,a){(o||ke(n,t.chartArea,0))&&n.inRange(e.x,e.y,i)&&s.push({element:n,datasetIndex:r,index:a})}),!0),s):s}function yi(t,e,n,i,o,s){return s||t.isPointInArea(e)?"r"!==n||i?function(t,e,n,i,o,s){let r=[];const a=function(t){const e=-1!==t.indexOf("x"),n=-1!==t.indexOf("y");return function(t,i){const o=e?Math.abs(t.x-i.x):0,s=n?Math.abs(t.y-i.y):0;return Math.sqrt(Math.pow(o,2)+Math.pow(s,2))}}(n);let l=Number.POSITIVE_INFINITY;return bi(t,n,e,(function(n,c,h){const d=n.inRange(e.x,e.y,o);if(i&&!d)return;const u=n.getCenterPoint(o);if(!s&&!t.isPointInArea(u)&&!d)return;const g=a(e,u);g<l?(r=[{element:n,datasetIndex:c,index:h}],l=g):g===l&&r.push({element:n,datasetIndex:c,index:h})})),r}(t,e,n,i,o,s):function(t,e,n,i){let o=[];return bi(t,n,e,(function(t,n,s){const{startAngle:r,endAngle:a}=t.getProps(["startAngle","endAngle"],i),{angle:l}=Lt(t,{x:e.x,y:e.y});Wt(l,r,a)&&o.push({element:t,datasetIndex:n,index:s})})),o}(t,e,n,o):[]}function Ai(t,e,n,i,o){const s=[],r="x"===n?"inXRange":"inYRange";let a=!1;return bi(t,n,e,((t,i,l)=>{t[r]&&t[r](e[n],o)&&(s.push({element:t,datasetIndex:i,index:l}),a=a||t.inRange(e.x,e.y,o))})),i&&!a?[]:s}var vi={evaluateInteractionItems:bi,modes:{index(t,e,n,i){const o=yn(e,t),s=n.axis||"x",r=n.includeInvisible||!1,a=n.intersect?xi(t,o,s,i,r):yi(t,o,s,!1,i,r),l=[];return a.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=a[0].index,n=t.data[e];n&&!n.skip&&l.push({element:n,datasetIndex:t.index,index:e})})),l):[]},dataset(t,e,n,i){const o=yn(e,t),s=n.axis||"xy",r=n.includeInvisible||!1;let a=n.intersect?xi(t,o,s,i,r):yi(t,o,s,!1,i,r);if(a.length>0){const e=a[0].datasetIndex,n=t.getDatasetMeta(e).data;a=[];for(let t=0;t<n.length;++t)a.push({element:n[t],datasetIndex:e,index:t})}return a},point:(t,e,n,i)=>xi(t,yn(e,t),n.axis||"xy",i,n.includeInvisible||!1),nearest(t,e,n,i){const o=yn(e,t),s=n.axis||"xy",r=n.includeInvisible||!1;return yi(t,o,s,n.intersect,i,r)},x:(t,e,n,i)=>Ai(t,yn(e,t),"x",n.intersect,i),y:(t,e,n,i)=>Ai(t,yn(e,t),"y",n.intersect,i)}};const _i=["left","top","right","bottom"];function wi(t,e){return t.filter((t=>t.pos===e))}function Ci(t,e){return t.filter((t=>-1===_i.indexOf(t.pos)&&t.box.axis===e))}function Ei(t,e){return t.sort(((t,n)=>{const i=e?n:t,o=e?t:n;return i.weight===o.weight?i.index-o.index:i.weight-o.weight}))}function Mi(t,e,n,i){return Math.max(t[n],e[n])+Math.max(t[i],e[i])}function ki(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function Bi(t,e,n,i){const{pos:o,box:s}=n,r=t.maxPadding;if(!tt(o)){n.size&&(t[o]-=n.size);const e=i[n.stack]||{size:0,count:1};e.size=Math.max(e.size,n.horizontal?s.height:s.width),n.size=e.size/e.count,t[o]+=n.size}s.getPadding&&ki(r,s.getPadding());const a=Math.max(0,e.outerWidth-Mi(r,t,"left","right")),l=Math.max(0,e.outerHeight-Mi(r,t,"top","bottom")),c=a!==t.w,h=l!==t.h;return t.w=a,t.h=l,n.horizontal?{same:c,other:h}:{same:h,other:c}}function Si(t,e){const n=e.maxPadding;return function(t){const i={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{i[t]=Math.max(e[t],n[t])})),i}(t?["left","right"]:["top","bottom"])}function Ii(t,e,n,i){const o=[];let s,r,a,l,c,h;for(s=0,r=t.length,c=0;s<r;++s){a=t[s],l=a.box,l.update(a.width||e.w,a.height||e.h,Si(a.horizontal,e));const{same:r,other:d}=Bi(e,n,a,i);c|=r&&o.length,h=h||d,l.fullSize||o.push(a)}return c&&Ii(o,e,n,i)||h}function Pi(t,e,n,i,o){t.top=n,t.left=e,t.right=e+i,t.bottom=n+o,t.width=i,t.height=o}function Di(t,e,n,i){const o=n.padding;let{x:s,y:r}=e;for(const a of t){const t=a.box,l=i[a.stack]||{count:1,placed:0,weight:1},c=a.stackWeight/l.weight||1;if(a.horizontal){const i=e.w*c,s=l.size||t.height;bt(l.start)&&(r=l.start),t.fullSize?Pi(t,o.left,r,n.outerWidth-o.right-o.left,s):Pi(t,e.left+l.placed,r,i,s),l.start=r,l.placed+=i,r=t.bottom}else{const i=e.h*c,r=l.size||t.width;bt(l.start)&&(s=l.start),t.fullSize?Pi(t,s,o.top,r,n.outerHeight-o.bottom-o.top):Pi(t,s,e.top+l.placed,r,i),l.start=s,l.placed+=i,s=t.right}}e.x=s,e.y=r}var Ri={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const n=t.boxes?t.boxes.indexOf(e):-1;-1!==n&&t.boxes.splice(n,1)},configure(t,e,n){e.fullSize=n.fullSize,e.position=n.position,e.weight=n.weight},update(t,e,n,i){if(!t)return;const o=Ne(t.options.layout.padding),s=Math.max(e-o.width,0),r=Math.max(n-o.height,0),a=function(t){const e=function(t){const e=[];let n,i,o,s,r,a;for(n=0,i=(t||[]).length;n<i;++n)o=t[n],({position:s,options:{stack:r,stackWeight:a=1}}=o),e.push({index:n,box:o,pos:s,horizontal:o.isHorizontal(),weight:o.weight,stack:r&&s+r,stackWeight:a});return e}(t),n=Ei(e.filter((t=>t.box.fullSize)),!0),i=Ei(wi(e,"left"),!0),o=Ei(wi(e,"right")),s=Ei(wi(e,"top"),!0),r=Ei(wi(e,"bottom")),a=Ci(e,"x"),l=Ci(e,"y");return{fullSize:n,leftAndTop:i.concat(s),rightAndBottom:o.concat(l).concat(r).concat(a),chartArea:wi(e,"chartArea"),vertical:i.concat(o).concat(l),horizontal:s.concat(r).concat(a)}}(t.boxes),l=a.vertical,c=a.horizontal;rt(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const h=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,d=Object.freeze({outerWidth:e,outerHeight:n,padding:o,availableWidth:s,availableHeight:r,vBoxMaxWidth:s/2/h,hBoxMaxHeight:r/2}),u=Object.assign({},o);ki(u,Ne(i));const g=Object.assign({maxPadding:u,w:s,h:r,x:o.left,y:o.top},o),p=function(t,e){const n=function(t){const e={};for(const n of t){const{stack:t,pos:i,stackWeight:o}=n;if(!t||!_i.includes(i))continue;const s=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});s.count++,s.weight+=o}return e}(t),{vBoxMaxWidth:i,hBoxMaxHeight:o}=e;let s,r,a;for(s=0,r=t.length;s<r;++s){a=t[s];const{fullSize:r}=a.box,l=n[a.stack],c=l&&a.stackWeight/l.weight;a.horizontal?(a.width=c?c*i:r&&e.availableWidth,a.height=o):(a.width=i,a.height=c?c*o:r&&e.availableHeight)}return n}(l.concat(c),d);Ii(a.fullSize,g,d,p),Ii(l,g,d,p),Ii(c,g,d,p)&&Ii(l,g,d,p),function(t){const e=t.maxPadding;function n(n){const i=Math.max(e[n]-t[n],0);return t[n]+=i,i}t.y+=n("top"),t.x+=n("left"),n("right"),n("bottom")}(g),Di(a.leftAndTop,g,d,p),g.x+=g.w,g.y+=g.h,Di(a.rightAndBottom,g,d,p),t.chartArea={left:g.left,top:g.top,right:g.left+g.w,bottom:g.top+g.h,height:g.h,width:g.w},rt(a.chartArea,(e=>{const n=e.box;Object.assign(n,t.chartArea),n.update(g.w,g.h,{left:0,top:0,right:0,bottom:0})}))}};class Ti{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,n){}removeEventListener(t,e,n){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,n,i){return e=Math.max(0,e||t.width),n=n||t.height,{width:e,height:Math.max(0,i?Math.floor(e/i):n)}}isAttached(t){return!0}updateConfig(t){}}class Oi extends Ti{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const Fi="$chartjs",Li={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},zi=t=>null===t||""===t,$i=!!_n&&{passive:!0};function Vi(t,e,n){t&&t.canvas&&t.canvas.removeEventListener(e,n,$i)}function Wi(t,e){for(const n of t)if(n===e||n.contains(e))return!0}function Ni(t,e,n){const i=t.canvas,o=new MutationObserver((t=>{let e=!1;for(const n of t)e=e||Wi(n.addedNodes,i),e=e&&!Wi(n.removedNodes,i);e&&n()}));return o.observe(document,{childList:!0,subtree:!0}),o}function ji(t,e,n){const i=t.canvas,o=new MutationObserver((t=>{let e=!1;for(const n of t)e=e||Wi(n.removedNodes,i),e=e&&!Wi(n.addedNodes,i);e&&n()}));return o.observe(document,{childList:!0,subtree:!0}),o}const Hi=new Map;let Yi=0;function Ui(){const t=window.devicePixelRatio;t!==Yi&&(Yi=t,Hi.forEach(((e,n)=>{n.currentDevicePixelRatio!==t&&e()})))}function qi(t,e,n){const i=t.canvas,o=i&&pn(i);if(!o)return;const s=Kt(((t,e)=>{const i=o.clientWidth;n(t,e),i<o.clientWidth&&n()}),window),r=new ResizeObserver((t=>{const e=t[0],n=e.contentRect.width,i=e.contentRect.height;0===n&&0===i||s(n,i)}));return r.observe(o),function(t,e){Hi.size||window.addEventListener("resize",Ui),Hi.set(t,e)}(t,s),r}function Xi(t,e,n){n&&n.disconnect(),"resize"===e&&function(t){Hi.delete(t),Hi.size||window.removeEventListener("resize",Ui)}(t)}function Gi(t,e,n){const i=t.canvas,o=Kt((e=>{null!==t.ctx&&n(function(t,e){const n=Li[t.type]||t.type,{x:i,y:o}=yn(t,e);return{type:n,chart:e,native:t,x:void 0!==i?i:null,y:void 0!==o?o:null}}(e,t))}),t);return function(t,e,n){t&&t.addEventListener(e,n,$i)}(i,e,o),o}class Zi extends Ti{acquireContext(t,e){const n=t&&t.getContext&&t.getContext("2d");return n&&n.canvas===t?(function(t,e){const n=t.style,i=t.getAttribute("height"),o=t.getAttribute("width");if(t[Fi]={initial:{height:i,width:o,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",n.boxSizing=n.boxSizing||"border-box",zi(o)){const e=wn(t,"width");void 0!==e&&(t.width=e)}if(zi(i))if(""===t.style.height)t.height=t.width/(e||2);else{const e=wn(t,"height");void 0!==e&&(t.height=e)}}(t,e),n):null}releaseContext(t){const e=t.canvas;if(!e[Fi])return!1;const n=e[Fi].initial;["height","width"].forEach((t=>{const i=n[t];J(i)?e.removeAttribute(t):e.setAttribute(t,i)}));const i=n.style||{};return Object.keys(i).forEach((t=>{e.style[t]=i[t]})),e.width=e.width,delete e[Fi],!0}addEventListener(t,e,n){this.removeEventListener(t,e);const i=t.$proxies||(t.$proxies={}),o={attach:Ni,detach:ji,resize:qi}[e]||Gi;i[e]=o(t,e,n)}removeEventListener(t,e){const n=t.$proxies||(t.$proxies={}),i=n[e];i&&(({attach:Xi,detach:Xi,resize:Xi}[e]||Vi)(t,e,i),n[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,n,i){return function(t,e,n,i){const o=mn(t),s=xn(o,"margin"),r=fn(o.maxWidth,t,"clientWidth")||wt,a=fn(o.maxHeight,t,"clientHeight")||wt,l=function(t,e,n){let i,o;if(void 0===e||void 0===n){const s=t&&pn(t);if(s){const t=s.getBoundingClientRect(),r=mn(s),a=xn(r,"border","width"),l=xn(r,"padding");e=t.width-l.width-a.width,n=t.height-l.height-a.height,i=fn(r.maxWidth,s,"clientWidth"),o=fn(r.maxHeight,s,"clientHeight")}else e=t.clientWidth,n=t.clientHeight}return{width:e,height:n,maxWidth:i||wt,maxHeight:o||wt}}(t,e,n);let{width:c,height:h}=l;if("content-box"===o.boxSizing){const t=xn(o,"border","width"),e=xn(o,"padding");c-=e.width+t.width,h-=e.height+t.height}return c=Math.max(0,c-s.width),h=Math.max(0,i?c/i:h-s.height),c=An(Math.min(c,r,l.maxWidth)),h=An(Math.min(h,a,l.maxHeight)),c&&!h&&(h=An(c/2)),(void 0!==e||void 0!==n)&&i&&l.height&&h>l.height&&(h=l.height,c=An(Math.floor(h*i))),{width:c,height:h}}(t,e,n,i)}isAttached(t){const e=t&&pn(t);return!(!e||!e.isConnected)}}class Ki{static defaults={};static defaultRoutes=void 0;x;y;active=!1;options;$animations;tooltipPosition(t){const{x:e,y:n}=this.getProps(["x","y"],t);return{x:e,y:n}}hasValue(){return Dt(this.x)&&Dt(this.y)}getProps(t,e){const n=this.$animations;if(!e||!n)return this;const i={};return t.forEach((t=>{i[t]=n[t]&&n[t].active()?n[t]._to:this[t]})),i}}function Ji(t,e,n,i,o){const s=it(i,0),r=Math.min(it(o,t.length),t.length);let a,l,c,h=0;for(n=Math.ceil(n),o&&(a=o-i,n=a/Math.floor(a/n)),c=s;c<0;)h++,c=Math.round(s+h*n);for(l=Math.max(s,0);l<r;l++)l===c&&(e.push(t[l]),h++,c=Math.round(s+h*n))}const Qi=(t,e,n)=>"top"===e||"left"===e?t[e]+n:t[e]-n,to=(t,e)=>Math.min(e||t,t);function eo(t,e){const n=[],i=t.length/e,o=t.length;let s=0;for(;s<o;s+=i)n.push(t[Math.floor(s)]);return n}function no(t,e,n){const i=t.ticks.length,o=Math.min(e,i-1),s=t._startPixel,r=t._endPixel,a=1e-6;let l,c=t.getPixelForTick(o);if(!(n&&(l=1===i?Math.max(c-s,r-c):0===e?(t.getPixelForTick(1)-c)/2:(c-t.getPixelForTick(o-1))/2,c+=o<e?l:-l,c<s-a||c>r+a)))return c}function io(t){return t.drawTicks?t.tickLength:0}function oo(t,e){if(!t.display)return 0;const n=je(t.font,e),i=Ne(t.padding);return(Q(t.text)?t.text.length:1)*n.lineHeight+i.height}function so(t,e,n){let i=Jt(t);return(n&&"right"!==e||!n&&"right"===e)&&(i=(t=>"left"===t?"right":"right"===t?"left":t)(i)),i}class ro extends Ki{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:n,_suggestedMax:i}=this;return t=nt(t,Number.POSITIVE_INFINITY),e=nt(e,Number.NEGATIVE_INFINITY),n=nt(n,Number.POSITIVE_INFINITY),i=nt(i,Number.NEGATIVE_INFINITY),{min:nt(t,n),max:nt(e,i),minDefined:et(t),maxDefined:et(e)}}getMinMax(t){let e,{min:n,max:i,minDefined:o,maxDefined:s}=this.getUserBounds();if(o&&s)return{min:n,max:i};const r=this.getMatchingVisibleMetas();for(let a=0,l=r.length;a<l;++a)e=r[a].controller.getMinMax(this,t),o||(n=Math.min(n,e.min)),s||(i=Math.max(i,e.max));return n=s&&n>i?i:n,i=o&&n>i?n:i,{min:nt(n,nt(i,n)),max:nt(i,nt(n,i))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}getLabelItems(t=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(t))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){st(this.options.beforeUpdate,[this])}update(t,e,n){const{beginAtZero:i,grace:o,ticks:s}=this.options,r=s.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=n=Object.assign({left:0,right:0,top:0,bottom:0},n),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+n.left+n.right:this.height+n.top+n.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,n){const{min:i,max:o}=t,s=ot(e,(o-i)/2),r=(t,e)=>n&&0===t?0:t+e;return{min:r(i,-Math.abs(s)),max:r(o,s)}}(this,o,i),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const a=r<this.ticks.length;this._convertTicksToLabels(a?eo(this.ticks,r):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),s.display&&(s.autoSkip||"auto"===s.source)&&(this.ticks=function(t,e){const n=t.options.ticks,i=function(t){const e=t.options.offset,n=t._tickSize(),i=t._length/n+(e?0:1),o=t._maxLength/n;return Math.floor(Math.min(i,o))}(t),o=Math.min(n.maxTicksLimit||i,i),s=n.major.enabled?function(t){const e=[];let n,i;for(n=0,i=t.length;n<i;n++)t[n].major&&e.push(n);return e}(e):[],r=s.length,a=s[0],l=s[r-1],c=[];if(r>o)return function(t,e,n,i){let o,s=0,r=n[0];for(i=Math.ceil(i),o=0;o<t.length;o++)o===r&&(e.push(t[o]),s++,r=n[s*i])}(e,c,s,r/o),c;const h=function(t,e,n){const i=function(t){const e=t.length;let n,i;if(e<2)return!1;for(i=t[0],n=1;n<e;++n)if(t[n]-t[n-1]!==i)return!1;return i}(t),o=e.length/n;if(!i)return Math.max(o,1);const s=function(t){const e=[],n=Math.sqrt(t);let i;for(i=1;i<n;i++)t%i==0&&(e.push(i),e.push(t/i));return n===(0|n)&&e.push(n),e.sort(((t,e)=>t-e)).pop(),e}(i);for(let t=0,e=s.length-1;t<e;t++){const e=s[t];if(e>o)return e}return Math.max(o,1)}(s,e,o);if(r>0){let t,n;const i=r>1?Math.round((l-a)/(r-1)):null;for(Ji(e,c,h,J(i)?0:a-i,a),t=0,n=r-1;t<n;t++)Ji(e,c,h,s[t],s[t+1]);return Ji(e,c,h,l,J(i)?e.length:l+i),c}return Ji(e,c,h),c}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),a&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,n=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,n=!n),this._startPixel=t,this._endPixel=e,this._reversePixels=n,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){st(this.options.afterUpdate,[this])}beforeSetDimensions(){st(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){st(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),st(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){st(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let n,i,o;for(n=0,i=t.length;n<i;n++)o=t[n],o.label=st(e.callback,[o.value,n,t],this)}afterTickToLabelConversion(){st(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){st(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,n=to(this.ticks.length,t.ticks.maxTicksLimit),i=e.minRotation||0,o=e.maxRotation;let s,r,a,l=i;if(!this._isVisible()||!e.display||i>=o||n<=1||!this.isHorizontal())return void(this.labelRotation=i);const c=this._getLabelSizes(),h=c.widest.width,d=c.highest.height,u=Nt(this.chart.width-h,0,this.maxWidth);s=t.offset?this.maxWidth/n:u/(n-1),h+6>s&&(s=u/(n-(t.offset?.5:1)),r=this.maxHeight-io(t.grid)-e.padding-oo(t.title,this.chart.options.font),a=Math.sqrt(h*h+d*d),l=Ot(Math.min(Math.asin(Nt((c.highest.height+6)/s,-1,1)),Math.asin(Nt(r/a,-1,1))-Math.asin(Nt(d/a,-1,1)))),l=Math.max(i,Math.min(o,l))),this.labelRotation=l}afterCalculateLabelRotation(){st(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){st(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:n,title:i,grid:o}}=this,s=this._isVisible(),r=this.isHorizontal();if(s){const s=oo(i,e.options.font);if(r?(t.width=this.maxWidth,t.height=io(o)+s):(t.height=this.maxHeight,t.width=io(o)+s),n.display&&this.ticks.length){const{first:e,last:i,widest:o,highest:s}=this._getLabelSizes(),a=2*n.padding,l=Tt(this.labelRotation),c=Math.cos(l),h=Math.sin(l);if(r){const e=n.mirror?0:h*o.width+c*s.height;t.height=Math.min(this.maxHeight,t.height+e+a)}else{const e=n.mirror?0:c*o.width+h*s.height;t.width=Math.min(this.maxWidth,t.width+e+a)}this._calculatePadding(e,i,h,c)}}this._handleMargins(),r?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,n,i){const{ticks:{align:o,padding:s},position:r}=this.options,a=0!==this.labelRotation,l="top"!==r&&"x"===this.axis;if(this.isHorizontal()){const r=this.getPixelForTick(0)-this.left,c=this.right-this.getPixelForTick(this.ticks.length-1);let h=0,d=0;a?l?(h=i*t.width,d=n*e.height):(h=n*t.height,d=i*e.width):"start"===o?d=e.width:"end"===o?h=t.width:"inner"!==o&&(h=t.width/2,d=e.width/2),this.paddingLeft=Math.max((h-r+s)*this.width/(this.width-r),0),this.paddingRight=Math.max((d-c+s)*this.width/(this.width-c),0)}else{let n=e.height/2,i=t.height/2;"start"===o?(n=0,i=t.height):"end"===o&&(n=e.height,i=0),this.paddingTop=n+s,this.paddingBottom=i+s}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){st(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,n;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,n=t.length;e<n;e++)J(t[e].label)&&(t.splice(e,1),n--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let n=this.ticks;e<n.length&&(n=eo(n,e)),this._labelSizes=t=this._computeLabelSizes(n,n.length,this.options.ticks.maxTicksLimit)}return t}_computeLabelSizes(t,e,n){const{ctx:i,_longestTextCache:o}=this,s=[],r=[],a=Math.floor(e/to(e,n));let l,c,h,d,u,g,p,f,m,b,x,y=0,A=0;for(l=0;l<e;l+=a){if(d=t[l].label,u=this._resolveTickFontOptions(l),i.font=g=u.string,p=o[g]=o[g]||{data:{},gc:[]},f=u.lineHeight,m=b=0,J(d)||Q(d)){if(Q(d))for(c=0,h=d.length;c<h;++c)x=d[c],J(x)||Q(x)||(m=ve(i,p.data,p.gc,m,x),b+=f)}else m=ve(i,p.data,p.gc,m,d),b=f;s.push(m),r.push(b),y=Math.max(m,y),A=Math.max(b,A)}!function(t,e){rt(t,(t=>{const n=t.gc,i=n.length/2;let o;if(i>e){for(o=0;o<i;++o)delete t.data[n[o]];n.splice(0,i)}}))}(o,e);const v=s.indexOf(y),_=r.indexOf(A),w=t=>({width:s[t]||0,height:r[t]||0});return{first:w(0),last:w(e-1),widest:w(v),highest:w(_),widths:s,heights:r}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return Nt(this._alignToPixels?we(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const n=e[t];return n.$context||(n.$context=function(t,e,n){return Ye(t,{tick:n,index:e,type:"tick"})}(this.getContext(),t,n))}return this.$context||(this.$context=Ye(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=Tt(this.labelRotation),n=Math.abs(Math.cos(e)),i=Math.abs(Math.sin(e)),o=this._getLabelSizes(),s=t.autoSkipPadding||0,r=o?o.widest.width+s:0,a=o?o.highest.height+s:0;return this.isHorizontal()?a*n>r*i?r/n:a/i:a*i<r*n?a/n:r/i}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,n=this.chart,i=this.options,{grid:o,position:s,border:r}=i,a=o.offset,l=this.isHorizontal(),c=this.ticks.length+(a?1:0),h=io(o),d=[],u=r.setContext(this.getContext()),g=u.display?u.width:0,p=g/2,f=function(t){return we(n,t,g)};let m,b,x,y,A,v,_,w,C,E,M,k;if("top"===s)m=f(this.bottom),v=this.bottom-h,w=m-p,E=f(t.top)+p,k=t.bottom;else if("bottom"===s)m=f(this.top),E=t.top,k=f(t.bottom)-p,v=m+p,w=this.top+h;else if("left"===s)m=f(this.right),A=this.right-h,_=m-p,C=f(t.left)+p,M=t.right;else if("right"===s)m=f(this.left),C=t.left,M=f(t.right)-p,A=m+p,_=this.left+h;else if("x"===e){if("center"===s)m=f((t.top+t.bottom)/2+.5);else if(tt(s)){const t=Object.keys(s)[0],e=s[t];m=f(this.chart.scales[t].getPixelForValue(e))}E=t.top,k=t.bottom,v=m+p,w=v+h}else if("y"===e){if("center"===s)m=f((t.left+t.right)/2);else if(tt(s)){const t=Object.keys(s)[0],e=s[t];m=f(this.chart.scales[t].getPixelForValue(e))}A=m-p,_=A-h,C=t.left,M=t.right}const B=it(i.ticks.maxTicksLimit,c),S=Math.max(1,Math.ceil(c/B));for(b=0;b<c;b+=S){const t=this.getContext(b),e=o.setContext(t),i=r.setContext(t),s=e.lineWidth,c=e.color,h=i.dash||[],u=i.dashOffset,g=e.tickWidth,p=e.tickColor,f=e.tickBorderDash||[],m=e.tickBorderDashOffset;x=no(this,b,a),void 0!==x&&(y=we(n,x,s),l?A=_=C=M=y:v=w=E=k=y,d.push({tx1:A,ty1:v,tx2:_,ty2:w,x1:C,y1:E,x2:M,y2:k,width:s,color:c,borderDash:h,borderDashOffset:u,tickWidth:g,tickColor:p,tickBorderDash:f,tickBorderDashOffset:m}))}return this._ticksLength=c,this._borderValue=m,d}_computeLabelItems(t){const e=this.axis,n=this.options,{position:i,ticks:o}=n,s=this.isHorizontal(),r=this.ticks,{align:a,crossAlign:l,padding:c,mirror:h}=o,d=io(n.grid),u=d+c,g=h?-c:u,p=-Tt(this.labelRotation),f=[];let m,b,x,y,A,v,_,w,C,E,M,k,B="middle";if("top"===i)v=this.bottom-g,_=this._getXAxisLabelAlignment();else if("bottom"===i)v=this.top+g,_=this._getXAxisLabelAlignment();else if("left"===i){const t=this._getYAxisLabelAlignment(d);_=t.textAlign,A=t.x}else if("right"===i){const t=this._getYAxisLabelAlignment(d);_=t.textAlign,A=t.x}else if("x"===e){if("center"===i)v=(t.top+t.bottom)/2+u;else if(tt(i)){const t=Object.keys(i)[0],e=i[t];v=this.chart.scales[t].getPixelForValue(e)+u}_=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===i)A=(t.left+t.right)/2-u;else if(tt(i)){const t=Object.keys(i)[0],e=i[t];A=this.chart.scales[t].getPixelForValue(e)}_=this._getYAxisLabelAlignment(d).textAlign}"y"===e&&("start"===a?B="top":"end"===a&&(B="bottom"));const S=this._getLabelSizes();for(m=0,b=r.length;m<b;++m){x=r[m],y=x.label;const t=o.setContext(this.getContext(m));w=this.getPixelForTick(m)+o.labelOffset,C=this._resolveTickFontOptions(m),E=C.lineHeight,M=Q(y)?y.length:1;const e=M/2,n=t.color,a=t.textStrokeColor,c=t.textStrokeWidth;let d,u=_;if(s?(A=w,"inner"===_&&(u=m===b-1?this.options.reverse?"left":"right":0===m?this.options.reverse?"right":"left":"center"),k="top"===i?"near"===l||0!==p?-M*E+E/2:"center"===l?-S.highest.height/2-e*E+E:-S.highest.height+E/2:"near"===l||0!==p?E/2:"center"===l?S.highest.height/2-e*E:S.highest.height-M*E,h&&(k*=-1),0===p||t.showLabelBackdrop||(A+=E/2*Math.sin(p))):(v=w,k=(1-M)*E/2),t.showLabelBackdrop){const e=Ne(t.backdropPadding),n=S.heights[m],i=S.widths[m];let o=k-e.top,s=0-e.left;switch(B){case"middle":o-=n/2;break;case"bottom":o-=n}switch(_){case"center":s-=i/2;break;case"right":s-=i;break;case"inner":m===b-1?s-=i:m>0&&(s-=i/2)}d={left:s,top:o,width:i+e.width,height:n+e.height,color:t.backdropColor}}f.push({label:y,font:C,textOffset:k,options:{rotation:p,color:n,strokeColor:a,strokeWidth:c,textAlign:u,textBaseline:B,translation:[A,v],backdrop:d}})}return f}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-Tt(this.labelRotation))return"top"===t?"left":"right";let n="center";return"start"===e.align?n="left":"end"===e.align?n="right":"inner"===e.align&&(n="inner"),n}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:n,mirror:i,padding:o}}=this.options,s=t+o,r=this._getLabelSizes().widest.width;let a,l;return"left"===e?i?(l=this.right+o,"near"===n?a="left":"center"===n?(a="center",l+=r/2):(a="right",l+=r)):(l=this.right-s,"near"===n?a="right":"center"===n?(a="center",l-=r/2):(a="left",l=this.left)):"right"===e?i?(l=this.left+o,"near"===n?a="right":"center"===n?(a="center",l-=r/2):(a="left",l-=r)):(l=this.left+s,"near"===n?a="left":"center"===n?(a="center",l+=r/2):(a="right",l=this.right)):a="right",{textAlign:a,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:n,top:i,width:o,height:s}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(n,i,o,s),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const n=this.ticks.findIndex((e=>e.value===t));return n>=0?e.setContext(this.getContext(n)).lineWidth:0}drawGrid(t){const e=this.options.grid,n=this.ctx,i=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let o,s;const r=(t,e,i)=>{i.width&&i.color&&(n.save(),n.lineWidth=i.width,n.strokeStyle=i.color,n.setLineDash(i.borderDash||[]),n.lineDashOffset=i.borderDashOffset,n.beginPath(),n.moveTo(t.x,t.y),n.lineTo(e.x,e.y),n.stroke(),n.restore())};if(e.display)for(o=0,s=i.length;o<s;++o){const t=i[o];e.drawOnChartArea&&r({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&r({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{border:n,grid:i}}=this,o=n.setContext(this.getContext()),s=n.display?o.width:0;if(!s)return;const r=i.setContext(this.getContext(0)).lineWidth,a=this._borderValue;let l,c,h,d;this.isHorizontal()?(l=we(t,this.left,s)-s/2,c=we(t,this.right,r)+r/2,h=d=a):(h=we(t,this.top,s)-s/2,d=we(t,this.bottom,r)+r/2,l=c=a),e.save(),e.lineWidth=o.width,e.strokeStyle=o.color,e.beginPath(),e.moveTo(l,h),e.lineTo(c,d),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,n=this._computeLabelArea();n&&Be(e,n);const i=this.getLabelItems(t);for(const t of i){const n=t.options,i=t.font;Te(e,t.label,0,t.textOffset,i,n)}n&&Se(e)}drawTitle(){const{ctx:t,options:{position:e,title:n,reverse:i}}=this;if(!n.display)return;const o=je(n.font),s=Ne(n.padding),r=n.align;let a=o.lineHeight/2;"bottom"===e||"center"===e||tt(e)?(a+=s.bottom,Q(n.text)&&(a+=o.lineHeight*(n.text.length-1))):a+=s.top;const{titleX:l,titleY:c,maxWidth:h,rotation:d}=function(t,e,n,i){const{top:o,left:s,bottom:r,right:a,chart:l}=t,{chartArea:c,scales:h}=l;let d,u,g,p=0;const f=r-o,m=a-s;if(t.isHorizontal()){if(u=Qt(i,s,a),tt(n)){const t=Object.keys(n)[0],i=n[t];g=h[t].getPixelForValue(i)+f-e}else g="center"===n?(c.bottom+c.top)/2+f-e:Qi(t,n,e);d=a-s}else{if(tt(n)){const t=Object.keys(n)[0],i=n[t];u=h[t].getPixelForValue(i)-m+e}else u="center"===n?(c.left+c.right)/2-m+e:Qi(t,n,e);g=Qt(i,r,o),p="left"===n?-Et:Et}return{titleX:u,titleY:g,maxWidth:d,rotation:p}}(this,a,e,r);Te(t,n.text,0,0,o,{color:n.color,maxWidth:h,rotation:d,textAlign:so(r,e,i),textBaseline:"middle",translation:[l,c]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,n=it(t.grid&&t.grid.z,-1),i=it(t.border&&t.border.z,0);return this._isVisible()&&this.draw===ro.prototype.draw?[{z:n,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:i,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),n=this.axis+"AxisID",i=[];let o,s;for(o=0,s=e.length;o<s;++o){const s=e[o];s[n]!==this.id||t&&s.type!==t||i.push(s)}return i}_resolveTickFontOptions(t){return je(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class ao{constructor(t,e,n){this.type=t,this.scope=e,this.override=n,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let n;(function(t){return"id"in t&&"defaults"in t})(e)&&(n=this.register(e));const i=this.items,o=t.id,s=this.scope+"."+o;if(!o)throw new Error("class does not have id: "+t);return o in i||(i[o]=t,function(t,e,n){const i=dt(Object.create(null),[n?Ae.get(n):{},Ae.get(e),t.defaults]);Ae.set(e,i),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((n=>{const i=n.split("."),o=i.pop(),s=[t].concat(i).join("."),r=e[n].split("."),a=r.pop(),l=r.join(".");Ae.route(s,o,l,a)}))}(e,t.defaultRoutes),t.descriptors&&Ae.describe(e,t.descriptors)}(t,s,n),this.override&&Ae.override(t.id,t.overrides)),s}get(t){return this.items[t]}unregister(t){const e=this.items,n=t.id,i=this.scope;n in e&&delete e[n],i&&n in Ae[i]&&(delete Ae[i][n],this.override&&delete fe[n])}}class lo{constructor(){this.controllers=new ao(ei,"datasets",!0),this.elements=new ao(Ki,"elements"),this.plugins=new ao(Object,"plugins"),this.scales=new ao(ro,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,n){[...e].forEach((e=>{const i=n||this._getRegistryForType(e);n||i.isForType(e)||i===this.plugins&&e.id?this._exec(t,i,e):rt(e,(e=>{const i=n||this._getRegistryForType(e);this._exec(t,i,e)}))}))}_exec(t,e,n){const i=mt(t);st(n["before"+i],[],n),e[t](n),st(n["after"+i],[],n)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const n=this._typedRegistries[e];if(n.isForType(t))return n}return this.plugins}_get(t,e,n){const i=e.get(t);if(void 0===i)throw new Error('"'+t+'" is not a registered '+n+".");return i}}var co=new lo;class ho{constructor(){this._init=[]}notify(t,e,n,i){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const o=i?this._descriptors(t).filter(i):this._descriptors(t),s=this._notify(o,t,e,n);return"afterDestroy"===e&&(this._notify(o,t,"stop"),this._notify(this._init,t,"uninstall")),s}_notify(t,e,n,i){i=i||{};for(const o of t){const t=o.plugin;if(!1===st(t[n],[e,i,o.options],t)&&i.cancelable)return!1}return!0}invalidate(){J(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const n=t&&t.config,i=it(n.options&&n.options.plugins,{}),o=function(t){const e={},n=[],i=Object.keys(co.plugins.items);for(let t=0;t<i.length;t++)n.push(co.getPlugin(i[t]));const o=t.plugins||[];for(let t=0;t<o.length;t++){const i=o[t];-1===n.indexOf(i)&&(n.push(i),e[i.id]=!0)}return{plugins:n,localIds:e}}(n);return!1!==i||e?function(t,{plugins:e,localIds:n},i,o){const s=[],r=t.getContext();for(const a of e){const e=a.id,l=uo(i[e],o);null!==l&&s.push({plugin:a,options:go(t.config,{plugin:a,local:n[e]},l,r)})}return s}(t,o,i,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],n=this._cache,i=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(i(e,n),t,"stop"),this._notify(i(n,e),t,"start")}}function uo(t,e){return e||!1!==t?!0===t?{}:t:null}function go(t,{plugin:e,local:n},i,o){const s=t.pluginScopeKeys(e),r=t.getOptionScopes(i,s);return n&&e.defaults&&r.push(e.defaults),t.createResolver(r,o,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function po(t,e){const n=Ae.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||n.indexAxis||"x"}function fo(t){if("x"===t||"y"===t||"r"===t)return t}function mo(t,...e){if(fo(t))return t;for(const i of e){const e=i.axis||("top"===(n=i.position)||"bottom"===n?"x":"left"===n||"right"===n?"y":void 0)||t.length>1&&fo(t[0].toLowerCase());if(e)return e}var n;throw new Error(`Cannot determine type of '${t}' axis. Please provide 'axis' or 'position' option.`)}function bo(t,e,n){if(n[e+"AxisID"]===t)return{axis:e}}function xo(t){const e=t.options||(t.options={});e.plugins=it(e.plugins,{}),e.scales=function(t,e){const n=fe[t.type]||{scales:{}},i=e.scales||{},o=po(t.type,e),s=Object.create(null);return Object.keys(i).forEach((e=>{const r=i[e];if(!tt(r))return console.error(`Invalid scale configuration for scale: ${e}`);if(r._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${e}`);const a=mo(e,r,function(t,e){if(e.data&&e.data.datasets){const n=e.data.datasets.filter((e=>e.xAxisID===t||e.yAxisID===t));if(n.length)return bo(t,"x",n[0])||bo(t,"y",n[0])}return{}}(e,t),Ae.scales[r.type]),l=function(t,e){return t===e?"_index_":"_value_"}(a,o),c=n.scales||{};s[e]=ut(Object.create(null),[{axis:a},r,c[a],c[l]])})),t.data.datasets.forEach((n=>{const o=n.type||t.type,r=n.indexAxis||po(o,e),a=(fe[o]||{}).scales||{};Object.keys(a).forEach((t=>{const e=function(t,e){let n=t;return"_index_"===t?n=e:"_value_"===t&&(n="x"===e?"y":"x"),n}(t,r),o=n[e+"AxisID"]||e;s[o]=s[o]||Object.create(null),ut(s[o],[{axis:e},i[o],a[t]])}))})),Object.keys(s).forEach((t=>{const e=s[t];ut(e,[Ae.scales[e.type],Ae.scale])})),s}(t,e)}function yo(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const Ao=new Map,vo=new Set;function _o(t,e){let n=Ao.get(t);return n||(n=e(),Ao.set(t,n),vo.add(n)),n}const wo=(t,e,n)=>{const i=ft(e,n);void 0!==i&&t.add(i)};class Co{constructor(t){this._config=function(t){return(t=t||{}).data=yo(t.data),xo(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=yo(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),xo(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return _o(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return _o(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return _o(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return _o(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const n=this._scopeCache;let i=n.get(t);return i&&!e||(i=new Map,n.set(t,i)),i}getOptionScopes(t,e,n){const{options:i,type:o}=this,s=this._cachedScopes(t,n),r=s.get(e);if(r)return r;const a=new Set;e.forEach((e=>{t&&(a.add(t),e.forEach((e=>wo(a,t,e)))),e.forEach((t=>wo(a,i,t))),e.forEach((t=>wo(a,fe[o]||{},t))),e.forEach((t=>wo(a,Ae,t))),e.forEach((t=>wo(a,me,t)))}));const l=Array.from(a);return 0===l.length&&l.push(Object.create(null)),vo.has(e)&&s.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,fe[e]||{},Ae.datasets[e]||{},{type:e},Ae,me]}resolveNamedOptions(t,e,n,i=[""]){const o={$shared:!0},{resolver:s,subPrefixes:r}=Eo(this._resolverCache,t,i);let a=s;(function(t,e){const{isScriptable:n,isIndexable:i}=Xe(t);for(const o of e){const e=n(o),s=i(o),r=(s||e)&&t[o];if(e&&(xt(r)||Mo(r))||s&&Q(r))return!0}return!1})(s,e)&&(o.$shared=!1,a=qe(s,n=xt(n)?n():n,this.createResolver(t,n,r)));for(const t of e)o[t]=a[t];return o}createResolver(t,e,n=[""],i){const{resolver:o}=Eo(this._resolverCache,t,n);return tt(e)?qe(o,e,void 0,i):o}}function Eo(t,e,n){let i=t.get(e);i||(i=new Map,t.set(e,i));const o=n.join();let s=i.get(o);return s||(s={resolver:Ue(e,n),subPrefixes:n.filter((t=>!t.toLowerCase().includes("hover")))},i.set(o,s)),s}const Mo=t=>tt(t)&&Object.getOwnPropertyNames(t).some((e=>xt(t[e]))),ko=["top","bottom","left","right","chartArea"];function Bo(t,e){return"top"===t||"bottom"===t||-1===ko.indexOf(t)&&"x"===e}function So(t,e){return function(n,i){return n[t]===i[t]?n[e]-i[e]:n[t]-i[t]}}function Io(t){const e=t.chart,n=e.options.animation;e.notifyPlugins("afterRender"),st(n&&n.onComplete,[t],e)}function Po(t){const e=t.chart,n=e.options.animation;st(n&&n.onProgress,[t],e)}function Do(t){return gn()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const Ro={},To=t=>{const e=Do(t);return Object.values(Ro).filter((t=>t.canvas===e)).pop()};function Oo(t,e,n){const i=Object.keys(t);for(const o of i){const i=+o;if(i>=e){const s=t[o];delete t[o],(n>0||i>e)&&(t[i+n]=s)}}}class Fo{static defaults=Ae;static instances=Ro;static overrides=fe;static registry=co;static version="4.4.9";static getChart=To;static register(...t){co.add(...t),Lo()}static unregister(...t){co.remove(...t),Lo()}constructor(t,e){const n=this.config=new Co(e),i=Do(t),o=To(i);if(o)throw new Error("Canvas is already in use. Chart with ID '"+o.id+"' must be destroyed before the canvas with ID '"+o.canvas.id+"' can be reused.");const s=n.createResolver(n.chartOptionScopes(),this.getContext());this.platform=new(n.platform||function(t){return!gn()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?Oi:Zi}(i)),this.platform.updateConfig(n);const r=this.platform.acquireContext(i,s.aspectRatio),a=r&&r.canvas,l=a&&a.height,c=a&&a.width;this.id=K(),this.ctx=r,this.canvas=a,this.width=c,this.height=l,this._options=s,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new ho,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let n;return function(...i){return e?(clearTimeout(n),n=setTimeout(t,e,i)):t.apply(this,i),e}}((t=>this.update(t)),s.resizeDelay||0),this._dataChanges=[],Ro[this.id]=this,r&&a?($n.listen(this,"complete",Io),$n.listen(this,"progress",Po),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:n,height:i,_aspectRatio:o}=this;return J(t)?e&&o?o:i?n/i:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}get registry(){return co}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():vn(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return Ce(this.canvas,this.ctx),this}stop(){return $n.stop(this),this}resize(t,e){$n.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const n=this.options,i=this.canvas,o=n.maintainAspectRatio&&this.aspectRatio,s=this.platform.getMaximumSize(i,t,e,o),r=n.devicePixelRatio||this.platform.getDevicePixelRatio(),a=this.width?"resize":"attach";this.width=s.width,this.height=s.height,this._aspectRatio=this.aspectRatio,vn(this,r,!0)&&(this.notifyPlugins("resize",{size:s}),st(n.onResize,[this,s],this),this.attached&&this._doResize(a)&&this.render())}ensureScalesHaveIDs(){rt(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,n=this.scales,i=Object.keys(n).reduce(((t,e)=>(t[e]=!1,t)),{});let o=[];e&&(o=o.concat(Object.keys(e).map((t=>{const n=e[t],i=mo(t,n),o="r"===i,s="x"===i;return{options:n,dposition:o?"chartArea":s?"bottom":"left",dtype:o?"radialLinear":s?"category":"linear"}})))),rt(o,(e=>{const o=e.options,s=o.id,r=mo(s,o),a=it(o.type,e.dtype);void 0!==o.position&&Bo(o.position,r)===Bo(e.dposition)||(o.position=e.dposition),i[s]=!0;let l=null;s in n&&n[s].type===a?l=n[s]:(l=new(co.getScale(a))({id:s,type:a,ctx:this.ctx,chart:this}),n[l.id]=l),l.init(o,t)})),rt(i,((t,e)=>{t||delete n[e]})),rt(n,(t=>{Ri.configure(this,t,t.options),Ri.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,n=t.length;if(t.sort(((t,e)=>t.index-e.index)),n>e){for(let t=e;t<n;++t)this._destroyDatasetMeta(t);t.splice(e,n-e)}this._sortedMetasets=t.slice(0).sort(So("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,n)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(n)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let n,i;for(this._removeUnreferencedMetasets(),n=0,i=e.length;n<i;n++){const i=e[n];let o=this.getDatasetMeta(n);const s=i.type||this.config.type;if(o.type&&o.type!==s&&(this._destroyDatasetMeta(n),o=this.getDatasetMeta(n)),o.type=s,o.indexAxis=i.indexAxis||po(s,this.options),o.order=i.order||0,o.index=n,o.label=""+i.label,o.visible=this.isDatasetVisible(n),o.controller)o.controller.updateIndex(n),o.controller.linkScales();else{const e=co.getController(s),{datasetElementType:i,dataElementType:r}=Ae.datasets[s];Object.assign(e,{dataElementType:co.getElement(r),datasetElementType:i&&co.getElement(i)}),o.controller=new e(this,n),t.push(o.controller)}}return this._updateMetasets(),t}_resetElements(){rt(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const n=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),i=this._animationsDisabled=!n.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const o=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let s=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),n=!i&&-1===o.indexOf(e);e.buildOrUpdateElements(n),s=Math.max(+e.getMaxOverflow(),s)}s=this._minPadding=n.layout.autoPadding?s:0,this._updateLayout(s),i||rt(o,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(So("z","_idx"));const{_active:r,_lastEvent:a}=this;a?this._eventHandler(a,!0):r.length&&this._updateHoverStyles(r,r,!0),this.render()}_updateScales(){rt(this.scales,(t=>{Ri.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),n=new Set(t.events);yt(e,n)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:n,start:i,count:o}of e)Oo(t,i,"_removeElements"===n?-o:o)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,n=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),i=n(0);for(let t=1;t<e;t++)if(!yt(i,n(t)))return;return Array.from(i).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;Ri.update(this,this.width,this.height,t);const e=this.chartArea,n=e.width<=0||e.height<=0;this._layers=[],rt(this.boxes,(t=>{n&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,n=this.data.datasets.length;e<n;++e)this._updateDataset(e,xt(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const n=this.getDatasetMeta(t),i={meta:n,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",i)&&(n.controller._update(e),i.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",i))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&($n.has(this)?this.attached&&!$n.running(this)&&$n.start(this):(this.draw(),Io({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resizeBeforeDraw=null,this._resize(t,e)}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,n=[];let i,o;for(i=0,o=e.length;i<o;++i){const o=e[i];t&&!o.visible||n.push(o)}return n}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,n={meta:t,index:t.index,cancelable:!0},i=Ln(this,t);!1!==this.notifyPlugins("beforeDatasetDraw",n)&&(i&&Be(e,i),t.controller.draw(),i&&Se(e),n.cancelable=!1,this.notifyPlugins("afterDatasetDraw",n))}isPointInArea(t){return ke(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,n,i){const o=vi.modes[e];return"function"==typeof o?o(this,t,n,i):[]}getDatasetMeta(t){const e=this.data.datasets[t],n=this._metasets;let i=n.filter((t=>t&&t._dataset===e)).pop();return i||(i={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},n.push(i)),i}getContext(){return this.$context||(this.$context=Ye(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const n=this.getDatasetMeta(t);return"boolean"==typeof n.hidden?!n.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,n){const i=n?"show":"hide",o=this.getDatasetMeta(t),s=o.controller._resolveAnimations(void 0,i);bt(e)?(o.data[e].hidden=!n,this.update()):(this.setDatasetVisibility(t,n),s.update(o,{visible:n}),this.update((e=>e.datasetIndex===t?i:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),$n.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),Ce(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),delete Ro[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,n=(n,i)=>{e.addEventListener(this,n,i),t[n]=i},i=(t,e,n)=>{t.offsetX=e,t.offsetY=n,this._eventHandler(t)};rt(this.options.events,(t=>n(t,i)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,n=(n,i)=>{e.addEventListener(this,n,i),t[n]=i},i=(n,i)=>{t[n]&&(e.removeEventListener(this,n,i),delete t[n])},o=(t,e)=>{this.canvas&&this.resize(t,e)};let s;const r=()=>{i("attach",r),this.attached=!0,this.resize(),n("resize",o),n("detach",s)};s=()=>{this.attached=!1,i("resize",o),this._stop(),this._resize(0,0),n("attach",r)},e.isAttached(this.canvas)?r():s()}unbindEvents(){rt(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},rt(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,n){const i=n?"set":"remove";let o,s,r,a;for("dataset"===e&&(o=this.getDatasetMeta(t[0].datasetIndex),o.controller["_"+i+"DatasetHoverStyle"]()),r=0,a=t.length;r<a;++r){s=t[r];const e=s&&this.getDatasetMeta(s.datasetIndex).controller;e&&e[i+"HoverStyle"](s.element,s.datasetIndex,s.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],n=t.map((({datasetIndex:t,index:e})=>{const n=this.getDatasetMeta(t);if(!n)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:n.data[e],index:e}}));!at(n,e)&&(this._active=n,this._lastEvent=null,this._updateHoverStyles(n,e))}notifyPlugins(t,e,n){return this._plugins.notify(this,t,e,n)}isPluginEnabled(t){return 1===this._plugins._cache.filter((e=>e.plugin.id===t)).length}_updateHoverStyles(t,e,n){const i=this.options.hover,o=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),s=o(e,t),r=n?t:o(t,e);s.length&&this.updateHoverStyle(s,i.mode,!1),r.length&&i.mode&&this.updateHoverStyle(r,i.mode,!0)}_eventHandler(t,e){const n={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},i=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",n,i))return;const o=this._handleEvent(t,e,n.inChartArea);return n.cancelable=!1,this.notifyPlugins("afterEvent",n,i),(o||n.changed)&&this.render(),this}_handleEvent(t,e,n){const{_active:i=[],options:o}=this,s=e,r=this._getActiveElements(t,i,n,s),a=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),l=function(t,e,n,i){return n&&"mouseout"!==t.type?i?e:t:null}(t,this._lastEvent,n,a);n&&(this._lastEvent=null,st(o.onHover,[t,r,this],this),a&&st(o.onClick,[t,r,this],this));const c=!at(r,i);return(c||e)&&(this._active=r,this._updateHoverStyles(r,i,e)),this._lastEvent=l,c}_getActiveElements(t,e,n,i){if("mouseout"===t.type)return[];if(!n)return e;const o=this.options.hover;return this.getElementsAtEventForMode(t,o.mode,o,i)}}function Lo(){return rt(Fo.instances,(t=>t._plugins.invalidate()))}function zo(t,e,n,i){return{x:n+t*Math.cos(e),y:i+t*Math.sin(e)}}function $o(t,e,n,i,o,s){const{x:r,y:a,startAngle:l,pixelMargin:c,innerRadius:h}=e,d=Math.max(e.outerRadius+i+n-c,0),u=h>0?h+i+n+c:0;let g=0;const p=o-l;if(i){const t=((h>0?h-i:0)+(d>0?d-i:0))/2;g=(p-(0!==t?p*t/(t+i):p))/2}const f=(p-Math.max(.001,p*d-n/At)/d)/2,m=l+f+g,b=o-f-g,{outerStart:x,outerEnd:y,innerStart:A,innerEnd:v}=function(t,e,n,i){const o=$e(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),s=(n-e)/2,r=Math.min(s,i*e/2),a=t=>{const e=(n-Math.min(s,t))*i/2;return Nt(t,0,Math.min(s,e))};return{outerStart:a(o.outerStart),outerEnd:a(o.outerEnd),innerStart:Nt(o.innerStart,0,r),innerEnd:Nt(o.innerEnd,0,r)}}(e,u,d,b-m),_=d-x,w=d-y,C=m+x/_,E=b-y/w,M=u+A,k=u+v,B=m+A/M,S=b-v/k;if(t.beginPath(),s){const e=(C+E)/2;if(t.arc(r,a,d,C,e),t.arc(r,a,d,e,E),y>0){const e=zo(w,E,r,a);t.arc(e.x,e.y,y,E,b+Et)}const n=zo(k,b,r,a);if(t.lineTo(n.x,n.y),v>0){const e=zo(k,S,r,a);t.arc(e.x,e.y,v,b+Et,S+Math.PI)}const i=(b-v/u+(m+A/u))/2;if(t.arc(r,a,u,b-v/u,i,!0),t.arc(r,a,u,i,m+A/u,!0),A>0){const e=zo(M,B,r,a);t.arc(e.x,e.y,A,B+Math.PI,m-Et)}const o=zo(_,m,r,a);if(t.lineTo(o.x,o.y),x>0){const e=zo(_,C,r,a);t.arc(e.x,e.y,x,m-Et,C)}}else{t.moveTo(r,a);const e=Math.cos(C)*d+r,n=Math.sin(C)*d+a;t.lineTo(e,n);const i=Math.cos(E)*d+r,o=Math.sin(E)*d+a;t.lineTo(i,o)}t.closePath()}class Vo extends Ki{static id="arc";static defaults={borderAlign:"center",borderColor:"#fff",borderDash:[],borderDashOffset:0,borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0};static defaultRoutes={backgroundColor:"backgroundColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t};circumference;endAngle;fullCircles;innerRadius;outerRadius;pixelMargin;startAngle;constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,n){const i=this.getProps(["x","y"],n),{angle:o,distance:s}=Lt(i,{x:t,y:e}),{startAngle:r,endAngle:a,innerRadius:l,outerRadius:c,circumference:h}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],n),d=(this.options.spacing+this.options.borderWidth)/2,u=it(h,a-r),g=Wt(o,r,a)&&r!==a,p=u>=vt||g,f=jt(s,l+d,c+d);return p&&f}getCenterPoint(t){const{x:e,y:n,startAngle:i,endAngle:o,innerRadius:s,outerRadius:r}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],t),{offset:a,spacing:l}=this.options,c=(i+o)/2,h=(s+r+l+a)/2;return{x:e+Math.cos(c)*h,y:n+Math.sin(c)*h}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:n}=this,i=(e.offset||0)/4,o=(e.spacing||0)/2,s=e.circular;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=n>vt?Math.floor(n/vt):0,0===n||this.innerRadius<0||this.outerRadius<0)return;t.save();const r=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(r)*i,Math.sin(r)*i);const a=i*(1-Math.sin(Math.min(At,n||0)));t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor,function(t,e,n,i,o){const{fullCircles:s,startAngle:r,circumference:a}=e;let l=e.endAngle;if(s){$o(t,e,n,i,l,o);for(let e=0;e<s;++e)t.fill();isNaN(a)||(l=r+(a%vt||vt))}$o(t,e,n,i,l,o),t.fill()}(t,this,a,o,s),function(t,e,n,i,o){const{fullCircles:s,startAngle:r,circumference:a,options:l}=e,{borderWidth:c,borderJoinStyle:h,borderDash:d,borderDashOffset:u}=l,g="inner"===l.borderAlign;if(!c)return;t.setLineDash(d||[]),t.lineDashOffset=u,g?(t.lineWidth=2*c,t.lineJoin=h||"round"):(t.lineWidth=c,t.lineJoin=h||"bevel");let p=e.endAngle;if(s){$o(t,e,n,i,p,o);for(let e=0;e<s;++e)t.stroke();isNaN(a)||(p=r+(a%vt||vt))}g&&function(t,e,n){const{startAngle:i,pixelMargin:o,x:s,y:r,outerRadius:a,innerRadius:l}=e;let c=o/a;t.beginPath(),t.arc(s,r,a,i-c,n+c),l>o?(c=o/l,t.arc(s,r,l,n+c,i-c,!0)):t.arc(s,r,o,n+Et,i-Et),t.closePath(),t.clip()}(t,e,p),s||($o(t,e,n,i,p,o),t.stroke())}(t,this,a,o,s),t.restore()}}function Wo(t,e,n=e){t.lineCap=it(n.borderCapStyle,e.borderCapStyle),t.setLineDash(it(n.borderDash,e.borderDash)),t.lineDashOffset=it(n.borderDashOffset,e.borderDashOffset),t.lineJoin=it(n.borderJoinStyle,e.borderJoinStyle),t.lineWidth=it(n.borderWidth,e.borderWidth),t.strokeStyle=it(n.borderColor,e.borderColor)}function No(t,e,n){t.lineTo(n.x,n.y)}function jo(t,e,n={}){const i=t.length,{start:o=0,end:s=i-1}=n,{start:r,end:a}=e,l=Math.max(o,r),c=Math.min(s,a),h=o<r&&s<r||o>a&&s>a;return{count:i,start:l,loop:e.loop,ilen:c<l&&!h?i+c-l:c-l}}function Ho(t,e,n,i){const{points:o,options:s}=e,{count:r,start:a,loop:l,ilen:c}=jo(o,n,i),h=function(t){return t.stepped?Ie:t.tension||"monotone"===t.cubicInterpolationMode?Pe:No}(s);let d,u,g,{move:p=!0,reverse:f}=i||{};for(d=0;d<=c;++d)u=o[(a+(f?c-d:d))%r],u.skip||(p?(t.moveTo(u.x,u.y),p=!1):h(t,g,u,f,s.stepped),g=u);return l&&(u=o[(a+(f?c:0))%r],h(t,g,u,f,s.stepped)),!!l}function Yo(t,e,n,i){const o=e.points,{count:s,start:r,ilen:a}=jo(o,n,i),{move:l=!0,reverse:c}=i||{};let h,d,u,g,p,f,m=0,b=0;const x=t=>(r+(c?a-t:t))%s,y=()=>{g!==p&&(t.lineTo(m,p),t.lineTo(m,g),t.lineTo(m,f))};for(l&&(d=o[x(0)],t.moveTo(d.x,d.y)),h=0;h<=a;++h){if(d=o[x(h)],d.skip)continue;const e=d.x,n=d.y,i=0|e;i===u?(n<g?g=n:n>p&&(p=n),m=(b*m+e)/++b):(y(),t.lineTo(e,n),u=i,b=0,g=p=n),f=n}y()}function Uo(t){const e=t.options,n=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||n?Ho:Yo}const qo="function"==typeof Path2D;class Xo extends Ki{static id="line";static defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const n=this.options;if((n.tension||"monotone"===n.cubicInterpolationMode)&&!n.stepped&&!this._pointsUpdated){const i=n.spanGaps?this._loop:this._fullLoop;un(this._points,n,t,i,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const n=t.points,i=t.options.spanGaps,o=n.length;if(!o)return[];const s=!!t._loop,{start:r,end:a}=function(t,e,n,i){let o=0,s=e-1;if(n&&!i)for(;o<e&&!t[o].skip;)o++;for(;o<e&&t[o].skip;)o++;for(o%=e,n&&(s+=o);s>o&&t[s%e].skip;)s--;return s%=e,{start:o,end:s}}(n,o,s,i);return function(t,e,n,i){return i&&i.setContext&&n?function(t,e,n,i){const o=t._chart.getContext(),s=Tn(t.options),{_datasetIndex:r,options:{spanGaps:a}}=t,l=n.length,c=[];let h=s,d=e[0].start,u=d;function g(t,e,i,o){const s=a?-1:1;if(t!==e){for(t+=l;n[t%l].skip;)t-=s;for(;n[e%l].skip;)e+=s;t%l!=e%l&&(c.push({start:t%l,end:e%l,loop:i,style:o}),h=o,d=e%l)}}for(const t of e){d=a?d:t.start;let e,s=n[d%l];for(u=d+1;u<=t.end;u++){const a=n[u%l];e=Tn(i.setContext(Ye(o,{type:"segment",p0:s,p1:a,p0DataIndex:(u-1)%l,p1DataIndex:u%l,datasetIndex:r}))),On(e,h)&&g(d,u-1,t.loop,h),s=a,h=e}d<u-1&&g(d,u-1,t.loop,h)}return c}(t,e,n,i):e}(t,!0===i?[{start:r,end:a,loop:s}]:function(t,e,n,i){const o=t.length,s=[];let r,a=e,l=t[e];for(r=e+1;r<=n;++r){const n=t[r%o];n.skip||n.stop?l.skip||(i=!1,s.push({start:e%o,end:(r-1)%o,loop:i}),e=a=n.stop?r:null):(a=r,l.skip&&(e=r)),l=n}return null!==a&&s.push({start:e%o,end:a%o,loop:i}),s}(n,r,a<r?a+o:a,!!t._fullLoop&&0===r&&a===o-1),n,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,n=t.length;return n&&e[t[n-1].end]}interpolate(t,e){const n=this.options,i=t[e],o=this.points,s=Rn(this,{property:e,start:i,end:i});if(!s.length)return;const r=[],a=function(t){return t.stepped?En:t.tension||"monotone"===t.cubicInterpolationMode?Mn:Cn}(n);let l,c;for(l=0,c=s.length;l<c;++l){const{start:c,end:h}=s[l],d=o[c],u=o[h];if(d===u){r.push(d);continue}const g=a(d,u,Math.abs((i-d[e])/(u[e]-d[e])),n.stepped);g[e]=t[e],r.push(g)}return 1===r.length?r[0]:r}pathSegment(t,e,n){return Uo(this)(t,this,e,n)}path(t,e,n){const i=this.segments,o=Uo(this);let s=this._loop;e=e||0,n=n||this.points.length-e;for(const r of i)s&=o(t,this,r,{start:e,end:e+n-1});return!!s}draw(t,e,n,i){const o=this.options||{};(this.points||[]).length&&o.borderWidth&&(t.save(),function(t,e,n,i){qo&&!e.options.segment?function(t,e,n,i){let o=e._path;o||(o=e._path=new Path2D,e.path(o,n,i)&&o.closePath()),Wo(t,e.options),t.stroke(o)}(t,e,n,i):function(t,e,n,i){const{segments:o,options:s}=e,r=Uo(e);for(const a of o)Wo(t,s,a.style),t.beginPath(),r(t,e,a,{start:n,end:n+i-1})&&t.closePath(),t.stroke()}(t,e,n,i)}(t,this,n,i),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function Go(t,e,n,i){const o=t.options,{[n]:s}=t.getProps([n],i);return Math.abs(e-s)<o.radius+o.hitRadius}class Zo extends Ki{static id="point";parsed;skip;stop;static defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,n){const i=this.options,{x:o,y:s}=this.getProps(["x","y"],n);return Math.pow(t-o,2)+Math.pow(e-s,2)<Math.pow(i.hitRadius+i.radius,2)}inXRange(t,e){return Go(this,t,"x",e)}inYRange(t,e){return Go(this,t,"y",e)}getCenterPoint(t){const{x:e,y:n}=this.getProps(["x","y"],t);return{x:e,y:n}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const n=this.options;this.skip||n.radius<.1||!ke(this,e,this.size(n)/2)||(t.strokeStyle=n.borderColor,t.lineWidth=n.borderWidth,t.fillStyle=n.backgroundColor,Ee(t,n,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function Ko(t,e){const{x:n,y:i,base:o,width:s,height:r}=t.getProps(["x","y","base","width","height"],e);let a,l,c,h,d;return t.horizontal?(d=r/2,a=Math.min(n,o),l=Math.max(n,o),c=i-d,h=i+d):(d=s/2,a=n-d,l=n+d,c=Math.min(i,o),h=Math.max(i,o)),{left:a,top:c,right:l,bottom:h}}function Jo(t,e,n,i){return t?0:Nt(e,n,i)}function Qo(t,e,n,i){const o=null===e,s=null===n,r=t&&!(o&&s)&&Ko(t,i);return r&&(o||jt(e,r.left,r.right))&&(s||jt(n,r.top,r.bottom))}function ts(t,e){t.rect(e.x,e.y,e.w,e.h)}function es(t,e,n={}){const i=t.x!==n.x?-e:0,o=t.y!==n.y?-e:0,s=(t.x+t.w!==n.x+n.w?e:0)-i,r=(t.y+t.h!==n.y+n.h?e:0)-o;return{x:t.x+i,y:t.y+o,w:t.w+s,h:t.h+r,radius:t.radius}}class ns extends Ki{static id="bar";static defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:n,backgroundColor:i}}=this,{inner:o,outer:s}=function(t){const e=Ko(t),n=e.right-e.left,i=e.bottom-e.top,o=function(t,e,n){const i=t.options.borderWidth,o=t.borderSkipped,s=Ve(i);return{t:Jo(o.top,s.top,0,n),r:Jo(o.right,s.right,0,e),b:Jo(o.bottom,s.bottom,0,n),l:Jo(o.left,s.left,0,e)}}(t,n/2,i/2),s=function(t,e,n){const{enableBorderRadius:i}=t.getProps(["enableBorderRadius"]),o=t.options.borderRadius,s=We(o),r=Math.min(e,n),a=t.borderSkipped,l=i||tt(o);return{topLeft:Jo(!l||a.top||a.left,s.topLeft,0,r),topRight:Jo(!l||a.top||a.right,s.topRight,0,r),bottomLeft:Jo(!l||a.bottom||a.left,s.bottomLeft,0,r),bottomRight:Jo(!l||a.bottom||a.right,s.bottomRight,0,r)}}(t,n/2,i/2);return{outer:{x:e.left,y:e.top,w:n,h:i,radius:s},inner:{x:e.left+o.l,y:e.top+o.t,w:n-o.l-o.r,h:i-o.t-o.b,radius:{topLeft:Math.max(0,s.topLeft-Math.max(o.t,o.l)),topRight:Math.max(0,s.topRight-Math.max(o.t,o.r)),bottomLeft:Math.max(0,s.bottomLeft-Math.max(o.b,o.l)),bottomRight:Math.max(0,s.bottomRight-Math.max(o.b,o.r))}}}}(this),r=(a=s.radius).topLeft||a.topRight||a.bottomLeft||a.bottomRight?Oe:ts;var a;t.save(),s.w===o.w&&s.h===o.h||(t.beginPath(),r(t,es(s,e,o)),t.clip(),r(t,es(o,-e,s)),t.fillStyle=n,t.fill("evenodd")),t.beginPath(),r(t,es(o,e)),t.fillStyle=i,t.fill(),t.restore()}inRange(t,e,n){return Qo(this,t,e,n)}inXRange(t,e){return Qo(this,t,null,e)}inYRange(t,e){return Qo(this,null,t,e)}getCenterPoint(t){const{x:e,y:n,base:i,horizontal:o}=this.getProps(["x","y","base","horizontal"],t);return{x:o?(e+i)/2:e,y:o?n:(n+i)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}var is=Object.freeze({__proto__:null,ArcElement:Vo,BarElement:ns,LineElement:Xo,PointElement:Zo});const os=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],ss=os.map((t=>t.replace("rgb(","rgba(").replace(")",", 0.5)")));function rs(t){return os[t%os.length]}function as(t){return ss[t%ss.length]}function ls(t){let e;for(e in t)if(t[e].borderColor||t[e].backgroundColor)return!0;return!1}var cs={id:"colors",defaults:{enabled:!0,forceOverride:!1},beforeLayout(t,e,n){if(!n.enabled)return;const{data:{datasets:i},options:o}=t.config,{elements:s}=o,r=ls(i)||(a=o)&&(a.borderColor||a.backgroundColor)||s&&ls(s)||"rgba(0,0,0,0.1)"!==Ae.borderColor||"rgba(0,0,0,0.1)"!==Ae.backgroundColor;var a;if(!n.forceOverride&&r)return;const l=function(t){let e=0;return(n,i)=>{const o=t.getDatasetMeta(i).controller;o instanceof hi?e=function(t,e){return t.backgroundColor=t.data.map((()=>rs(e++))),e}(n,e):o instanceof di?e=function(t,e){return t.backgroundColor=t.data.map((()=>as(e++))),e}(n,e):o&&(e=function(t,e){return t.borderColor=rs(e),t.backgroundColor=as(e),++e}(n,e))}}(t);i.forEach(l)}};function hs(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,writable:!0,value:e})}}function ds(t){t.data.datasets.forEach((t=>{hs(t)}))}var us={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,n)=>{if(!n.enabled)return void ds(t);const i=t.width;t.data.datasets.forEach(((e,o)=>{const{_data:s,indexAxis:r}=e,a=t.getDatasetMeta(o),l=s||e.data;if("y"===He([r,t.options.indexAxis]))return;if(!a.controller.supportsDecimation)return;const c=t.scales[a.xAxisID];if("linear"!==c.type&&"time"!==c.type)return;if(t.options.parsing)return;let h,{start:d,count:u}=function(t,e){const n=e.length;let i,o=0;const{iScale:s}=t,{min:r,max:a,minDefined:l,maxDefined:c}=s.getUserBounds();return l&&(o=Nt(Yt(e,s.axis,r).lo,0,n-1)),i=c?Nt(Yt(e,s.axis,a).hi+1,o,n)-o:n-o,{start:o,count:i}}(a,l);if(u<=(n.threshold||4*i))hs(e);else{switch(J(s)&&(e._data=l,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),n.algorithm){case"lttb":h=function(t,e,n,i,o){const s=o.samples||i;if(s>=n)return t.slice(e,e+n);const r=[],a=(n-2)/(s-2);let l=0;const c=e+n-1;let h,d,u,g,p,f=e;for(r[l++]=t[f],h=0;h<s-2;h++){let i,o=0,s=0;const c=Math.floor((h+1)*a)+1+e,m=Math.min(Math.floor((h+2)*a)+1,n)+e,b=m-c;for(i=c;i<m;i++)o+=t[i].x,s+=t[i].y;o/=b,s/=b;const x=Math.floor(h*a)+1+e,y=Math.min(Math.floor((h+1)*a)+1,n)+e,{x:A,y:v}=t[f];for(u=g=-1,i=x;i<y;i++)g=.5*Math.abs((A-o)*(t[i].y-v)-(A-t[i].x)*(s-v)),g>u&&(u=g,d=t[i],p=i);r[l++]=d,f=p}return r[l++]=t[c],r}(l,d,u,i,n);break;case"min-max":h=function(t,e,n,i){let o,s,r,a,l,c,h,d,u,g,p=0,f=0;const m=[],b=e+n-1,x=t[e].x,y=t[b].x-x;for(o=e;o<e+n;++o){s=t[o],r=(s.x-x)/y*i,a=s.y;const e=0|r;if(e===l)a<u?(u=a,c=o):a>g&&(g=a,h=o),p=(f*p+s.x)/++f;else{const n=o-1;if(!J(c)&&!J(h)){const e=Math.min(c,h),i=Math.max(c,h);e!==d&&e!==n&&m.push({...t[e],x:p}),i!==d&&i!==n&&m.push({...t[i],x:p})}o>0&&n!==d&&m.push(t[n]),m.push(s),l=e,f=0,u=g=a,c=h=d=o}}return m}(l,d,u,i);break;default:throw new Error(`Unsupported decimation algorithm '${n.algorithm}'`)}e._decimated=h}}))},destroy(t){ds(t)}};function gs(t,e,n,i){if(i)return;let o=e[t],s=n[t];return"angle"===t&&(o=Vt(o),s=Vt(s)),{property:t,start:o,end:s}}function ps(t,e,n){for(;e>t;e--){const t=n[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function fs(t,e,n,i){return t&&e?i(t[n],e[n]):t?t[n]:e?e[n]:0}function ms(t,e){let n=[],i=!1;return Q(t)?(i=!0,n=t):n=function(t,e){const{x:n=null,y:i=null}=t||{},o=e.points,s=[];return e.segments.forEach((({start:t,end:e})=>{e=ps(t,e,o);const r=o[t],a=o[e];null!==i?(s.push({x:r.x,y:i}),s.push({x:a.x,y:i})):null!==n&&(s.push({x:n,y:r.y}),s.push({x:n,y:a.y}))})),s}(t,e),n.length?new Xo({points:n,options:{tension:0},_loop:i,_fullLoop:i}):null}function bs(t){return t&&!1!==t.fill}function xs(t,e,n){let i=t[e].fill;const o=[e];let s;if(!n)return i;for(;!1!==i&&-1===o.indexOf(i);){if(!et(i))return i;if(s=t[i],!s)return!1;if(s.visible)return i;o.push(i),i=s.fill}return!1}function ys(t,e,n){const i=function(t){const e=t.options,n=e.fill;let i=it(n&&n.target,n);return void 0===i&&(i=!!e.backgroundColor),!1!==i&&null!==i&&(!0===i?"origin":i)}(t);if(tt(i))return!isNaN(i.value)&&i;let o=parseFloat(i);return et(o)&&Math.floor(o)===o?function(t,e,n,i){return"-"!==t&&"+"!==t||(n=e+n),!(n===e||n<0||n>=i)&&n}(i[0],e,o,n):["origin","start","end","stack","shape"].indexOf(i)>=0&&i}function As(t,e,n){const i=[];for(let o=0;o<n.length;o++){const s=n[o],{first:r,last:a,point:l}=vs(s,e,"x");if(!(!l||r&&a))if(r)i.unshift(l);else if(t.push(l),!a)break}t.push(...i)}function vs(t,e,n){const i=t.interpolate(e,n);if(!i)return{};const o=i[n],s=t.segments,r=t.points;let a=!1,l=!1;for(let t=0;t<s.length;t++){const e=s[t],i=r[e.start][n],c=r[e.end][n];if(jt(o,i,c)){a=o===i,l=o===c;break}}return{first:a,last:l,point:i}}class _s{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,n){const{x:i,y:o,radius:s}=this;return e=e||{start:0,end:vt},t.arc(i,o,s,e.end,e.start,!0),!n.bounds}interpolate(t){const{x:e,y:n,radius:i}=this,o=t.angle;return{x:e+Math.cos(o)*i,y:n+Math.sin(o)*i,angle:o}}}function ws(t,e,n){const i=function(t){const{chart:e,fill:n,line:i}=t;if(et(n))return function(t,e){const n=t.getDatasetMeta(e);return n&&t.isDatasetVisible(e)?n.dataset:null}(e,n);if("stack"===n)return function(t){const{scale:e,index:n,line:i}=t,o=[],s=i.segments,r=i.points,a=function(t,e){const n=[],i=t.getMatchingVisibleMetas("line");for(let t=0;t<i.length;t++){const o=i[t];if(o.index===e)break;o.hidden||n.unshift(o.dataset)}return n}(e,n);a.push(ms({x:null,y:e.bottom},i));for(let t=0;t<s.length;t++){const e=s[t];for(let t=e.start;t<=e.end;t++)As(o,r[t],a)}return new Xo({points:o,options:{}})}(t);if("shape"===n)return!0;const o=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:n}=t,i=e.options,o=e.getLabels().length,s=i.reverse?e.max:e.min,r=function(t,e,n){let i;return i="start"===t?n:"end"===t?e.options.reverse?e.min:e.max:tt(t)?t.value:e.getBaseValue(),i}(n,e,s),a=[];if(i.grid.circular){const t=e.getPointPositionForValue(0,s);return new _s({x:t.x,y:t.y,radius:e.getDistanceFromCenterForValue(r)})}for(let t=0;t<o;++t)a.push(e.getPointPositionForValue(t,r));return a}(t):function(t){const{scale:e={},fill:n}=t,i=function(t,e){let n=null;return"start"===t?n=e.bottom:"end"===t?n=e.top:tt(t)?n=e.getPixelForValue(t.value):e.getBasePixel&&(n=e.getBasePixel()),n}(n,e);if(et(i)){const t=e.isHorizontal();return{x:t?i:null,y:t?null:i}}return null}(t)}(t);return o instanceof _s?o:ms(o,i)}(e),{chart:o,index:s,line:r,scale:a,axis:l}=e,c=r.options,h=c.fill,d=c.backgroundColor,{above:u=d,below:g=d}=h||{},p=o.getDatasetMeta(s),f=Ln(o,p);i&&r.points.length&&(Be(t,n),function(t,e){const{line:n,target:i,above:o,below:s,area:r,scale:a,clip:l}=e,c=n._loop?"angle":e.axis;t.save(),"x"===c&&s!==o&&(Cs(t,i,r.top),Es(t,{line:n,target:i,color:o,scale:a,property:c,clip:l}),t.restore(),t.save(),Cs(t,i,r.bottom)),Es(t,{line:n,target:i,color:s,scale:a,property:c,clip:l}),t.restore()}(t,{line:r,target:i,above:u,below:g,area:n,scale:a,axis:l,clip:f}),Se(t))}function Cs(t,e,n){const{segments:i,points:o}=e;let s=!0,r=!1;t.beginPath();for(const a of i){const{start:i,end:l}=a,c=o[i],h=o[ps(i,l,o)];s?(t.moveTo(c.x,c.y),s=!1):(t.lineTo(c.x,n),t.lineTo(c.x,c.y)),r=!!e.pathSegment(t,a,{move:r}),r?t.closePath():t.lineTo(h.x,n)}t.lineTo(e.first().x,n),t.closePath(),t.clip()}function Es(t,e){const{line:n,target:i,property:o,color:s,scale:r,clip:a}=e,l=function(t,e,n){const i=t.segments,o=t.points,s=e.points,r=[];for(const t of i){let{start:i,end:a}=t;a=ps(i,a,o);const l=gs(n,o[i],o[a],t.loop);if(!e.segments){r.push({source:t,target:l,start:o[i],end:o[a]});continue}const c=Rn(e,l);for(const e of c){const i=gs(n,s[e.start],s[e.end],e.loop),a=Dn(t,o,i);for(const t of a)r.push({source:t,target:e,start:{[n]:fs(l,i,"start",Math.max)},end:{[n]:fs(l,i,"end",Math.min)}})}}return r}(n,i,o);for(const{source:e,target:c,start:h,end:d}of l){const{style:{backgroundColor:l=s}={}}=e,u=!0!==i;t.save(),t.fillStyle=l,Ms(t,r,a,u&&gs(o,h,d)),t.beginPath();const g=!!n.pathSegment(t,e);let p;if(u){g?t.closePath():ks(t,i,d,o);const e=!!i.pathSegment(t,c,{move:g,reverse:!0});p=g&&e,p||ks(t,i,h,o)}t.closePath(),t.fill(p?"evenodd":"nonzero"),t.restore()}}function Ms(t,e,n,i){const o=e.chart.chartArea,{property:s,start:r,end:a}=i||{};if("x"===s||"y"===s){let e,i,l,c;"x"===s?(e=r,i=o.top,l=a,c=o.bottom):(e=o.left,i=r,l=o.right,c=a),t.beginPath(),n&&(e=Math.max(e,n.left),l=Math.min(l,n.right),i=Math.max(i,n.top),c=Math.min(c,n.bottom)),t.rect(e,i,l-e,c-i),t.clip()}}function ks(t,e,n,i){const o=e.interpolate(n,i);o&&t.lineTo(o.x,o.y)}var Bs={id:"filler",afterDatasetsUpdate(t,e,n){const i=(t.data.datasets||[]).length,o=[];let s,r,a,l;for(r=0;r<i;++r)s=t.getDatasetMeta(r),a=s.dataset,l=null,a&&a.options&&a instanceof Xo&&(l={visible:t.isDatasetVisible(r),index:r,fill:ys(a,r,i),chart:t,axis:s.controller.options.indexAxis,scale:s.vScale,line:a}),s.$filler=l,o.push(l);for(r=0;r<i;++r)l=o[r],l&&!1!==l.fill&&(l.fill=xs(o,r,n.propagate))},beforeDraw(t,e,n){const i="beforeDraw"===n.drawTime,o=t.getSortedVisibleDatasetMetas(),s=t.chartArea;for(let e=o.length-1;e>=0;--e){const n=o[e].$filler;n&&(n.line.updateControlPoints(s,n.axis),i&&n.fill&&ws(t.ctx,n,s))}},beforeDatasetsDraw(t,e,n){if("beforeDatasetsDraw"!==n.drawTime)return;const i=t.getSortedVisibleDatasetMetas();for(let e=i.length-1;e>=0;--e){const n=i[e].$filler;bs(n)&&ws(t.ctx,n,t.chartArea)}},beforeDatasetDraw(t,e,n){const i=e.meta.$filler;bs(i)&&"beforeDatasetDraw"===n.drawTime&&ws(t.ctx,i,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const Ss=(t,e)=>{let{boxHeight:n=e,boxWidth:i=e}=t;return t.usePointStyle&&(n=Math.min(n,e),i=t.pointStyleWidth||Math.min(i,e)),{boxWidth:i,boxHeight:n,itemHeight:Math.max(e,n)}};class Is extends Ki{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,n){this.maxWidth=t,this.maxHeight=e,this._margins=n,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=st(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,n)=>t.sort(e,n,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const n=t.labels,i=je(n.font),o=i.size,s=this._computeTitleHeight(),{boxWidth:r,itemHeight:a}=Ss(n,o);let l,c;e.font=i.string,this.isHorizontal()?(l=this.maxWidth,c=this._fitRows(s,o,r,a)+10):(c=this.maxHeight,l=this._fitCols(s,i,r,a)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(c,t.maxHeight||this.maxHeight)}_fitRows(t,e,n,i){const{ctx:o,maxWidth:s,options:{labels:{padding:r}}}=this,a=this.legendHitBoxes=[],l=this.lineWidths=[0],c=i+r;let h=t;o.textAlign="left",o.textBaseline="middle";let d=-1,u=-c;return this.legendItems.forEach(((t,g)=>{const p=n+e/2+o.measureText(t.text).width;(0===g||l[l.length-1]+p+2*r>s)&&(h+=c,l[l.length-(g>0?0:1)]=0,u+=c,d++),a[g]={left:0,top:u,row:d,width:p,height:i},l[l.length-1]+=p+r})),h}_fitCols(t,e,n,i){const{ctx:o,maxHeight:s,options:{labels:{padding:r}}}=this,a=this.legendHitBoxes=[],l=this.columnSizes=[],c=s-t;let h=r,d=0,u=0,g=0,p=0;return this.legendItems.forEach(((t,s)=>{const{itemWidth:f,itemHeight:m}=function(t,e,n,i,o){const s=function(t,e,n,i){let o=t.text;return o&&"string"!=typeof o&&(o=o.reduce(((t,e)=>t.length>e.length?t:e))),e+n.size/2+i.measureText(o).width}(i,t,e,n),r=function(t,e,n){let i=t;return"string"!=typeof e.text&&(i=Ps(e,n)),i}(o,i,e.lineHeight);return{itemWidth:s,itemHeight:r}}(n,e,o,t,i);s>0&&u+m+2*r>c&&(h+=d+r,l.push({width:d,height:u}),g+=d+r,p++,d=u=0),a[s]={left:g,top:u,col:p,width:f,height:m},d=Math.max(d,f),u+=m+r})),h+=d,l.push({width:d,height:u}),h}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:n,labels:{padding:i},rtl:o}}=this,s=kn(o,this.left,this.width);if(this.isHorizontal()){let o=0,r=Qt(n,this.left+i,this.right-this.lineWidths[o]);for(const a of e)o!==a.row&&(o=a.row,r=Qt(n,this.left+i,this.right-this.lineWidths[o])),a.top+=this.top+t+i,a.left=s.leftForLtr(s.x(r),a.width),r+=a.width+i}else{let o=0,r=Qt(n,this.top+t+i,this.bottom-this.columnSizes[o].height);for(const a of e)a.col!==o&&(o=a.col,r=Qt(n,this.top+t+i,this.bottom-this.columnSizes[o].height)),a.top=r,a.left+=this.left+i,a.left=s.leftForLtr(s.x(a.left),a.width),r+=a.height+i}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;Be(t,this),this._draw(),Se(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:n,ctx:i}=this,{align:o,labels:s}=t,r=Ae.color,a=kn(t.rtl,this.left,this.width),l=je(s.font),{padding:c}=s,h=l.size,d=h/2;let u;this.drawTitle(),i.textAlign=a.textAlign("left"),i.textBaseline="middle",i.lineWidth=.5,i.font=l.string;const{boxWidth:g,boxHeight:p,itemHeight:f}=Ss(s,h),m=this.isHorizontal(),b=this._computeTitleHeight();u=m?{x:Qt(o,this.left+c,this.right-n[0]),y:this.top+c+b,line:0}:{x:this.left+c,y:Qt(o,this.top+b+c,this.bottom-e[0].height),line:0},Bn(this.ctx,t.textDirection);const x=f+c;this.legendItems.forEach(((y,A)=>{i.strokeStyle=y.fontColor,i.fillStyle=y.fontColor;const v=i.measureText(y.text).width,_=a.textAlign(y.textAlign||(y.textAlign=s.textAlign)),w=g+d+v;let C=u.x,E=u.y;if(a.setWidth(this.width),m?A>0&&C+w+c>this.right&&(E=u.y+=x,u.line++,C=u.x=Qt(o,this.left+c,this.right-n[u.line])):A>0&&E+x>this.bottom&&(C=u.x=C+e[u.line].width+c,u.line++,E=u.y=Qt(o,this.top+b+c,this.bottom-e[u.line].height)),function(t,e,n){if(isNaN(g)||g<=0||isNaN(p)||p<0)return;i.save();const o=it(n.lineWidth,1);if(i.fillStyle=it(n.fillStyle,r),i.lineCap=it(n.lineCap,"butt"),i.lineDashOffset=it(n.lineDashOffset,0),i.lineJoin=it(n.lineJoin,"miter"),i.lineWidth=o,i.strokeStyle=it(n.strokeStyle,r),i.setLineDash(it(n.lineDash,[])),s.usePointStyle){const r={radius:p*Math.SQRT2/2,pointStyle:n.pointStyle,rotation:n.rotation,borderWidth:o},l=a.xPlus(t,g/2);Me(i,r,l,e+d,s.pointStyleWidth&&g)}else{const s=e+Math.max((h-p)/2,0),r=a.leftForLtr(t,g),l=We(n.borderRadius);i.beginPath(),Object.values(l).some((t=>0!==t))?Oe(i,{x:r,y:s,w:g,h:p,radius:l}):i.rect(r,s,g,p),i.fill(),0!==o&&i.stroke()}i.restore()}(a.x(C),E,y),C=((t,e,n,i)=>t===(i?"left":"right")?n:"center"===t?(e+n)/2:e)(_,C+g+d,m?C+w:this.right,t.rtl),function(t,e,n){Te(i,n.text,t,e+f/2,l,{strikethrough:n.hidden,textAlign:a.textAlign(n.textAlign)})}(a.x(C),E,y),m)u.x+=w+c;else if("string"!=typeof y.text){const t=l.lineHeight;u.y+=Ps(y,t)+c}else u.y+=x})),Sn(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,n=je(e.font),i=Ne(e.padding);if(!e.display)return;const o=kn(t.rtl,this.left,this.width),s=this.ctx,r=e.position,a=n.size/2,l=i.top+a;let c,h=this.left,d=this.width;if(this.isHorizontal())d=Math.max(...this.lineWidths),c=this.top+l,h=Qt(t.align,h,this.right-d);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);c=l+Qt(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const u=Qt(r,h,h+d);s.textAlign=o.textAlign(Jt(r)),s.textBaseline="middle",s.strokeStyle=e.color,s.fillStyle=e.color,s.font=n.string,Te(s,e.text,u,c,n)}_computeTitleHeight(){const t=this.options.title,e=je(t.font),n=Ne(t.padding);return t.display?e.lineHeight+n.height:0}_getLegendItemAt(t,e){let n,i,o;if(jt(t,this.left,this.right)&&jt(e,this.top,this.bottom))for(o=this.legendHitBoxes,n=0;n<o.length;++n)if(i=o[n],jt(t,i.left,i.left+i.width)&&jt(e,i.top,i.top+i.height))return this.legendItems[n];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t&&"mouseout"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const n=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const s=this._hoveredItem,r=(o=n,null!==(i=s)&&null!==o&&i.datasetIndex===o.datasetIndex&&i.index===o.index);s&&!r&&st(e.onLeave,[t,s,this],this),this._hoveredItem=n,n&&!r&&st(e.onHover,[t,n,this],this)}else n&&st(e.onClick,[t,n,this],this);var i,o}}function Ps(t,e){return e*(t.text?t.text.length:0)}var Ds={id:"legend",_element:Is,start(t,e,n){const i=t.legend=new Is({ctx:t.ctx,options:n,chart:t});Ri.configure(t,i,n),Ri.addBox(t,i)},stop(t){Ri.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,n){const i=t.legend;Ri.configure(t,i,n),i.options=n},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,n){const i=e.datasetIndex,o=n.chart;o.isDatasetVisible(i)?(o.hide(i),e.hidden=!0):(o.show(i),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:n,pointStyle:i,textAlign:o,color:s,useBorderRadius:r,borderRadius:a}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const l=t.controller.getStyle(n?0:void 0),c=Ne(l.borderWidth);return{text:e[t.index].label,fillStyle:l.backgroundColor,fontColor:s,hidden:!t.visible,lineCap:l.borderCapStyle,lineDash:l.borderDash,lineDashOffset:l.borderDashOffset,lineJoin:l.borderJoinStyle,lineWidth:(c.width+c.height)/4,strokeStyle:l.borderColor,pointStyle:i||l.pointStyle,rotation:l.rotation,textAlign:o||l.textAlign,borderRadius:r&&(a||l.borderRadius),datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class Rs extends Ki{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const n=this.options;if(this.left=0,this.top=0,!n.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const i=Q(n.text)?n.text.length:1;this._padding=Ne(n.padding);const o=i*je(n.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=o:this.width=o}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:n,bottom:i,right:o,options:s}=this,r=s.align;let a,l,c,h=0;return this.isHorizontal()?(l=Qt(r,n,o),c=e+t,a=o-n):("left"===s.position?(l=n+t,c=Qt(r,i,e),h=-.5*At):(l=o-t,c=Qt(r,e,i),h=.5*At),a=i-e),{titleX:l,titleY:c,maxWidth:a,rotation:h}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const n=je(e.font),i=n.lineHeight/2+this._padding.top,{titleX:o,titleY:s,maxWidth:r,rotation:a}=this._drawArgs(i);Te(t,e.text,0,0,n,{color:e.color,maxWidth:r,rotation:a,textAlign:Jt(e.align),textBaseline:"middle",translation:[o,s]})}}var Ts={id:"title",_element:Rs,start(t,e,n){!function(t,e){const n=new Rs({ctx:t.ctx,options:e,chart:t});Ri.configure(t,n,e),Ri.addBox(t,n),t.titleBlock=n}(t,n)},stop(t){const e=t.titleBlock;Ri.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,n){const i=t.titleBlock;Ri.configure(t,i,n),i.options=n},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Os=new WeakMap;var Fs={id:"subtitle",start(t,e,n){const i=new Rs({ctx:t.ctx,options:n,chart:t});Ri.configure(t,i,n),Ri.addBox(t,i),Os.set(t,i)},stop(t){Ri.removeBox(t,Os.get(t)),Os.delete(t)},beforeUpdate(t,e,n){const i=Os.get(t);Ri.configure(t,i,n),i.options=n},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Ls={average(t){if(!t.length)return!1;let e,n,i=new Set,o=0,s=0;for(e=0,n=t.length;e<n;++e){const n=t[e].element;if(n&&n.hasValue()){const t=n.tooltipPosition();i.add(t.x),o+=t.y,++s}}return 0!==s&&0!==i.size&&{x:[...i].reduce(((t,e)=>t+e))/i.size,y:o/s}},nearest(t,e){if(!t.length)return!1;let n,i,o,s=e.x,r=e.y,a=Number.POSITIVE_INFINITY;for(n=0,i=t.length;n<i;++n){const i=t[n].element;if(i&&i.hasValue()){const t=zt(e,i.getCenterPoint());t<a&&(a=t,o=i)}}if(o){const t=o.tooltipPosition();s=t.x,r=t.y}return{x:s,y:r}}};function zs(t,e){return e&&(Q(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function $s(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function Vs(t,e){const{element:n,datasetIndex:i,index:o}=e,s=t.getDatasetMeta(i).controller,{label:r,value:a}=s.getLabelAndValue(o);return{chart:t,label:r,parsed:s.getParsed(o),raw:t.data.datasets[i].data[o],formattedValue:a,dataset:s.getDataset(),dataIndex:o,datasetIndex:i,element:n}}function Ws(t,e){const n=t.chart.ctx,{body:i,footer:o,title:s}=t,{boxWidth:r,boxHeight:a}=e,l=je(e.bodyFont),c=je(e.titleFont),h=je(e.footerFont),d=s.length,u=o.length,g=i.length,p=Ne(e.padding);let f=p.height,m=0,b=i.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);b+=t.beforeBody.length+t.afterBody.length,d&&(f+=d*c.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),b&&(f+=g*(e.displayColors?Math.max(a,l.lineHeight):l.lineHeight)+(b-g)*l.lineHeight+(b-1)*e.bodySpacing),u&&(f+=e.footerMarginTop+u*h.lineHeight+(u-1)*e.footerSpacing);let x=0;const y=function(t){m=Math.max(m,n.measureText(t).width+x)};return n.save(),n.font=c.string,rt(t.title,y),n.font=l.string,rt(t.beforeBody.concat(t.afterBody),y),x=e.displayColors?r+2+e.boxPadding:0,rt(i,(t=>{rt(t.before,y),rt(t.lines,y),rt(t.after,y)})),x=0,n.font=h.string,rt(t.footer,y),n.restore(),m+=p.width,{width:m,height:f}}function Ns(t,e,n,i){const{x:o,width:s}=n,{width:r,chartArea:{left:a,right:l}}=t;let c="center";return"center"===i?c=o<=(a+l)/2?"left":"right":o<=s/2?c="left":o>=r-s/2&&(c="right"),function(t,e,n,i){const{x:o,width:s}=i,r=n.caretSize+n.caretPadding;return"left"===t&&o+s+r>e.width||"right"===t&&o-s-r<0||void 0}(c,t,e,n)&&(c="center"),c}function js(t,e,n){const i=n.yAlign||e.yAlign||function(t,e){const{y:n,height:i}=e;return n<i/2?"top":n>t.height-i/2?"bottom":"center"}(t,n);return{xAlign:n.xAlign||e.xAlign||Ns(t,e,n,i),yAlign:i}}function Hs(t,e,n,i){const{caretSize:o,caretPadding:s,cornerRadius:r}=t,{xAlign:a,yAlign:l}=n,c=o+s,{topLeft:h,topRight:d,bottomLeft:u,bottomRight:g}=We(r);let p=function(t,e){let{x:n,width:i}=t;return"right"===e?n-=i:"center"===e&&(n-=i/2),n}(e,a);const f=function(t,e,n){let{y:i,height:o}=t;return"top"===e?i+=n:i-="bottom"===e?o+n:o/2,i}(e,l,c);return"center"===l?"left"===a?p+=c:"right"===a&&(p-=c):"left"===a?p-=Math.max(h,u)+o:"right"===a&&(p+=Math.max(d,g)+o),{x:Nt(p,0,i.width-e.width),y:Nt(f,0,i.height-e.height)}}function Ys(t,e,n){const i=Ne(n.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-i.right:t.x+i.left}function Us(t){return zs([],$s(t))}function qs(t,e){const n=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return n?t.override(n):t}const Xs={beforeTitle:Z,title(t){if(t.length>0){const e=t[0],n=e.chart.data.labels,i=n?n.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(i>0&&e.dataIndex<i)return n[e.dataIndex]}return""},afterTitle:Z,beforeBody:Z,beforeLabel:Z,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const n=t.formattedValue;return J(n)||(e+=n),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:Z,afterBody:Z,beforeFooter:Z,footer:Z,afterFooter:Z};function Gs(t,e,n,i){const o=t[e].call(n,i);return void 0===o?Xs[e].call(n,i):o}class Zs extends Ki{static positioners=Ls;constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,n=this.options.setContext(this.getContext()),i=n.enabled&&e.options.animation&&n.animations,o=new jn(this.chart,i);return i._cacheable&&(this._cachedAnimations=Object.freeze(o)),o}getContext(){return this.$context||(this.$context=Ye(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"}))}getTitle(t,e){const{callbacks:n}=e,i=Gs(n,"beforeTitle",this,t),o=Gs(n,"title",this,t),s=Gs(n,"afterTitle",this,t);let r=[];return r=zs(r,$s(i)),r=zs(r,$s(o)),r=zs(r,$s(s)),r}getBeforeBody(t,e){return Us(Gs(e.callbacks,"beforeBody",this,t))}getBody(t,e){const{callbacks:n}=e,i=[];return rt(t,(t=>{const e={before:[],lines:[],after:[]},o=qs(n,t);zs(e.before,$s(Gs(o,"beforeLabel",this,t))),zs(e.lines,Gs(o,"label",this,t)),zs(e.after,$s(Gs(o,"afterLabel",this,t))),i.push(e)})),i}getAfterBody(t,e){return Us(Gs(e.callbacks,"afterBody",this,t))}getFooter(t,e){const{callbacks:n}=e,i=Gs(n,"beforeFooter",this,t),o=Gs(n,"footer",this,t),s=Gs(n,"afterFooter",this,t);let r=[];return r=zs(r,$s(i)),r=zs(r,$s(o)),r=zs(r,$s(s)),r}_createItems(t){const e=this._active,n=this.chart.data,i=[],o=[],s=[];let r,a,l=[];for(r=0,a=e.length;r<a;++r)l.push(Vs(this.chart,e[r]));return t.filter&&(l=l.filter(((e,i,o)=>t.filter(e,i,o,n)))),t.itemSort&&(l=l.sort(((e,i)=>t.itemSort(e,i,n)))),rt(l,(e=>{const n=qs(t.callbacks,e);i.push(Gs(n,"labelColor",this,e)),o.push(Gs(n,"labelPointStyle",this,e)),s.push(Gs(n,"labelTextColor",this,e))})),this.labelColors=i,this.labelPointStyles=o,this.labelTextColors=s,this.dataPoints=l,l}update(t,e){const n=this.options.setContext(this.getContext()),i=this._active;let o,s=[];if(i.length){const t=Ls[n.position].call(this,i,this._eventPosition);s=this._createItems(n),this.title=this.getTitle(s,n),this.beforeBody=this.getBeforeBody(s,n),this.body=this.getBody(s,n),this.afterBody=this.getAfterBody(s,n),this.footer=this.getFooter(s,n);const e=this._size=Ws(this,n),r=Object.assign({},t,e),a=js(this.chart,n,r),l=Hs(n,r,a,this.chart);this.xAlign=a.xAlign,this.yAlign=a.yAlign,o={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(o={opacity:0});this._tooltipItems=s,this.$context=void 0,o&&this._resolveAnimations().update(this,o),t&&n.external&&n.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,n,i){const o=this.getCaretPosition(t,n,i);e.lineTo(o.x1,o.y1),e.lineTo(o.x2,o.y2),e.lineTo(o.x3,o.y3)}getCaretPosition(t,e,n){const{xAlign:i,yAlign:o}=this,{caretSize:s,cornerRadius:r}=n,{topLeft:a,topRight:l,bottomLeft:c,bottomRight:h}=We(r),{x:d,y:u}=t,{width:g,height:p}=e;let f,m,b,x,y,A;return"center"===o?(y=u+p/2,"left"===i?(f=d,m=f-s,x=y+s,A=y-s):(f=d+g,m=f+s,x=y-s,A=y+s),b=f):(m="left"===i?d+Math.max(a,c)+s:"right"===i?d+g-Math.max(l,h)-s:this.caretX,"top"===o?(x=u,y=x-s,f=m-s,b=m+s):(x=u+p,y=x+s,f=m+s,b=m-s),A=x),{x1:f,x2:m,x3:b,y1:x,y2:y,y3:A}}drawTitle(t,e,n){const i=this.title,o=i.length;let s,r,a;if(o){const l=kn(n.rtl,this.x,this.width);for(t.x=Ys(this,n.titleAlign,n),e.textAlign=l.textAlign(n.titleAlign),e.textBaseline="middle",s=je(n.titleFont),r=n.titleSpacing,e.fillStyle=n.titleColor,e.font=s.string,a=0;a<o;++a)e.fillText(i[a],l.x(t.x),t.y+s.lineHeight/2),t.y+=s.lineHeight+r,a+1===o&&(t.y+=n.titleMarginBottom-r)}}_drawColorBox(t,e,n,i,o){const s=this.labelColors[n],r=this.labelPointStyles[n],{boxHeight:a,boxWidth:l}=o,c=je(o.bodyFont),h=Ys(this,"left",o),d=i.x(h),u=a<c.lineHeight?(c.lineHeight-a)/2:0,g=e.y+u;if(o.usePointStyle){const e={radius:Math.min(l,a)/2,pointStyle:r.pointStyle,rotation:r.rotation,borderWidth:1},n=i.leftForLtr(d,l)+l/2,c=g+a/2;t.strokeStyle=o.multiKeyBackground,t.fillStyle=o.multiKeyBackground,Ee(t,e,n,c),t.strokeStyle=s.borderColor,t.fillStyle=s.backgroundColor,Ee(t,e,n,c)}else{t.lineWidth=tt(s.borderWidth)?Math.max(...Object.values(s.borderWidth)):s.borderWidth||1,t.strokeStyle=s.borderColor,t.setLineDash(s.borderDash||[]),t.lineDashOffset=s.borderDashOffset||0;const e=i.leftForLtr(d,l),n=i.leftForLtr(i.xPlus(d,1),l-2),r=We(s.borderRadius);Object.values(r).some((t=>0!==t))?(t.beginPath(),t.fillStyle=o.multiKeyBackground,Oe(t,{x:e,y:g,w:l,h:a,radius:r}),t.fill(),t.stroke(),t.fillStyle=s.backgroundColor,t.beginPath(),Oe(t,{x:n,y:g+1,w:l-2,h:a-2,radius:r}),t.fill()):(t.fillStyle=o.multiKeyBackground,t.fillRect(e,g,l,a),t.strokeRect(e,g,l,a),t.fillStyle=s.backgroundColor,t.fillRect(n,g+1,l-2,a-2))}t.fillStyle=this.labelTextColors[n]}drawBody(t,e,n){const{body:i}=this,{bodySpacing:o,bodyAlign:s,displayColors:r,boxHeight:a,boxWidth:l,boxPadding:c}=n,h=je(n.bodyFont);let d=h.lineHeight,u=0;const g=kn(n.rtl,this.x,this.width),p=function(n){e.fillText(n,g.x(t.x+u),t.y+d/2),t.y+=d+o},f=g.textAlign(s);let m,b,x,y,A,v,_;for(e.textAlign=s,e.textBaseline="middle",e.font=h.string,t.x=Ys(this,f,n),e.fillStyle=n.bodyColor,rt(this.beforeBody,p),u=r&&"right"!==f?"center"===s?l/2+c:l+2+c:0,y=0,v=i.length;y<v;++y){for(m=i[y],b=this.labelTextColors[y],e.fillStyle=b,rt(m.before,p),x=m.lines,r&&x.length&&(this._drawColorBox(e,t,y,g,n),d=Math.max(h.lineHeight,a)),A=0,_=x.length;A<_;++A)p(x[A]),d=h.lineHeight;rt(m.after,p)}u=0,d=h.lineHeight,rt(this.afterBody,p),t.y-=o}drawFooter(t,e,n){const i=this.footer,o=i.length;let s,r;if(o){const a=kn(n.rtl,this.x,this.width);for(t.x=Ys(this,n.footerAlign,n),t.y+=n.footerMarginTop,e.textAlign=a.textAlign(n.footerAlign),e.textBaseline="middle",s=je(n.footerFont),e.fillStyle=n.footerColor,e.font=s.string,r=0;r<o;++r)e.fillText(i[r],a.x(t.x),t.y+s.lineHeight/2),t.y+=s.lineHeight+n.footerSpacing}}drawBackground(t,e,n,i){const{xAlign:o,yAlign:s}=this,{x:r,y:a}=t,{width:l,height:c}=n,{topLeft:h,topRight:d,bottomLeft:u,bottomRight:g}=We(i.cornerRadius);e.fillStyle=i.backgroundColor,e.strokeStyle=i.borderColor,e.lineWidth=i.borderWidth,e.beginPath(),e.moveTo(r+h,a),"top"===s&&this.drawCaret(t,e,n,i),e.lineTo(r+l-d,a),e.quadraticCurveTo(r+l,a,r+l,a+d),"center"===s&&"right"===o&&this.drawCaret(t,e,n,i),e.lineTo(r+l,a+c-g),e.quadraticCurveTo(r+l,a+c,r+l-g,a+c),"bottom"===s&&this.drawCaret(t,e,n,i),e.lineTo(r+u,a+c),e.quadraticCurveTo(r,a+c,r,a+c-u),"center"===s&&"left"===o&&this.drawCaret(t,e,n,i),e.lineTo(r,a+h),e.quadraticCurveTo(r,a,r+h,a),e.closePath(),e.fill(),i.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,n=this.$animations,i=n&&n.x,o=n&&n.y;if(i||o){const n=Ls[t.position].call(this,this._active,this._eventPosition);if(!n)return;const s=this._size=Ws(this,t),r=Object.assign({},n,this._size),a=js(e,t,r),l=Hs(t,r,a,e);i._to===l.x&&o._to===l.y||(this.xAlign=a.xAlign,this.yAlign=a.yAlign,this.width=s.width,this.height=s.height,this.caretX=n.x,this.caretY=n.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let n=this.opacity;if(!n)return;this._updateAnimationTarget(e);const i={width:this.width,height:this.height},o={x:this.x,y:this.y};n=Math.abs(n)<.001?0:n;const s=Ne(e.padding),r=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&r&&(t.save(),t.globalAlpha=n,this.drawBackground(o,t,i,e),Bn(t,e.textDirection),o.y+=s.top,this.drawTitle(o,t,e),this.drawBody(o,t,e),this.drawFooter(o,t,e),Sn(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const n=this._active,i=t.map((({datasetIndex:t,index:e})=>{const n=this.chart.getDatasetMeta(t);if(!n)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:n.data[e],index:e}})),o=!at(n,i),s=this._positionChanged(i,e);(o||s)&&(this._active=i,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,n=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const i=this.options,o=this._active||[],s=this._getActiveElements(t,o,e,n),r=this._positionChanged(s,t),a=e||!at(s,o)||r;return a&&(this._active=s,(i.enabled||i.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),a}_getActiveElements(t,e,n,i){const o=this.options;if("mouseout"===t.type)return[];if(!i)return e.filter((t=>this.chart.data.datasets[t.datasetIndex]&&void 0!==this.chart.getDatasetMeta(t.datasetIndex).controller.getParsed(t.index)));const s=this.chart.getElementsAtEventForMode(t,o.mode,o,n);return o.reverse&&s.reverse(),s}_positionChanged(t,e){const{caretX:n,caretY:i,options:o}=this,s=Ls[o.position].call(this,t,e);return!1!==s&&(n!==s.x||i!==s.y)}}var Ks={id:"tooltip",_element:Zs,positioners:Ls,afterInit(t,e,n){n&&(t.tooltip=new Zs({chart:t,options:n}))},beforeUpdate(t,e,n){t.tooltip&&t.tooltip.initialize(n)},reset(t,e,n){t.tooltip&&t.tooltip.initialize(n)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const n={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",{...n,cancelable:!0}))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",n)}},afterEvent(t,e){if(t.tooltip){const n=e.replay;t.tooltip.handleEvent(e.event,n,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:Xs},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},Js=Object.freeze({__proto__:null,Colors:cs,Decimation:us,Filler:Bs,Legend:Ds,SubTitle:Fs,Title:Ts,Tooltip:Ks});function Qs(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}function tr(t,e,{horizontal:n,minRotation:i}){const o=Tt(i),s=(n?Math.sin(o):Math.cos(o))||.001,r=.75*e*(""+t).length;return Math.min(e/s,r)}class er extends ro{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return J(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:n}=this.getUserBounds();let{min:i,max:o}=this;const s=t=>i=e?i:t,r=t=>o=n?o:t;if(t){const t=St(i),e=St(o);t<0&&e<0?r(0):t>0&&e>0&&s(0)}if(i===o){let e=0===o?1:Math.abs(.05*o);r(o+e),t||s(i-e)}this.min=i,this.max=o}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:n,stepSize:i}=t;return i?(e=Math.ceil(this.max/i)-Math.floor(this.min/i)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${i} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),n=n||11),n&&(e=Math.min(n,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let n=this.getTickLimit();n=Math.max(2,n);const i=function(t,e){const n=[],{bounds:i,step:o,min:s,max:r,precision:a,count:l,maxTicks:c,maxDigits:h,includeBounds:d}=t,u=o||1,g=c-1,{min:p,max:f}=e,m=!J(s),b=!J(r),x=!J(l),y=(f-p)/(h+1);let A,v,_,w,C=Pt((f-p)/g/u)*u;if(C<1e-14&&!m&&!b)return[{value:p},{value:f}];w=Math.ceil(f/C)-Math.floor(p/C),w>g&&(C=Pt(w*C/g/u)*u),J(a)||(A=Math.pow(10,a),C=Math.ceil(C*A)/A),"ticks"===i?(v=Math.floor(p/C)*C,_=Math.ceil(f/C)*C):(v=p,_=f),m&&b&&o&&function(t,e){const n=Math.round(t);return n-e<=t&&n+e>=t}((r-s)/o,C/1e3)?(w=Math.round(Math.min((r-s)/C,c)),C=(r-s)/w,v=s,_=r):x?(v=m?s:v,_=b?r:_,w=l-1,C=(_-v)/w):(w=(_-v)/C,w=It(w,Math.round(w),C/1e3)?Math.round(w):Math.ceil(w));const E=Math.max(Ft(C),Ft(v));A=Math.pow(10,J(a)?E:a),v=Math.round(v*A)/A,_=Math.round(_*A)/A;let M=0;for(m&&(d&&v!==s?(n.push({value:s}),v<s&&M++,It(Math.round((v+M*C)*A)/A,s,tr(s,y,t))&&M++):v<s&&M++);M<w;++M){const t=Math.round((v+M*C)*A)/A;if(b&&t>r)break;n.push({value:t})}return b&&d&&_!==r?n.length&&It(n[n.length-1].value,r,tr(r,y,t))?n[n.length-1].value=r:n.push({value:r}):b&&_!==r||n.push({value:_}),n}({maxTicks:n,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&Rt(i,this,"value"),t.reverse?(i.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),i}configure(){const t=this.ticks;let e=this.min,n=this.max;if(super.configure(),this.options.offset&&t.length){const i=(n-e)/Math.max(t.length-1,1)/2;e-=i,n+=i}this._startValue=e,this._endValue=n,this._valueRange=n-e}getLabelForValue(t){return ue(t,this.chart.options.locale,this.options.ticks.format)}}class nr extends er{static id="linear";static defaults={ticks:{callback:pe.formatters.numeric}};determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=et(t)?t:0,this.max=et(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,n=Tt(this.options.ticks.minRotation),i=(t?Math.sin(n):Math.cos(n))||.001,o=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,o.lineHeight/i))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}const ir=t=>Math.floor(Bt(t)),or=(t,e)=>Math.pow(10,ir(t)+e);function sr(t){return 1==t/Math.pow(10,ir(t))}function rr(t,e,n){const i=Math.pow(10,n),o=Math.floor(t/i);return Math.ceil(e/i)-o}class ar extends ro{static id="logarithmic";static defaults={ticks:{callback:pe.formatters.logarithmic,major:{enabled:!0}}};constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const n=er.prototype.parse.apply(this,[t,e]);if(0!==n)return et(n)&&n>0?n:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=et(t)?Math.max(0,t):null,this.max=et(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!et(this._userMin)&&(this.min=t===or(this.min,0)?or(this.min,-1):or(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let n=this.min,i=this.max;const o=e=>n=t?n:e,s=t=>i=e?i:t;n===i&&(n<=0?(o(1),s(10)):(o(or(n,-1)),s(or(i,1)))),n<=0&&o(or(i,-1)),i<=0&&s(or(n,1)),this.min=n,this.max=i}buildTicks(){const t=this.options,e=function(t,{min:e,max:n}){e=nt(t.min,e);const i=[],o=ir(e);let s=function(t,e){let n=ir(e-t);for(;rr(t,e,n)>10;)n++;for(;rr(t,e,n)<10;)n--;return Math.min(n,ir(t))}(e,n),r=s<0?Math.pow(10,Math.abs(s)):1;const a=Math.pow(10,s),l=o>s?Math.pow(10,o):0,c=Math.round((e-l)*r)/r,h=Math.floor((e-l)/a/10)*a*10;let d=Math.floor((c-h)/Math.pow(10,s)),u=nt(t.min,Math.round((l+h+d*Math.pow(10,s))*r)/r);for(;u<n;)i.push({value:u,major:sr(u),significand:d}),d>=10?d=d<15?15:20:d++,d>=20&&(s++,d=2,r=s>=0?1:r),u=Math.round((l+h+d*Math.pow(10,s))*r)/r;const g=nt(t.max,u);return i.push({value:g,major:sr(g),significand:d}),i}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&Rt(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":ue(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=Bt(t),this._valueRange=Bt(this.max)-Bt(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(Bt(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function lr(t){const e=t.ticks;if(e.display&&t.display){const t=Ne(e.backdropPadding);return it(e.font&&e.font.size,Ae.font.size)+t.height}return 0}function cr(t,e,n,i,o){return t===i||t===o?{start:e-n/2,end:e+n/2}:t<i||t>o?{start:e-n,end:e}:{start:e,end:e+n}}function hr(t,e,n,i,o){const s=Math.abs(Math.sin(n)),r=Math.abs(Math.cos(n));let a=0,l=0;i.start<e.l?(a=(e.l-i.start)/s,t.l=Math.min(t.l,e.l-a)):i.end>e.r&&(a=(i.end-e.r)/s,t.r=Math.max(t.r,e.r+a)),o.start<e.t?(l=(e.t-o.start)/r,t.t=Math.min(t.t,e.t-l)):o.end>e.b&&(l=(o.end-e.b)/r,t.b=Math.max(t.b,e.b+l))}function dr(t,e,n){const i=t.drawingArea,{extra:o,additionalAngle:s,padding:r,size:a}=n,l=t.getPointPosition(e,i+o+r,s),c=Math.round(Ot(Vt(l.angle+Et))),h=function(t,e,n){return 90===n||270===n?t-=e/2:(n>270||n<90)&&(t-=e),t}(l.y,a.h,c),d=function(t){return 0===t||180===t?"center":t<180?"left":"right"}(c),u=(g=l.x,p=a.w,"right"===(f=d)?g-=p:"center"===f&&(g-=p/2),g);var g,p,f;return{visible:!0,x:l.x,y:h,textAlign:d,left:u,top:h,right:u+a.w,bottom:h+a.h}}function ur(t,e){if(!e)return!0;const{left:n,top:i,right:o,bottom:s}=t;return!(ke({x:n,y:i},e)||ke({x:n,y:s},e)||ke({x:o,y:i},e)||ke({x:o,y:s},e))}function gr(t,e,n){const{left:i,top:o,right:s,bottom:r}=n,{backdropColor:a}=e;if(!J(a)){const n=We(e.borderRadius),l=Ne(e.backdropPadding);t.fillStyle=a;const c=i-l.left,h=o-l.top,d=s-i+l.width,u=r-o+l.height;Object.values(n).some((t=>0!==t))?(t.beginPath(),Oe(t,{x:c,y:h,w:d,h:u,radius:n}),t.fill()):t.fillRect(c,h,d,u)}}function pr(t,e,n,i){const{ctx:o}=t;if(n)o.arc(t.xCenter,t.yCenter,e,0,vt);else{let n=t.getPointPosition(0,e);o.moveTo(n.x,n.y);for(let s=1;s<i;s++)n=t.getPointPosition(s,e),o.lineTo(n.x,n.y)}}class fr extends er{static id="radialLinear";static defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:pe.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}};static defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"};static descriptors={angleLines:{_fallback:"grid"}};constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=Ne(lr(this.options)/2),e=this.width=this.maxWidth-t.width,n=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+n/2+t.top),this.drawingArea=Math.floor(Math.min(e,n)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=et(t)&&!isNaN(t)?t:0,this.max=et(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/lr(this.options))}generateTickLabels(t){er.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const n=st(this.options.pointLabels.callback,[t,e],this);return n||0===n?n:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},n=Object.assign({},e),i=[],o=[],s=t._pointLabels.length,r=t.options.pointLabels,a=r.centerPointLabels?At/s:0;for(let d=0;d<s;d++){const s=r.setContext(t.getPointLabelContext(d));o[d]=s.padding;const u=t.getPointPosition(d,t.drawingArea+o[d],a),g=je(s.font),p=(l=t.ctx,c=g,h=Q(h=t._pointLabels[d])?h:[h],{w:_e(l,c.string,h),h:h.length*c.lineHeight});i[d]=p;const f=Vt(t.getIndexAngle(d)+a),m=Math.round(Ot(f));hr(n,e,f,cr(m,u.x,p.w,0,180),cr(m,u.y,p.h,90,270))}var l,c,h;t.setCenterPoint(e.l-n.l,n.r-e.r,e.t-n.t,n.b-e.b),t._pointLabelItems=function(t,e,n){const i=[],o=t._pointLabels.length,s=t.options,{centerPointLabels:r,display:a}=s.pointLabels,l={extra:lr(s)/2,additionalAngle:r?At/o:0};let c;for(let s=0;s<o;s++){l.padding=n[s],l.size=e[s];const o=dr(t,s,l);i.push(o),"auto"===a&&(o.visible=ur(o,c),o.visible&&(c=o))}return i}(t,i,o)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,n,i){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((n-i)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,n,i))}getIndexAngle(t){return Vt(t*(vt/(this._pointLabels.length||1))+Tt(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(J(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(J(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const n=e[t];return function(t,e,n){return Ye(t,{label:n,index:e,type:"pointLabel"})}(this.getContext(),t,n)}}getPointPosition(t,e,n=0){const i=this.getIndexAngle(t)-Et+n;return{x:Math.cos(i)*e+this.xCenter,y:Math.sin(i)*e+this.yCenter,angle:i}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:n,right:i,bottom:o}=this._pointLabelItems[t];return{left:e,top:n,right:i,bottom:o}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const n=this.ctx;n.save(),n.beginPath(),pr(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),n.closePath(),n.fillStyle=t,n.fill(),n.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:n,grid:i,border:o}=e,s=this._pointLabels.length;let r,a,l;if(e.pointLabels.display&&function(t,e){const{ctx:n,options:{pointLabels:i}}=t;for(let o=e-1;o>=0;o--){const e=t._pointLabelItems[o];if(!e.visible)continue;const s=i.setContext(t.getPointLabelContext(o));gr(n,s,e);const r=je(s.font),{x:a,y:l,textAlign:c}=e;Te(n,t._pointLabels[o],a,l+r.lineHeight/2,r,{color:s.color,textAlign:c,textBaseline:"middle"})}}(this,s),i.display&&this.ticks.forEach(((t,e)=>{if(0!==e||0===e&&this.min<0){a=this.getDistanceFromCenterForValue(t.value);const n=this.getContext(e),r=i.setContext(n),l=o.setContext(n);!function(t,e,n,i,o){const s=t.ctx,r=e.circular,{color:a,lineWidth:l}=e;!r&&!i||!a||!l||n<0||(s.save(),s.strokeStyle=a,s.lineWidth=l,s.setLineDash(o.dash||[]),s.lineDashOffset=o.dashOffset,s.beginPath(),pr(t,n,r,i),s.closePath(),s.stroke(),s.restore())}(this,r,a,s,l)}})),n.display){for(t.save(),r=s-1;r>=0;r--){const i=n.setContext(this.getPointLabelContext(r)),{color:o,lineWidth:s}=i;s&&o&&(t.lineWidth=s,t.strokeStyle=o,t.setLineDash(i.borderDash),t.lineDashOffset=i.borderDashOffset,a=this.getDistanceFromCenterForValue(e.reverse?this.min:this.max),l=this.getPointPosition(r,a),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(l.x,l.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,n=e.ticks;if(!n.display)return;const i=this.getIndexAngle(0);let o,s;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(i),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((i,r)=>{if(0===r&&this.min>=0&&!e.reverse)return;const a=n.setContext(this.getContext(r)),l=je(a.font);if(o=this.getDistanceFromCenterForValue(this.ticks[r].value),a.showLabelBackdrop){t.font=l.string,s=t.measureText(i.label).width,t.fillStyle=a.backdropColor;const e=Ne(a.backdropPadding);t.fillRect(-s/2-e.left,-o-l.size/2-e.top,s+e.width,l.size+e.height)}Te(t,i.label,0,-o,l,{color:a.color,strokeColor:a.textStrokeColor,strokeWidth:a.textStrokeWidth})})),t.restore()}drawTitle(){}}const mr={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},br=Object.keys(mr);function xr(t,e){return t-e}function yr(t,e){if(J(e))return null;const n=t._adapter,{parser:i,round:o,isoWeekday:s}=t._parseOpts;let r=e;return"function"==typeof i&&(r=i(r)),et(r)||(r="string"==typeof i?n.parse(r,i):n.parse(r)),null===r?null:(o&&(r="week"!==o||!Dt(s)&&!0!==s?n.startOf(r,o):n.startOf(r,"isoWeek",s)),+r)}function Ar(t,e,n,i){const o=br.length;for(let s=br.indexOf(t);s<o-1;++s){const t=mr[br[s]],o=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((n-e)/(o*t.size))<=i)return br[s]}return br[o-1]}function vr(t,e,n){if(n){if(n.length){const{lo:i,hi:o}=Ht(n,e);t[n[i]>=e?n[i]:n[o]]=!0}}else t[e]=!0}function _r(t,e,n){const i=[],o={},s=e.length;let r,a;for(r=0;r<s;++r)a=e[r],o[a]=r,i.push({value:a,major:!1});return 0!==s&&n?function(t,e,n,i){const o=t._adapter,s=+o.startOf(e[0].value,i),r=e[e.length-1].value;let a,l;for(a=s;a<=r;a=+o.add(a,1,i))l=n[a],l>=0&&(e[l].major=!0);return e}(t,i,o,n):i}class wr extends ro{static id="time";static defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}};constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e={}){const n=t.time||(t.time={}),i=this._adapter=new fi(t.adapters.date);i.init(e),ut(n.displayFormats,i.formats()),this._parseOpts={parser:n.parser,round:n.round,isoWeekday:n.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:yr(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,n=t.time.unit||"day";let{min:i,max:o,minDefined:s,maxDefined:r}=this.getUserBounds();function a(t){s||isNaN(t.min)||(i=Math.min(i,t.min)),r||isNaN(t.max)||(o=Math.max(o,t.max))}s&&r||(a(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||a(this.getMinMax(!1))),i=et(i)&&!isNaN(i)?i:+e.startOf(Date.now(),n),o=et(o)&&!isNaN(o)?o:+e.endOf(Date.now(),n)+1,this.min=Math.min(i,o-1),this.max=Math.max(i+1,o)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],n=t[t.length-1]),{min:e,max:n}}buildTicks(){const t=this.options,e=t.time,n=t.ticks,i="labels"===n.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&i.length&&(this.min=this._userMin||i[0],this.max=this._userMax||i[i.length-1]);const o=this.min,s=function(t,e,n){let i=0,o=t.length;for(;i<o&&t[i]<e;)i++;for(;o>i&&t[o-1]>n;)o--;return i>0||o<t.length?t.slice(i,o):t}(i,o,this.max);return this._unit=e.unit||(n.autoSkip?Ar(e.minUnit,this.min,this.max,this._getLabelCapacity(o)):function(t,e,n,i,o){for(let s=br.length-1;s>=br.indexOf(n);s--){const n=br[s];if(mr[n].common&&t._adapter.diff(o,i,n)>=e-1)return n}return br[n?br.indexOf(n):0]}(this,s.length,e.minUnit,this.min,this.max)),this._majorUnit=n.major.enabled&&"year"!==this._unit?function(t){for(let e=br.indexOf(t)+1,n=br.length;e<n;++e)if(mr[br[e]].common)return br[e]}(this._unit):void 0,this.initOffsets(i),t.reverse&&s.reverse(),_r(this,s,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t=[]){let e,n,i=0,o=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),i=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,n=this.getDecimalForValue(t[t.length-1]),o=1===t.length?n:(n-this.getDecimalForValue(t[t.length-2]))/2);const s=t.length<3?.5:.25;i=Nt(i,0,s),o=Nt(o,0,s),this._offsets={start:i,end:o,factor:1/(i+1+o)}}_generate(){const t=this._adapter,e=this.min,n=this.max,i=this.options,o=i.time,s=o.unit||Ar(o.minUnit,e,n,this._getLabelCapacity(e)),r=it(i.ticks.stepSize,1),a="week"===s&&o.isoWeekday,l=Dt(a)||!0===a,c={};let h,d,u=e;if(l&&(u=+t.startOf(u,"isoWeek",a)),u=+t.startOf(u,l?"day":s),t.diff(n,e,s)>1e5*r)throw new Error(e+" and "+n+" are too far apart with stepSize of "+r+" "+s);const g="data"===i.ticks.source&&this.getDataTimestamps();for(h=u,d=0;h<n;h=+t.add(h,r,s),d++)vr(c,h,g);return h!==n&&"ticks"!==i.bounds&&1!==d||vr(c,h,g),Object.keys(c).sort(xr).map((t=>+t))}getLabelForValue(t){const e=this._adapter,n=this.options.time;return n.tooltipFormat?e.format(t,n.tooltipFormat):e.format(t,n.displayFormats.datetime)}format(t,e){const n=this.options.time.displayFormats,i=this._unit,o=e||n[i];return this._adapter.format(t,o)}_tickFormatFunction(t,e,n,i){const o=this.options,s=o.ticks.callback;if(s)return st(s,[t,e,n],this);const r=o.time.displayFormats,a=this._unit,l=this._majorUnit,c=a&&r[a],h=l&&r[l],d=n[e],u=l&&h&&d&&d.major;return this._adapter.format(t,i||(u?h:c))}generateTickLabels(t){let e,n,i;for(e=0,n=t.length;e<n;++e)i=t[e],i.label=this._tickFormatFunction(i.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,n=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+n)*e.factor)}getValueForPixel(t){const e=this._offsets,n=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+n*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,n=this.ctx.measureText(t).width,i=Tt(this.isHorizontal()?e.maxRotation:e.minRotation),o=Math.cos(i),s=Math.sin(i),r=this._resolveTickFontOptions(0).size;return{w:n*o+r*s,h:n*s+r*o}}_getLabelCapacity(t){const e=this.options.time,n=e.displayFormats,i=n[e.unit]||n.millisecond,o=this._tickFormatFunction(t,0,_r(this,[t],this._majorUnit),i),s=this._getLabelSize(o),r=Math.floor(this.isHorizontal()?this.width/s.w:this.height/s.h)-1;return r>0?r:1}getDataTimestamps(){let t,e,n=this._cache.data||[];if(n.length)return n;const i=this.getMatchingVisibleMetas();if(this._normalized&&i.length)return this._cache.data=i[0].controller.getAllParsedValues(this);for(t=0,e=i.length;t<e;++t)n=n.concat(i[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(n)}getLabelTimestamps(){const t=this._cache.labels||[];let e,n;if(t.length)return t;const i=this.getLabels();for(e=0,n=i.length;e<n;++e)t.push(yr(this,i[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return Gt(t.sort(xr))}}function Cr(t,e,n){let i,o,s,r,a=0,l=t.length-1;n?(e>=t[a].pos&&e<=t[l].pos&&({lo:a,hi:l}=Yt(t,"pos",e)),({pos:i,time:s}=t[a]),({pos:o,time:r}=t[l])):(e>=t[a].time&&e<=t[l].time&&({lo:a,hi:l}=Yt(t,"time",e)),({time:i,pos:s}=t[a]),({time:o,pos:r}=t[l]));const c=o-i;return c?s+(r-s)*(e-i)/c:s}var Er=Object.freeze({__proto__:null,CategoryScale:class extends ro{static id="category";static defaults={ticks:{callback:Qs}};constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:n,label:i}of e)t[n]===i&&t.splice(n,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(J(t))return null;const n=this.getLabels();return((t,e)=>null===t?null:Nt(Math.round(t),0,e))(e=isFinite(e)&&n[e]===t?e:function(t,e,n,i){const o=t.indexOf(e);return-1===o?((t,e,n,i)=>("string"==typeof e?(n=t.push(e)-1,i.unshift({index:n,label:e})):isNaN(e)&&(n=null),n))(t,e,n,i):o!==t.lastIndexOf(e)?n:o}(n,t,it(e,t),this._addedLabels),n.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:n,max:i}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(n=0),e||(i=this.getLabels().length-1)),this.min=n,this.max=i}buildTicks(){const t=this.min,e=this.max,n=this.options.offset,i=[];let o=this.getLabels();o=0===t&&e===o.length-1?o:o.slice(t,e+1),this._valueRange=Math.max(o.length-(n?0:1),1),this._startValue=this.min-(n?.5:0);for(let n=t;n<=e;n++)i.push({value:n});return i}getLabelForValue(t){return Qs.call(this,t)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}},LinearScale:nr,LogarithmicScale:ar,RadialLinearScale:fr,TimeScale:wr,TimeSeriesScale:class extends wr{static id="timeseries";static defaults=wr.defaults;constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=Cr(e,this.min),this._tableRange=Cr(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:n}=this,i=[],o=[];let s,r,a,l,c;for(s=0,r=t.length;s<r;++s)l=t[s],l>=e&&l<=n&&i.push(l);if(i.length<2)return[{time:e,pos:0},{time:n,pos:1}];for(s=0,r=i.length;s<r;++s)c=i[s+1],a=i[s-1],l=i[s],Math.round((c+a)/2)!==l&&o.push({time:l,pos:s/(r-1)});return o}_generate(){const t=this.min,e=this.max;let n=super.getDataTimestamps();return n.includes(t)&&n.length||n.splice(0,0,t),n.includes(e)&&1!==n.length||n.push(e),n.sort(((t,e)=>t-e))}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),n=this.getLabelTimestamps();return t=e.length&&n.length?this.normalize(e.concat(n)):e.length?e:n,t=this._cache.all=t,t}getDecimalForValue(t){return(Cr(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,n=this.getDecimalForPixel(t)/e.factor-e.end;return Cr(this._table,n*this._tableRange+this._minPos,!0)}}});const Mr=[ui,is,Js,Er];var kr=function(){if("undefined"!=typeof window){if(window.devicePixelRatio)return window.devicePixelRatio;var t=window.screen;if(t)return(t.deviceXDPI||1)/(t.logicalXDPI||1)}return 1}(),Br=function(t,e,n){var i,o=[].concat(e),s=o.length,r=t.font,a=0;for(t.font=n.string,i=0;i<s;++i)a=Math.max(t.measureText(o[i]).width,a);return t.font=r,{height:s*n.lineHeight,width:a}};function Sr(t,e){var n=e.x,i=e.y;if(null===n)return{x:0,y:-1};if(null===i)return{x:1,y:0};var o=t.x-n,s=t.y-i,r=Math.sqrt(o*o+s*s);return{x:r?o/r:0,y:r?s/r:-1}}function Ir(t,e,n){var i=0;return t<n.left?i|=1:t>n.right&&(i|=2),e<n.top?i|=8:e>n.bottom&&(i|=4),i}function Pr(t,e){var n,i,o=e.anchor,s=t;return e.clamp&&(s=function(t,e){for(var n,i,o,s=t.x0,r=t.y0,a=t.x1,l=t.y1,c=Ir(s,r,e),h=Ir(a,l,e);c|h&&!(c&h);)8&(n=c||h)?(i=s+(a-s)*(e.top-r)/(l-r),o=e.top):4&n?(i=s+(a-s)*(e.bottom-r)/(l-r),o=e.bottom):2&n?(o=r+(l-r)*(e.right-s)/(a-s),i=e.right):1&n&&(o=r+(l-r)*(e.left-s)/(a-s),i=e.left),n===c?c=Ir(s=i,r=o,e):h=Ir(a=i,l=o,e);return{x0:s,x1:a,y0:r,y1:l}}(s,e.area)),"start"===o?(n=s.x0,i=s.y0):"end"===o?(n=s.x1,i=s.y1):(n=(s.x0+s.x1)/2,i=(s.y0+s.y1)/2),function(t,e,n,i,o){switch(o){case"center":n=i=0;break;case"bottom":n=0,i=1;break;case"right":n=1,i=0;break;case"left":n=-1,i=0;break;case"top":n=0,i=-1;break;case"start":n=-n,i=-i;break;case"end":break;default:o*=Math.PI/180,n=Math.cos(o),i=Math.sin(o)}return{x:t,y:e,vx:n,vy:i}}(n,i,t.vx,t.vy,e.align)}var Dr=function(t,e){var n=(t.startAngle+t.endAngle)/2,i=Math.cos(n),o=Math.sin(n),s=t.innerRadius,r=t.outerRadius;return Pr({x0:t.x+i*s,y0:t.y+o*s,x1:t.x+i*r,y1:t.y+o*r,vx:i,vy:o},e)},Rr=function(t,e){var n=Sr(t,e.origin),i=n.x*t.options.radius,o=n.y*t.options.radius;return Pr({x0:t.x-i,y0:t.y-o,x1:t.x+i,y1:t.y+o,vx:n.x,vy:n.y},e)},Tr=function(t,e){var n=Sr(t,e.origin),i=t.x,o=t.y,s=0,r=0;return t.horizontal?(i=Math.min(t.x,t.base),s=Math.abs(t.base-t.x)):(o=Math.min(t.y,t.base),r=Math.abs(t.base-t.y)),Pr({x0:i,y0:o+r,x1:i+s,y1:o,vx:n.x,vy:n.y},e)},Or=function(t,e){var n=Sr(t,e.origin);return Pr({x0:t.x,y0:t.y,x1:t.x+(t.width||0),y1:t.y+(t.height||0),vx:n.x,vy:n.y},e)},Fr=function(t){return Math.round(t*kr)/kr};function Lr(t,e){var n=e.chart.getDatasetMeta(e.datasetIndex).vScale;if(!n)return null;if(void 0!==n.xCenter&&void 0!==n.yCenter)return{x:n.xCenter,y:n.yCenter};var i=n.getBasePixel();return t.horizontal?{x:i,y:null}:{x:null,y:i}}function zr(t,e,n){var i=t.shadowBlur,o=n.stroked,s=Fr(n.x),r=Fr(n.y),a=Fr(n.w);o&&t.strokeText(e,s,r,a),n.filled&&(i&&o&&(t.shadowBlur=0),t.fillText(e,s,r,a),i&&o&&(t.shadowBlur=i))}var $r=function(t,e,n,i){var o=this;o._config=t,o._index=i,o._model=null,o._rects=null,o._ctx=e,o._el=n};dt($r.prototype,{_modelize:function(t,e,n,i){var o,s=this,r=s._index,a=je(He([n.font,{}],i,r)),l=He([n.color,Ae.color],i,r);return{align:He([n.align,"center"],i,r),anchor:He([n.anchor,"center"],i,r),area:i.chart.chartArea,backgroundColor:He([n.backgroundColor,null],i,r),borderColor:He([n.borderColor,null],i,r),borderRadius:He([n.borderRadius,0],i,r),borderWidth:He([n.borderWidth,0],i,r),clamp:He([n.clamp,!1],i,r),clip:He([n.clip,!1],i,r),color:l,display:t,font:a,lines:e,offset:He([n.offset,4],i,r),opacity:He([n.opacity,1],i,r),origin:Lr(s._el,i),padding:Ne(He([n.padding,4],i,r)),positioner:(o=s._el,o instanceof Vo?Dr:o instanceof Zo?Rr:o instanceof ns?Tr:Or),rotation:He([n.rotation,0],i,r)*(Math.PI/180),size:Br(s._ctx,e,a),textAlign:He([n.textAlign,"start"],i,r),textShadowBlur:He([n.textShadowBlur,0],i,r),textShadowColor:He([n.textShadowColor,l],i,r),textStrokeColor:He([n.textStrokeColor,l],i,r),textStrokeWidth:He([n.textStrokeWidth,0],i,r)}},update:function(t){var e,n,i,o=this,s=null,r=null,a=o._index,l=o._config,c=He([l.display,!0],t,a);c&&(e=t.dataset.data[a],(i=J(n=it(st(l.formatter,[e,t]),e))?[]:function(t){var e,n=[];for(t=[].concat(t);t.length;)"string"==typeof(e=t.pop())?n.unshift.apply(n,e.split("\n")):Array.isArray(e)?t.push.apply(t,e):J(t)||n.unshift(""+e);return n}(n)).length&&(r=function(t){var e=t.borderWidth||0,n=t.padding,i=t.size.height,o=t.size.width,s=-o/2,r=-i/2;return{frame:{x:s-n.left-e,y:r-n.top-e,w:o+n.width+2*e,h:i+n.height+2*e},text:{x:s,y:r,w:o,h:i}}}(s=o._modelize(c,i,l,t)))),o._model=s,o._rects=r},geometry:function(){return this._rects?this._rects.frame:{}},rotation:function(){return this._model?this._model.rotation:0},visible:function(){return this._model&&this._model.opacity},model:function(){return this._model},draw:function(t,e){var n,i,o,s,r=t.ctx,a=this._model,l=this._rects;this.visible()&&(r.save(),a.clip&&(n=a.area,r.beginPath(),r.rect(n.left,n.top,n.right-n.left,n.bottom-n.top),r.clip()),r.globalAlpha=(i=0,o=a.opacity,s=1,Math.max(i,Math.min(o,s))),r.translate(Fr(e.x),Fr(e.y)),r.rotate(a.rotation),function(t,e,n){var i=n.backgroundColor,o=n.borderColor,s=n.borderWidth;(i||o&&s)&&(t.beginPath(),function(t,e,n,i,o,s){var r=Math.PI/2;if(s){var a=Math.min(s,o/2,i/2),l=e+a,c=n+a,h=e+i-a,d=n+o-a;t.moveTo(e,c),l<h&&c<d?(t.arc(l,c,a,-Math.PI,-r),t.arc(h,c,a,-r,0),t.arc(h,d,a,0,r),t.arc(l,d,a,r,Math.PI)):l<h?(t.moveTo(l,n),t.arc(h,c,a,-r,r),t.arc(l,c,a,r,Math.PI+r)):c<d?(t.arc(l,c,a,-Math.PI,0),t.arc(l,d,a,0,Math.PI)):t.arc(l,c,a,-Math.PI,Math.PI),t.closePath(),t.moveTo(e,n)}else t.rect(e,n,i,o)}(t,Fr(e.x)+s/2,Fr(e.y)+s/2,Fr(e.w)-s,Fr(e.h)-s,n.borderRadius),t.closePath(),i&&(t.fillStyle=i,t.fill()),o&&s&&(t.strokeStyle=o,t.lineWidth=s,t.lineJoin="miter",t.stroke()))}(r,l.frame,a),function(t,e,n,i){var o,s=i.textAlign,r=i.color,a=!!r,l=i.font,c=e.length,h=i.textStrokeColor,d=i.textStrokeWidth,u=h&&d;if(c&&(a||u))for(n=function(t,e,n){var i=n.lineHeight,o=t.w,s=t.x;return"center"===e?s+=o/2:"end"!==e&&"right"!==e||(s+=o),{h:i,w:o,x:s,y:t.y+i/2}}(n,s,l),t.font=l.string,t.textAlign=s,t.textBaseline="middle",t.shadowBlur=i.textShadowBlur,t.shadowColor=i.textShadowColor,a&&(t.fillStyle=r),u&&(t.lineJoin="round",t.lineWidth=d,t.strokeStyle=h),o=0,c=e.length;o<c;++o)zr(t,e[o],{stroked:u,filled:a,w:n.w,x:n.x,y:n.y+n.h*o})}(r,a.lines,l.text,a),r.restore())}});var Vr=Number.MIN_SAFE_INTEGER||-9007199254740991,Wr=Number.MAX_SAFE_INTEGER||9007199254740991;function Nr(t,e,n){var i=Math.cos(n),o=Math.sin(n),s=e.x,r=e.y;return{x:s+i*(t.x-s)-o*(t.y-r),y:r+o*(t.x-s)+i*(t.y-r)}}function jr(t,e){var n,i,o,s,r,a=Wr,l=Vr,c=e.origin;for(n=0;n<t.length;++n)o=(i=t[n]).x-c.x,s=i.y-c.y,r=e.vx*o+e.vy*s,a=Math.min(a,r),l=Math.max(l,r);return{min:a,max:l}}function Hr(t,e){var n=e.x-t.x,i=e.y-t.y,o=Math.sqrt(n*n+i*i);return{vx:(e.x-t.x)/o,vy:(e.y-t.y)/o,origin:t,ln:o}}var Yr=function(){this._rotation=0,this._rect={x:0,y:0,w:0,h:0}};function Ur(t,e,n){var i=e.positioner(t,e),o=i.vx,s=i.vy;if(!o&&!s)return{x:i.x,y:i.y};var r=n.w,a=n.h,l=e.rotation,c=Math.abs(r/2*Math.cos(l))+Math.abs(a/2*Math.sin(l)),h=Math.abs(r/2*Math.sin(l))+Math.abs(a/2*Math.cos(l)),d=1/Math.max(Math.abs(o),Math.abs(s));return c*=o*d,h*=s*d,c+=e.offset*o,h+=e.offset*s,{x:i.x+c,y:i.y+h}}dt(Yr.prototype,{center:function(){var t=this._rect;return{x:t.x+t.w/2,y:t.y+t.h/2}},update:function(t,e,n){this._rotation=n,this._rect={x:e.x+t.x,y:e.y+t.y,w:e.w,h:e.h}},contains:function(t){var e=this,n=e._rect;return!((t=Nr(t,e.center(),-e._rotation)).x<n.x-1||t.y<n.y-1||t.x>n.x+n.w+2||t.y>n.y+n.h+2)},intersects:function(t){var e,n,i,o=this._points(),s=t._points(),r=[Hr(o[0],o[1]),Hr(o[0],o[3])];for(this._rotation!==t._rotation&&r.push(Hr(s[0],s[1]),Hr(s[0],s[3])),e=0;e<r.length;++e)if(n=jr(o,r[e]),i=jr(s,r[e]),n.max<i.min||i.max<n.min)return!1;return!0},_points:function(){var t=this,e=t._rect,n=t._rotation,i=t.center();return[Nr({x:e.x,y:e.y},i,n),Nr({x:e.x+e.w,y:e.y},i,n),Nr({x:e.x+e.w,y:e.y+e.h},i,n),Nr({x:e.x,y:e.y+e.h},i,n)]}});var qr={prepare:function(t){var e,n,i,o,s,r=[];for(e=0,i=t.length;e<i;++e)for(n=0,o=t[e].length;n<o;++n)s=t[e][n],r.push(s),s.$layout={_box:new Yr,_hidable:!1,_visible:!0,_set:e,_idx:s._index};return r.sort((function(t,e){var n=t.$layout,i=e.$layout;return n._idx===i._idx?i._set-n._set:i._idx-n._idx})),this.update(r),r},update:function(t){var e,n,i,o,s,r=!1;for(e=0,n=t.length;e<n;++e)o=(i=t[e]).model(),(s=i.$layout)._hidable=o&&"auto"===o.display,s._visible=i.visible(),r|=s._hidable;r&&function(t){var e,n,i,o,s,r,a;for(e=0,n=t.length;e<n;++e)(o=(i=t[e]).$layout)._visible&&(a=new Proxy(i._el,{get:(t,e)=>t.getProps([e],!0)[e]}),s=i.geometry(),r=Ur(a,i.model(),s),o._box.update(r,s,i.rotation()));!function(t,e){var n,i,o,s;for(n=t.length-1;n>=0;--n)for(o=t[n].$layout,i=n-1;i>=0&&o._visible;--i)(s=t[i].$layout)._visible&&o._box.intersects(s._box)&&e(o,s)}(t,(function(t,e){var n=t._hidable,i=e._hidable;n&&i||i?e._visible=!1:n&&(t._visible=!1)}))}(t)},lookup:function(t,e){var n,i;for(n=t.length-1;n>=0;--n)if((i=t[n].$layout)&&i._visible&&i._box.contains(e))return t[n];return null},draw:function(t,e){var n,i,o,s,r,a;for(n=0,i=e.length;n<i;++n)(s=(o=e[n]).$layout)._visible&&(r=o.geometry(),a=Ur(o._el,o.model(),r),s._box.update(a,r,o.rotation()),o.draw(t,a))}},Xr="$datalabels",Gr="$default";function Zr(t,e,n,i){if(e){var o,s=n.$context,r=n.$groups;e[r._set]&&(o=e[r._set][r._key])&&!0===st(o,[s,i])&&(t[Xr]._dirty=!0,n.update(s))}}var Kr={id:"datalabels",defaults:{align:"center",anchor:"center",backgroundColor:null,borderColor:null,borderRadius:0,borderWidth:0,clamp:!1,clip:!1,color:void 0,display:!0,font:{family:void 0,lineHeight:1.2,size:void 0,style:void 0,weight:null},formatter:function(t){if(J(t))return null;var e,n,i,o=t;if(tt(t))if(J(t.label))if(J(t.r))for(o="",i=0,n=(e=Object.keys(t)).length;i<n;++i)o+=(0!==i?", ":"")+e[i]+": "+t[e[i]];else o=t.r;else o=t.label;return""+o},labels:void 0,listeners:{},offset:4,opacity:1,padding:{top:4,right:4,bottom:4,left:4},rotation:0,textAlign:"start",textStrokeColor:void 0,textStrokeWidth:0,textShadowBlur:0,textShadowColor:void 0},beforeInit:function(t){t[Xr]={_actives:[]}},beforeUpdate:function(t){var e=t[Xr];e._listened=!1,e._listeners={},e._datasets=[],e._labels=[]},afterDatasetUpdate:function(t,e,n){var i,o,s,r,a,l,c,h,d=e.index,u=t[Xr],g=u._datasets[d]=[],p=t.isDatasetVisible(d),f=t.data.datasets[d],m=function(t,e){var n,i,o,s=t.datalabels,r=[];return!1===s?null:(!0===s&&(s={}),e=dt({},[e,s]),i=e.labels||{},o=Object.keys(i),delete e.labels,o.length?o.forEach((function(t){i[t]&&r.push(dt({},[e,i[t],{_key:t}]))})):r.push(e),n=r.reduce((function(t,e){return rt(e.listeners||{},(function(n,i){t[i]=t[i]||{},t[i][e._key||Gr]=n})),delete e.listeners,t}),{}),{labels:r,listeners:n})}(f,n),b=e.meta.data||[],x=t.ctx;for(x.save(),i=0,s=b.length;i<s;++i)if((c=b[i])[Xr]=[],p&&c&&t.getDataVisibility(i)&&!c.skip)for(o=0,r=m.labels.length;o<r;++o)l=(a=m.labels[o])._key,(h=new $r(a,x,c,i)).$groups={_set:d,_key:l||Gr},h.$context={active:!1,chart:t,dataIndex:i,dataset:f,datasetIndex:d},h.update(h.$context),c[Xr].push(h),g.push(h);x.restore(),dt(u._listeners,m.listeners,{merger:function(t,n,i){n[t]=n[t]||{},n[t][e.index]=i[t],u._listened=!0}})},afterUpdate:function(t){t[Xr]._labels=qr.prepare(t[Xr]._datasets)},afterDatasetsDraw:function(t){qr.draw(t,t[Xr]._labels)},beforeEvent:function(t,e){if(t[Xr]._listened){var n=e.event;switch(n.type){case"mousemove":case"mouseout":!function(t,e){var n,i,o=t[Xr],s=o._listeners;if(s.enter||s.leave){if("mousemove"===e.type)i=qr.lookup(o._labels,e);else if("mouseout"!==e.type)return;n=o._hovered,o._hovered=i,function(t,e,n,i,o){var s,r;(n||i)&&(n?i?n!==i&&(r=s=!0):r=!0:s=!0,r&&Zr(t,e.leave,n,o),s&&Zr(t,e.enter,i,o))}(t,s,n,i,e)}}(t,n);break;case"click":!function(t,e){var n=t[Xr],i=n._listeners.click,o=i&&qr.lookup(n._labels,e);o&&Zr(t,i,o,e)}(t,n)}}},afterEvent:function(t){var e,n,i,o,s,r,a,l=t[Xr],c=function(t,e){var n,i,o,s,r=t.slice(),a=[];for(n=0,o=e.length;n<o;++n)s=e[n],-1===(i=r.indexOf(s))?a.push([s,1]):r.splice(i,1);for(n=0,o=r.length;n<o;++n)a.push([r[n],-1]);return a}(l._actives,l._actives=t.getActiveElements());for(e=0,n=c.length;e<n;++e)if((s=c[e])[1])for(i=0,o=(a=s[0].element[Xr]||[]).length;i<o;++i)(r=a[i]).$context.active=1===s[1],r.update(r.$context);(l._dirty||c.length)&&(qr.update(l._labels),t.render()),delete l._dirty}};function Jr(){let t=parseFloat(document.getElementById("purchasePrice").value)||0,e=parseFloat(document.getElementById("renoCosts").value)||0,n=parseFloat(document.getElementById("holdingCosts").value)||0,i=parseFloat(document.getElementById("afterRepairValue").value)||0,o=parseFloat(document.getElementById("desiredProfitMargin").value)||0,s=parseFloat(document.getElementById("houseinterestRate").value)||0,r=parseFloat(document.getElementById("loanPoints").value)||0,a=parseFloat(document.getElementById("houseLoanYear").value)||0,l=12*a,c=parseFloat(document.getElementById("gapCosts").value)||0,h=parseFloat(document.getElementById("downPaymentPercent").value)||0,d=i*(parseFloat(document.getElementById("resaleCosts").value)||0)/100,u=document.getElementById("propertyAddress").value,g=parseFloat(document.getElementById("projectMonths").value)||0,p=parseFloat(document.getElementById("houseMonthlyRent").value)||0,f=parseFloat(document.getElementById("propertyTaxesHF").value)||0,m=parseFloat(document.getElementById("insurance").value)||0,A=parseFloat(document.getElementById("houseAnnualMaintenance").value)||0,v=parseFloat(document.getElementById("houseAnnualUtilities").value)||0,_=document.getElementById("downPaymentType").value,w="purchaseAndReno"===_?t+e:t,C=parseFloat(document.getElementById("closingCosts").value)||0,E=w*h/100,M=s/100/12,k="purchaseAndReno"===_?t+e-E:t-E,B=A/12*g,S=v/12*g,I=k*r/100,P=f/12*g,D=m/12*g,R=a>0?k*M/(1-Math.pow(1+M,-l)):0,T=R*g,O=function(t,e,n,i){let o=0,s=t;for(let t=0;t<n;t++){const t=s*i;o+=t,s+=t-e}return o}(k,R,g,M),F=t+e+n+C+d+T+I+P+D+B+S-(k+E),L=F>0?F*c/100:0,z=t+e+n+C+T+I+L+P+D+B+S,$=E+("purchaseAndReno"!==_?e:0)+n+C+T+L+P+D+B+S+I,V=i-z-d,W=i>0?V/i*100:0,N=$>0?V/$*100:0,j=n+P+D+B+S+O+L,H=(.01*i-j/g).toFixed(2),Y=Number(H)>0&&V>0?(V/(12*Number(H))).toFixed(2):"N/A",U=g>0?(j/g).toFixed(2):0,q=V>0&&p>0?(V/p).toFixed(2):"N/A",X=((.8*W).toFixed(2),(.8*V).toFixed(2),(.9*V).toFixed(2),W>=o&&V>0?"YES":"NO"),G=i*(1-o/100)-(e+n+C+d+T+I+L+P+D+B+S);document.getElementById("totalInvestment").innerText=b(z),document.getElementById("netProfit").innerText=b(V),document.getElementById("totalCashInvested").innerText=b($),document.getElementById("profitMargin").innerText=x(W)+"%",document.getElementById("cashOnCashReturn").innerText=x(N)+"%",document.getElementById("breakEvenYears").innerText=Y,document.getElementById("rentalVsFlip").innerText="N/A"!==q?q>g?`Best to flip. ${q} rental months to match flip profit.`:`Best to rent. ${q} rental months to match flip profit.`:"N/A",document.getElementById("dealStatus").innerText=X,document.getElementById("monthlyHoldingCost").innerText=`${b(U)}`,document.getElementById("displayedAddress").innerText=u?`📍 ${u}`:"",Number(c)>0?document.getElementById("calculatedGapCost").innerText=b(L):document.getElementById("calculatedGapCost").innerText=b(0),document.getElementById("maxPurchasePrice").innerText=G>0?b(G):0;let Z=document.getElementById("netProfit"),K=document.querySelector(".netprocard"),J=document.querySelector(".netprocardhead");Z.style.color="black",J.style.color=V>0?"black":"#d0b870",K.style.background=0===V?"#ffffff":V>0?"#d0b870":"#f86d6d";let Q=document.getElementById("profitMargin"),tt=document.querySelector(".promarcard"),et=document.querySelector(".promarcardhead");Q.style.color="black",et.style.color=W>=o?"#d0b870":"black",tt.style.background=0===W?"#ffffff":W>=o?"#d0b870":"#f86d6d";let nt=document.getElementById("rentalVsFlip"),it=document.querySelector(".rvfcard"),ot=document.querySelector(".rvfcardhead");nt.style.color="black",ot.style.color="N/A"!==q&&q>g?"black":"#d0b870",it.style.background="N/A"===q?"#ffffff":"N/A"!==q&&q>g?"#d0b870":"#f86d6d";let st=document.querySelector(".dealCardd"),rt=document.querySelector(".dealCarddhead");document.getElementById("dealStatus").style.color="black",rt.style.color="YES"===X?"black":"#d0b870",st.style.background="YES"===X?"#d0b870":"#f86d6d",y("projectCostBreakdownChart"),y("arvDistributionChart"),function(t){const e=document.getElementById("projectCostBreakdownChart").getContext("2d"),n=[t.purchase,t.reno,t.holding+t.loanInterest+t.proratedTaxes+t.proratedInsurance,t.loanFees,t.resaleCosts,t.closing],i=n.reduce(((t,e)=>t+e),0);new Fo(e,{type:"doughnut",data:{labels:["Purchase","Renovation","Holding (incl. interest, taxes, insurance)","Loan Fees","Resale Costs","Closing Costs"],datasets:[{data:n,backgroundColor:["#F39655","#B77CE9","#55CBE5","#e74c3c","#1abc9c","#e67e22"],borderColor:"#ffffff",borderWidth:4,hoverOffset:20}]},options:{responsive:!0,cutout:"0%",plugins:{datalabels:{color:"#ffffff",font:{weight:"bold",size:14},formatter:(t,e)=>`${(t/i*100).toFixed(1)}%`,display:function(t){return t.dataset.data[t.dataIndex]/i*100>=5}},title:{display:!0,text:"Project Cost Breakdown",font:{size:20,weight:"bold",color:"#000000"}},legend:{position:"right",labels:{boxWidth:14,padding:16,font:{size:14,color:"#000000"}}},tooltip:{callbacks:{label:function(t){const e=t.parsed,n=(e/i*100).toFixed(2);return`${t.label}: $${e.toLocaleString()} (${n}%)`}}}}},plugins:[Kr]})}({purchase:t,reno:e,holding:n,loanInterest:O,loanFees:I,resaleCosts:d,closing:C,proratedTaxes:P,proratedInsurance:D}),function(t){const e=document.getElementById("arvDistributionChart").getContext("2d"),n=[t.investment,t.resaleCosts,t.netProfit],i=n.reduce(((t,e)=>t+e),0);new Fo(e,{type:"pie",data:{labels:["Total Investment","Resale Costs","Net Profit"],datasets:[{data:n,backgroundColor:["#2980b9","#f1c40f","#2ecc71"],borderColor:"#ffffff",borderWidth:4,hoverOffset:20}]},options:{responsive:!0,plugins:{title:{display:!0,text:"ARV Distribution",font:{size:20,weight:"bold"},color:"#000000"},legend:{position:"right",labels:{boxWidth:14,padding:16,font:{size:14,color:"#000000"}}},tooltip:{callbacks:{label:function(t){const e=t.parsed,n=(e/i*100).toFixed(2);return`${t.label}: $${e.toLocaleString()} (${n}%)`}}},datalabels:{color:"#ffffff",font:{weight:"bold",size:14},formatter:(t,e)=>`${(t/i*100).toFixed(1)}%`,display:function(t){return t.dataset.data[t.dataIndex]/i*100>=5}}}},plugins:[Kr]})}({investment:z,resaleCosts:d,netProfit:V})}let Qr;function ta(){let t=document.getElementById("currentAge"),e=document.getElementById("retirementAge"),n=document.getElementById("expectedLifespan"),i=document.getElementById("currentSavings"),o=document.getElementById("monthlyContributions"),s=document.getElementById("annualReturn"),r=document.getElementById("inflationRate"),a=document.getElementById("desiredIncome"),l=document.getElementById("realEstateAppreciation"),c=document.getElementById("mortgageBalance"),h=document.getElementById("wholeLifeInsurance"),d=document.getElementById("lifeInsuranceMonthlyContributions"),u=document.getElementById("mortgageTerm"),g=document.getElementById("mortgageInterestRate"),p=document.getElementById("currentStockValue"),f=document.getElementById("currentRealEstateEquity"),m=document.getElementById("stockGrowthRate"),x={currentAge:document.getElementById("errorCurrentAge"),retirementAge:document.getElementById("errorRetirementAge"),expectedLifespan:document.getElementById("errorExpectedLifespan"),currentSavings:document.getElementById("errorCurrentSavings"),monthlyContributions:document.getElementById("errorMonthlyContributions"),annualReturn:document.getElementById("errorAnnualReturn"),inflationRate:document.getElementById("errorInflationRate"),desiredIncome:document.getElementById("errorDesiredIncome"),currentStockValue:document.getElementById("errorCurrentStockValue"),currentRealEstateEquity:document.getElementById("errorCurrentRealEstateEquity"),realEstateAppreciation:document.getElementById("errorRealEstateAppreciation"),mortgageBalance:document.getElementById("errormortgageBalance"),wholeLifeInsurance:document.getElementById("errorwholeLifeInsurance"),lifeInsuranceMonthlyContributions:document.getElementById("errorLifeInsuranceMonthlyContributions"),mortgageTerm:document.getElementById("errorMortgageTerm"),mortgageInterestRate:document.getElementById("errorMortgageInterestRate"),stockGrowthRate:document.getElementById("errorStockGrowthRate")};Object.values(x).forEach((t=>t.innerText=""));let y=!0;function A(t,e,n){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1/0,s=parseFloat(t.value)||0;(s<i||s>o)&&(e.innerText=`${n} must be a valid number (${i} - ${o}).`,y=!1)}if(A(t,x.currentAge,"Current Age",18,100),A(e,x.retirementAge,"Retirement Age",18,100),A(n,x.expectedLifespan,"Expected Lifespan",parseInt(t.value,10)||18,120),A(i,x.currentSavings,"Current Savings",0),A(o,x.monthlyContributions,"Monthly Contributions",0),A(s,x.annualReturn,"Expected Annual Return (%)",0,100),A(r,x.inflationRate,"Inflation Rate (%)",0,100),A(a,x.desiredIncome,"Desired Retirement Income",0),A(p,x.currentStockValue,"Current Stock Value",0),A(f,x.currentRealEstateEquity,"Current Real Estate Equity",0),A(l,x.realEstateAppreciation,"Real Estate Appreciation (%)",0,100),A(c,x.mortgageBalance,"Mortgage Balance",0),A(h,x.wholeLifeInsurance,"Whole Life Insurance",0),A(d,x.lifeInsuranceMonthlyContributions,"Life Insurance Monthly Contributions",0),A(g,x.mortgageInterestRate,"Mortgage Interest Rate",0,100),A(m,x.stockGrowthRate,"Stock Growth Rate (%)",0,100),parseInt(t.value)>=parseInt(e.value)&&(x.retirementAge.innerText="Retirement age must be greater than current age.",y=!1),!y)return;let v=parseInt(e.value)-parseInt(t.value),_=(parseFloat(s.value)||0)/100/12,w=12*v,C=(parseFloat(i.value)||0)*Math.pow(1+(parseFloat(s.value)||0)/100,v),E=0!==_?(parseFloat(o.value)||0)*((Math.pow(1+_,w)-1)/_*(1+_)):0,M=(parseFloat(p.value)||0)*Math.pow(1.03,v),k=(parseFloat(l.value)||0)/100,B=parseFloat(c.value)||0,S=(parseFloat(f.value)||0)*Math.pow(1+k,v);isNaN(S)&&(S=0);let I=parseFloat(d.value)||0,P=0!==_?I*((Math.pow(1+_,w)-1)/_)*(1+_):0,D=(parseFloat(h.value)||0)*Math.pow(1+_,w)+P,R=(isNaN(C)?0:C)+(isNaN(E)?0:E)+(isNaN(M)?0:M)+(isNaN(S)?0:S)+D;const T=u/12;if(T<v){const t=v-T,e=0!==_?12*monthlyPayment*((Math.pow(1+_,12*t)-1)/_)*(1+_):0;R+=isNaN(e)?0:e}let O=(parseFloat(a.value)||0)*Math.pow(1+(parseFloat(r.value)||0)/100,v),F=[];m=m.value/100;for(let t=5;t<=v;t+=5){const e=(parseFloat(f.value)||0)*Math.pow(1+k,t),n=B,i=12*parseFloat(u.value||0),o=parseFloat(g.value||0)/100/12,r=n*(o*Math.pow(1+o,i))/(Math.pow(1+o,i)-1),a=Math.min(12*t,i),l=n*Math.pow(1+o,a)-r*(Math.pow(1+o,a)-1)/o,c=isNaN(e-l)?0:e-l;let d=0;if(12*t>i){const e=(12*t-i)/12;d=0!==_?12*r*((Math.pow(1+_,12*e)-1)/_)*(1+_):0}const b=0!==_?I*((Math.pow(1+_,12*t)-1)/_)*(1+_):0,x=(parseFloat(h.value)||0)*Math.pow(1+(parseFloat(s.value)||0)/100,t)+b;F.push({year:t,stockValue:(parseFloat(p.value)||0)*Math.pow(1+m,t),realEstateValue:c,insuranceValue:x,extraInvestmentValue:isNaN(d)?0:d})}let L=0,z=R,$=O;for(;z>0&&(L++,!(L>100));)z-=$,z*=1+(parseFloat(s.value)||0)/100,$*=1+(parseFloat(r.value)||0)/100;n=n.value;let V,W=n-parseInt(e.value),N=document.querySelector(".short");if(0===O||0===R?(V="",N.style.backgroundColor="#FFF",document.querySelector(".shortcap").style.color=""):L>=W?(V="Surplus (Funds last throughout retirement)",N.style.backgroundColor="#d0b870",document.querySelector(".shortcap").style.color="black"):(document.querySelector(".shortcap").style.color="#d0b870",V=`Funds wont last throughout the retirement years, short by ${W-L} years)`,N.style.backgroundColor="#f86d6d"),""!=s.value){document.getElementById("totalSavings").innerHTML=`${b(R)}`;let t=document.getElementById("totalSavings"),e=document.querySelector(".totalSavingsCard"),n=document.querySelector(".totalSavingshead");t.style.color="black",n.style.color="black",e.style.background="#d0b870"}if(document.getElementById("annualWithdrawal").innerHTML=`${b(O)}`,a.value&&r.value){let t=isNaN(L)?"N/A":L>100?"> 100":L;document.getElementById("yearsUntilDepletion").innerHTML=`${t}`}else document.getElementById("yearsUntilDepletion").innerHTML="";document.getElementById("shortfallSurplus").innerHTML=isNaN(L)?"N/A":V;let j=document.getElementById("projections");j.innerHTML='<h3 class="dynamicHead">Time-based Asset Projections:</h3>',F.forEach((t=>{const e=t.stockValue+t.realEstateValue+t.insuranceValue;j.innerHTML+=`\n        <p class="dynamicPara">In <strong>${t.year} years:</strong></p>\n        <ul>\n          <li class="dynamicList">Stock Value: ${b(t.stockValue)}</li>\n          <li class="dynamicList">Real Estate Value: ${b(t.realEstateValue)}</li>\n          <li class="dynamicList">Life Insurance Value: ${b(t.insuranceValue)}</li>\n          <li class="dynamicList"><strong>Total Value: ${b(e)}</strong></li>\n        </ul>`})),(M>0||S>0||D>0||E>0)&&(function(t,e,n,i){const o=document.getElementById("assetBreakdownChart").getContext("2d"),s=t+e+n+i,r={labels:["Stocks","Real Estate","Whole Life Insurance","Savings"],datasets:[{label:"Asset Distribution at Retirement",data:[t,e,n,i],backgroundColor:["#F39655","#B77CE9 ","#55CBE5 ","#e67e22"],borderColor:"#ffffff",borderWidth:4,hoverOffset:20}]};window.assetBreakdownChart instanceof Fo&&window.assetBreakdownChart.destroy(),window.assetBreakdownChart=new Fo(o,{type:"pie",data:r,options:{responsive:!0,plugins:{title:{display:!0,text:"Asset Allocation Breakdown at Retirement",font:{size:20,weight:"bold"},color:"#000000"},legend:{position:"right",labels:{boxWidth:14,padding:16,font:{size:14,color:"#000000"}}},tooltip:{callbacks:{label:function(t){const e=t.parsed,n=(e/s*100).toFixed(2);return`${t.label}: $${e.toLocaleString()} (${n}%)`}}},datalabels:{color:"#ffffff",font:{weight:"bold",size:14},formatter:(t,e)=>`${(t/s*100).toFixed(1)}%`,display:function(t){return t.dataset.data[t.dataIndex]/s*100>=5}}}},plugins:[Kr]})}(M,S,D,C+E),function(t,e,n,i){const o=document.getElementById("incomeSourceChart").getContext("2d"),s=[t,e,n,i],r=s.reduce(((t,e)=>t+e),0);Qr&&Qr.destroy(),Qr=new Fo(o,{type:"pie",data:{labels:["Contributions","Stock","Real Estate","Whole Life Insurance"],datasets:[{label:"Income Source Contribution at Retirement",data:s,backgroundColor:["#55CBE5","#e74c3c","#F39655","#B77CE9"],borderColor:"#ffffff",borderWidth:4,hoverOffset:20}]},options:{responsive:!0,plugins:{title:{display:!0,text:"Income Sources at Retirement",font:{size:20,weight:"bold"},color:"#000000"},legend:{position:"right",labels:{boxWidth:14,padding:16,font:{size:14,color:"#000000"}}},tooltip:{callbacks:{label:function(t){const e=t.parsed,n=(e/r*100).toFixed(2);return`${t.label}: $${e.toLocaleString()} (${n}%)`}}},datalabels:{color:"white",font:{weight:"bold",size:14},formatter:(t,e)=>{const n=t/r*100;return n>=5?`${n.toFixed(1)}%`:""}}},animation:{animateRotate:!0,animateScale:!0,duration:1500,easing:"easeOutBounce"}},plugins:[Kr]})}(E,M,S,D))}function ea(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=parseFloat(document.getElementById("propertyPrice").value.trim())||0,i=parseFloat(document.getElementById("downPayment").value.trim())||0,o=parseFloat(document.getElementById("loanTerm").value.trim())||0,s=parseFloat(document.getElementById("interestRate").value.trim())||0,r=parseFloat(document.getElementById("monthlyRent").value.trim())||0,a=parseFloat(document.getElementById("vacancyRate").value.trim())||0,l=parseFloat(document.getElementById("propertyTaxes").value.trim())||0,c=parseFloat(document.getElementById("insuranceCosts").value.trim())||0,h=parseFloat(document.getElementById("maintenanceCosts").value.trim())||0,d=parseFloat(document.getElementById("managementFees").value.trim())||0,u=parseFloat(document.getElementById("appreciationRate").value.trim())||3,g=parseFloat(document.getElementById("utilities").value.trim())||0,p=parseFloat(document.getElementById("renovations").value.trim())||0;if(!t||t<0)return;let f=n-i,m=s/100/12,b=12*o,x=m>0?f*(m*Math.pow(1+m,b))/(Math.pow(1+m,b)-1):f/b,y=(Math.pow(1+u/100,t),12*r*Math.pow(1.02,t)),A=y*(a/100),v=A+l+c+h+y*(d/100)+g+p,_=y-v,w=12*x;return e?{year:t,grossRentIncome:y,vacancyLoss:A,adjustedRentIncome:y-A,operatingExpenses:v,netOperatingIncome:_,annualMortgagePayment:w,capitalExpenditures:1425,cashFlow:_-w}:void 0}function na(){const t=parseInt(document.getElementById("years_tbl").value),e=document.getElementById("yearlyTables");e.innerHTML="";let n=[];n=t<=1?[0,1,2]:t>=30?[28,29,30]:[t-1,t,t+1];const i=n.map((t=>ea(t,!0))).filter(Boolean);if(i.length>0){const t=function(t){const e={"Property Taxes":parseFloat(document.getElementById("propertyTaxes").value)||0,Insurance:parseFloat(document.getElementById("insuranceCosts").value)||0,Maintenance:parseFloat(document.getElementById("maintenanceCosts").value)||0,Utilities:parseFloat(document.getElementById("utilities").value)||0,Renovations:parseFloat(document.getElementById("renovations").value)||0},n=document.createElement("div");n.classList.add("mb-5","table-design");let i=`\n      <h5>Fixed Annual Expenses</h5>\n      <table class="table table-bordered">\n        <thead class="clr-bg" style="background-color: #333333; color: white;">\n          <tr><th>Category</th><th>Amount</th></tr>\n        </thead>\n        <tbody>\n          ${Object.entries(e).map((t=>{let[e,n]=t;return`\n            <tr><td>${e}</td><td>$${n.toFixed(2)}</td></tr>\n          `})).join("")}\n        </tbody>\n      </table>\n    `,o=`\n      <h5>Yearly Financials: Years ${t.map((t=>t.year)).join(", ")}</h5>\n      <table class="table table-bordered">\n        <thead class="clr-bg" style="background-color: #333333; color: white;">\n          <tr>\n            <th>Category</th>\n            ${t.map((t=>`<th>Year ${t.year}</th>`)).join("")}\n          </tr>\n        </thead>\n        <tbody>\n    `;return["Gross Rent","Vacancy","Operating Income","Operating Expenses","Management Fees","Vacancy Loss","Net Operating Income (NOI)","Loan Payments","Capital Expenditures","Cash Flow"].forEach((e=>{o+=`<tr><td>${e}</td>`,t.forEach((t=>{let n=0;switch(e){case"Gross Rent":n=t.grossRentIncome;break;case"Vacancy":case"Vacancy Loss":n=t.vacancyLoss;break;case"Operating Income":n=t.adjustedRentIncome;break;case"Operating Expenses":n=t.operatingExpenses;break;case"Management Fees":n=t.adjustedRentIncome*(parseFloat(document.getElementById("managementFees").value)||0)/100;break;case"Net Operating Income (NOI)":n=t.netOperatingIncome;break;case"Loan Payments":n=-t.annualMortgagePayment;break;case"Capital Expenditures":n=-t.capitalExpenditures;break;case"Cash Flow":n=t.cashFlow}o+=`<td>$${n.toFixed(2)}</td>`})),o+="</tr>"})),o+="</tbody></table>",n.innerHTML=o+i,n}(i);e.appendChild(t)}}function ia(){let t=parseFloat(document.getElementById("propertyPrice").value.trim())||0,e=parseFloat(document.getElementById("initialRenovations").value.trim())||0,n=parseFloat(document.getElementById("downPayment").value.trim())||0,i=n/100*t,o=parseFloat(document.getElementById("loanTerm").value.trim())||0,s=parseFloat(document.getElementById("interestRate").value.trim())||0,r=parseFloat(document.getElementById("monthlyRent").value.trim())||0,a=parseFloat(document.getElementById("vacancyRate").value.trim())||0,l=parseFloat(document.getElementById("propertyTaxes").value.trim())||0,c=parseFloat(document.getElementById("insuranceCosts").value.trim())||0,h=parseFloat(document.getElementById("maintenanceCosts").value.trim())||0,d=parseFloat(document.getElementById("managementFees").value.trim())||0,u=parseFloat(document.getElementById("utilities").value.trim())||0,g=parseFloat(document.getElementById("renovations").value.trim())||0,p=parseFloat(document.getElementById("rentGrowth").value.trim())||0,f=parseFloat(document.getElementById("closingCostsRent").value.trim())||0,m=f/100*t,y=parseInt(document.getElementById("timeDuration").value.trim())||10,A=(parseFloat(document.getElementById("appreciationRate").value.trim()),{propertyPrice:document.getElementById("errorPropertyPrice"),initialRenovations:document.getElementById("errorInitialRenovations"),downPayment:document.getElementById("errorDownPaymentPer"),loanTerm:document.getElementById("errorLoanTerm"),interestRate:document.getElementById("errorInterestRate"),monthlyRent:document.getElementById("errorMonthlyRent"),vacancyRate:document.getElementById("errorVacancyRate"),propertyTaxes:document.getElementById("errorPropertyTaxes"),insuranceCosts:document.getElementById("errorInsuranceCosts"),maintenanceCosts:document.getElementById("errorMaintenanceCosts"),managementFees:document.getElementById("errorManagementFees"),utilities:document.getElementById("errorUtilities"),renovations:document.getElementById("errorRenovations"),rentGrowth:document.getElementById("errorRentGrowth"),closingCosts:document.getElementById("errorClosingCostsRent")});Object.values(A).forEach((t=>t.innerText=""));let v=!0;function _(t,e,n){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1/0;"Down Payment (%)"==n&&(t<i||t>o)?e.innerText=`${n} must be less than 100 .`:"Loan Term (Years)"==n&&(t<i||t>o)?e.innerText=`${n} must be less than 30 .`:(t<i||t>o)&&(e.innerText=`${n} must be greater than ${i} .`,v=!1)}if(_(t,A.propertyPrice,"Property Price",1e3),_(n,A.downPayment,"Down Payment (%)",0,100),_(o,A.loanTerm,"Loan Term (Years)",1,30),_(s,A.interestRate,"Interest Rate (%)",0,100),_(r,A.monthlyRent,"Monthly Rent",0),_(a,A.vacancyRate,"Vacancy Rate (%)",0,100),_(l,A.propertyTaxes,"Annual Property Taxes",0),_(c,A.insuranceCosts,"Annual Insurance Costs",0),_(h,A.maintenanceCosts,"Annual Maintenance Costs",0),_(d,A.managementFees,"Management Fees (%)",0,100),_(u,A.utilities,"Utilities",0),_(g,A.renovations,"Renovations",0),_(p,A.rentGrowth,"Rent Growth (%)",0,100),_(f,A.closingCosts,"Closing Costs (%)",0,100),_(e,A.initialRenovations,"Initial Renovations",0),!v)return;let w=t-i,C=s/100/12,E=12*o,M=C>0?w*(C*Math.pow(1+C,E))/(Math.pow(1+C,E)-1):o>0?w/E:0,k=12*r,B=k-k*(a/100),S=l+c+h+B*(d/100)+u+g,I=B-S,P=12*M,D=I-P,R=D/12,T=I/t*100,O=i+m+e,F=O>0?D/O*100:0,L=P>0?I/P:0,z=[],$=[],V=M+l/12+c/12+h/12+B*(d/100)/12+u/12+g/12;for(let t=0;t<y;t++){let e=12*r*Math.pow(1+p/100,t),n=e-e*(a/100);z.push(e),$.push(n)}document.getElementById("loanAmount").innerText=b(w),document.getElementById("mortgagePayment").innerText=b(V),document.getElementById("noi").innerText=b(I),document.getElementById("cashFlow").innerText=b(R),document.getElementById("capRate").innerText=x(T)+"%",document.getElementById("cocReturn").innerText=x(F)+"%",document.getElementById("annualCashFlow").innerText=b(D),document.getElementById("cashInvestedRent").innerText=b(O),document.getElementById("debtServiceRatio").innerText=L.toFixed(2);let W=document.getElementById("debtcard");L>1.2?(W.style.backgroundColor="#d0b870",document.querySelector(".dssr").style.color="black"):W.style.backgroundColor="rgb(248, 109, 109)",function(t,e,n){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;const o=document.getElementById("portfolioPieChart").getContext("2d");window.portfolioPieChart instanceof Fo&&window.portfolioPieChart.destroy();const s=n*i,r=["Income","Expenses"],a=[t*i,e*i],l=["#B77CE9","#55CBE5"],c=s>=0?"Profit":"Loss",h=Math.abs(s),d=s>=0?"#3B8D21":"#F39655";r.push(c),a.push(h),l.push(d);const u=a.reduce(((t,e)=>t+e),0);window.portfolioPieChart=new Fo(o,{type:"pie",data:{labels:r,datasets:[{data:a,backgroundColor:l,borderColor:"#fff",borderWidth:2,hoverOffset:12}]},options:{responsive:!0,plugins:{legend:{position:"bottom",labels:{color:"black",font:{size:14,family:"Arial, sans-serif"},padding:15}},title:{display:!0,text:`Portfolio Composition (Over ${i} Year${i>1?"s":""})`,font:{size:20,weight:"bold",family:"Arial, sans-serif"},color:"#333",padding:{top:10,bottom:20}},tooltip:{callbacks:{label:function(t){const e=parseFloat(t.raw),n=(e/u*100).toFixed(1);return`${t.label}: $${e.toFixed(2)} (${n}%)`},afterBody:function(){return`Total: $${u.toFixed(2)}`}}},datalabels:{color:"white",font:{size:14,weight:"bold"},formatter:(t,e)=>{const n=(t/e.chart.data.datasets[0].data.reduce(((t,e)=>t+e),0)*100).toFixed(1);return n>=5?`${n}%`:""}}}},plugins:[Kr]})}(B,S,D,y),function(t,e,n){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;const o=document.getElementById("cashFlowPieChart").getContext("2d");window.cashFlowPieChart instanceof Fo&&window.cashFlowPieChart.destroy();const s=n*i,r=["Mortgage Payments","Operating Expenses"],a=[t*i,e*i],l=["#55CBE5","#F39655"],c=s>=0?"Net Profit":"Net Loss",h=s>=0?"#4CAF50":"#FF5722";r.push(c),a.push(Math.abs(s)),l.push(h);const d=a.reduce(((t,e)=>t+e),0);window.cashFlowPieChart=new Fo(o,{type:"pie",data:{labels:r,datasets:[{label:"Cash Flow Breakdown",data:a.map((t=>t.toFixed(2))),backgroundColor:l,hoverOffset:15,borderWidth:3,borderColor:"#fff"}]},options:{responsive:!0,interaction:{mode:"nearest",intersect:!1},plugins:{title:{display:!0,text:`Cash Flow Breakdown (Over ${i} Year${i>1?"s":""})`,font:{size:22,weight:"bold"},color:"#333"},tooltip:{enabled:!0,mode:"index",intersect:!1,backgroundColor:"rgba(0, 0, 0, 0.9)",titleFont:{size:20,weight:"bold"},bodyFont:{size:16},padding:14,boxPadding:6,borderColor:"#fff",borderWidth:1,callbacks:{label:function(t){const e=t.label||"",n=parseFloat(t.raw),i=(n/d*100).toFixed(2);return`${e}: $${n.toFixed(2)} (${i}%)`},afterBody:function(){return`Total: $${d.toFixed(2)}`}}},legend:{display:!0,labels:{font:{size:16},boxWidth:25,usePointStyle:!0,padding:20}},datalabels:{color:"white",font:{size:14,weight:"bold"},formatter:(t,e)=>{const n=(t/e.chart.data.datasets[0].data.reduce(((t,e)=>parseFloat(t)+parseFloat(e)),0)*100).toFixed(1);return n>=5?`${n}%`:""}},animation:{animateRotate:!0,animateScale:!0,duration:1500,easing:"easeOutBounce"}}},plugins:[Kr]})}(P,S,D,y),ea(parseFloat(document.getElementById("years_tbl").value.trim())||1,!0),na()}Fo.register(...Mr),Fo.register(...Mr),Fo.register(...Mr),Fo.register(...Mr),Fo.register(...Mr),Fo.register(...Mr),document.addEventListener("DOMContentLoaded",(function(){const t=document.querySelectorAll("#purchasePrice,#propertyAddress, #renoCosts, #holdingCosts, #desiredProfitMargin, #closingCosts, #afterRepairValue,#projectMonths,#resaleCosts,#downPaymentPercent,#gapCosts,#loanPoints,#houseLoanYear,#houseinterestRate,#houseMonthlyRent,#insurance,#propertyTaxesHF,#downPaymentType,#houseAnnualMaintenance,#houseAnnualUtilities"),e=document.querySelectorAll("#currentAge, #retirementAge, #expectedLifespan, #currentSavings,#lifeInsuranceMonthlyContributions,#wholeLifeInsurance, #monthlyContributions, #annualReturn,#desiredIncome,#inflationRate,#currentRealEstateEquity,#currentStockValue, #stockGrowthRate, #realEstateAppreciation,#mortgageBalance , #mortgageInterestRate , #mortgageTerm"),n=document.querySelectorAll("#managementFees, #maintenanceCosts, #insuranceCosts,#renovations,#utilities,#rentGrowth,#closingCostsRent, #propertyTaxes, #vacancyRate,#monthlyRent,#interestRate,#loanTerm,#downPayment,#propertyPrice,#timeDuration , #appreciationRate, #initialRenovations ");t.forEach((t=>{t.addEventListener("input",Jr)})),e.forEach((t=>{t.addEventListener("input",ta)})),n.forEach((t=>{t.addEventListener("input",ia)})),document.getElementById("download-pdf").addEventListener("click",(()=>{if(window.jspdf&&"undefined"!=typeof html2canvas){const{jsPDF:t}=window.jspdf,e=new t;function n(t){const e=document.getElementById(t);return e&&e.value?e.value:"N/A"}const i=document.createElement("div");i.id="combinedContent",i.style.padding="20px",i.style.backgroundColor="#fff",i.style.color="#000",i.style.width="800px",i.style.margin="auto";const o=document.getElementById("contentPDF");i.appendChild(o.cloneNode(!0));const s=document.createElement("div");s.innerHTML=`\n            <h2 style="text-align:center; margin-top: 20px;">Inputs</h2>\n            <table border="1" cellspacing="0" cellpadding="5" style="width:100%; text-align:left;">\n              <tr><td><strong>Property Address:</strong></td><td>$${n("propertyAddress")}</td></tr>\n              <tr><td><strong>Property Purchase Price:</strong></td><td>$${n("purchasePrice")}</td></tr>\n              <tr><td><strong>Renovation Costs:</strong></td><td>$${n("renoCosts")}</td></tr>\n              <tr><td><strong>Closing Costs:</strong></td><td>${n("closingCosts")}%</td></tr>\n              <tr><td><strong>Holding Costs:</strong></td><td>$${n("holdingCosts")}</td></tr>\n              <tr><td><strong>After Repair Value:</strong></td><td>$${n("afterRepairValue")}</td></tr>\n              <tr><td><strong>Project Months:</strong></td><td>${n("projectMonths")} Months</td></tr>\n              <tr><td><strong>House Monthly Rent:</strong></td><td>$${n("houseMonthlyRent")}</td></tr>\n              <tr><td><strong>House Interest Rate:</strong></td><td>${n("houseinterestRate")}%</td></tr>\n              <tr><td><strong>Loan Points:</strong></td><td>${n("loanPoints")}%</td></tr>\n              <tr><td><strong>Loan Term:</strong></td><td>${n("houseLoanYear")} Years</td></tr>\n              <tr><td><strong>Gap Costs:</strong></td><td>$${n("gapCosts")}</td></tr>\n              <tr><td><strong>Down Payment Percent:</strong></td><td>${n("downPaymentPercent")}%</td></tr>\n              <tr><td><strong>Resale Costs:</strong></td><td>$${n("resaleCosts")}</td></tr>\n              <tr><td><strong>Desired Profit Margin:</strong></td><td>${n("desiredProfitMargin")}%</td></tr>\n              <tr><td><strong>Down Payment Based On:</strong></td><td>$${n("downPaymentType")}</td></tr>\n              <tr><td><strong>Annual Maintenance:</strong></td><td>$${n("houseAnnualMaintenance")}</td></tr>\n              <tr><td><strong>Annual Utilities:</strong></td><td>$${n("houseAnnualUtilities")}</td></tr>\n              <tr><td><strong>Annual Insurance:</strong></td><td>$${n("insurance")}</td></tr>\n              <tr><td><strong>Annual Property Taxes:</strong></td><td>$${n("propertyTaxesHF")}</td></tr>\n            </table>\n          `,i.appendChild(s),document.body.appendChild(i),html2canvas(i,{scale:2,useCORS:!0}).then((t=>{const n=e.internal.pageSize.height;let o=190*t.height/t.width,s=o,r=10;const a=t.toDataURL("image/png");for(e.addImage(a,"PNG",10,r,190,o),s-=n-20;s>0;)r=s-o,e.addPage(),e.addImage(a,"PNG",10,r,190,o),s-=n-20;e.save("house_flipping_analysis.pdf"),i.remove()})).catch((t=>{console.error("Error capturing HTML content:",t)}))}else console.error("jsPDF or html2canvas not loaded correctly.")})),document.getElementById("download-pdf2").addEventListener("click",(function(){if(window.jspdf&&"undefined"!=typeof html2canvas){const{jsPDF:t}=window.jspdf,e=new t;function n(t){const e=document.getElementById(t);return e&&e.value?e.value:"N/A"}const i=document.createElement("div");i.id="combinedContent",i.style.padding="20px",i.style.backgroundColor="#fff",i.style.color="#000",i.style.width="800px",i.style.margin="auto";const o=document.getElementById("contentPDF2");i.appendChild(o.cloneNode(!0));const s=document.createElement("div");s.innerHTML=`\n            <h2 style="text-align:center; margin-top: 20px;">Retirement Planning Inputs</h2>\n            <table border="1" cellspacing="0" cellpadding="5" style="width:100%; text-align:left;">\n              <tr><td><strong>Current Age:</strong></td><td>${n("currentAge")}</td></tr>\n              <tr><td><strong>Retirement Age:</strong></td><td>${n("retirementAge")}</td></tr>\n              <tr><td><strong>Current Savings:</strong></td><td>$${n("currentSavings")}</td></tr>\n              <tr><td><strong>Monthly Contributions:</strong></td><td>$${n("monthlyContributions")}</td></tr>\n              <tr><td><strong>Annual Return:</strong></td><td>${n("annualReturn")}%</td></tr>\n              <tr><td><strong>Inflation Rate:</strong></td><td>${n("inflationRate")}%</td></tr>\n              <tr><td><strong>Desired Income:</strong></td><td>$${n("desiredIncome")}</td></tr>\n              <tr><td><strong>Whole Life Insurance Value:</strong></td><td>$${n("wholeLifeInsurance")}</td></tr>\n              <tr><td><strong>Monthly Contributions to Whole Life Insurance:</strong></td><td>$${n("lifeInsuranceMonthlyContributions")}</td></tr>\n              <tr><td><strong>Current Stock Value:</strong></td><td>$${n("currentStockValue")}</td></tr>\n              <tr><td><strong>Current Real Estate Equity:</strong></td><td>$${n("currentRealEstateEquity")}</td></tr>\n              <tr><td><strong>Current Mortgage Balance:</strong></td><td>$${n("mortgageBalance")}</td></tr>\n              <tr><td><strong>Mortgage Term (Years):</strong></td><td>$${n("mortgageTerm")}</td></tr>\n              <tr><td><strong>Mortgage Interest Rate (%):</strong></td><td>$${n("mortgageInterestRate")}</td></tr>\n            </table>\n          `,i.appendChild(s),document.body.appendChild(i),html2canvas(i,{scale:2,useCORS:!0}).then((t=>{const n=e.internal.pageSize.height;let o=190*t.height/t.width,s=o,r=10;const a=t.toDataURL("image/png");for(e.addImage(a,"PNG",10,r,190,o),s-=n-20;s>0;)r=s-o,e.addPage(),e.addImage(a,"PNG",10,r,190,o),s-=n-20;e.save("retirement_planning_calculator.pdf"),i.remove()})).catch((t=>{console.error("Error capturing HTML content:",t)}))}else console.error("jsPDF or html2canvas not loaded correctly.")})),document.getElementById("download-pdf3").addEventListener("click",(function(){if(window.jspdf&&"undefined"!=typeof html2canvas){const{jsPDF:t}=window.jspdf,e=new t;function n(t){const e=document.getElementById(t);return e&&e.value?e.value:"N/A"}const i=document.getElementById("contentPDF3");html2canvas(i,{scale:2,useCORS:!0}).then((t=>{const i=e.internal.pageSize.height;let o=190*t.height/t.width,s=o,r=10;const a=t.toDataURL("image/png");for(e.addImage(a,"PNG",10,r,190,o),s-=i-20;s>0;)r=s-o,e.addPage(),e.addImage(a,"PNG",10,r,190,o),s-=i-20;e.addPage();const l=document.createElement("div");l.style.padding="20px",l.style.backgroundColor="#fff",l.style.color="#000",l.style.width="800px",l.style.margin="auto",l.innerHTML=`\n          <h2 style="text-align:center; margin-top: 20px;">Rental Property Inputs</h2>\n          <table border="1" cellspacing="0" cellpadding="5" style="width:100%; text-align:left;">\n            <tr><td><strong>Property Price:</strong></td><td>$${n("propertyPrice")}</td></tr>\n            <tr><td><strong>Down Payment:</strong></td><td>$${n("downPayment")}</td></tr>\n            <tr><td><strong>Loan Term:</strong></td><td>${n("loanTerm")} Years</td></tr>\n            <tr><td><strong>Interest Rate:</strong></td><td>${n("interestRate")}%</td></tr>\n            <tr><td><strong>Monthly Rent:</strong></td><td>$${n("monthlyRent")}</td></tr>\n            <tr><td><strong>Vacancy Rate:</strong></td><td>${n("vacancyRate")}%</td></tr>\n            <tr><td><strong>Closing Cost:</strong></td><td>${n("closingCostsRent")}%</td></tr>\n            <tr><td><strong>Property Taxes:</strong></td><td>$${n("propertyTaxes")}</td></tr>\n            <tr><td><strong>Annual Renovations:</strong></td><td>$${n("renovations")}</td></tr>\n            <tr><td><strong>Annual Utilities:</strong></td><td>$${n("utilities")}</td></tr>\n            <tr><td><strong>Insurance Costs:</strong></td><td>$${n("insuranceCosts")}</td></tr>\n            <tr><td><strong>Maintenance Costs:</strong></td><td>$${n("maintenanceCosts")}</td></tr>\n            <tr><td><strong>Management Fees:</strong></td><td>$${n("managementFees")}</td></tr>\n            <tr><td><strong>Property Appreciation Rate:</strong></td><td>${n("appreciationRate")}%</td></tr>\n            <tr><td><strong>Annual Rent Growth:</strong></td><td>${n("rentGrowth")}%</td></tr>\n          </table>\n        `,document.body.appendChild(l),html2canvas(l,{scale:2,useCORS:!0}).then((t=>{const n=t.toDataURL("image/png"),o=190*t.height/t.width;let s=o;for(;s>0;)e.addImage(n,"PNG",10,10,190,o),s-=i-20,s>0&&e.addPage();e.save("rental_property_evaluation.pdf"),l.remove()}))})).catch((t=>{console.error("Error capturing HTML content:",t)}))}else console.error("jsPDF or html2canvas not loaded correctly.")}));const i=document.getElementById("years_tbl");i&&i.addEventListener("change",na),Jr(),ta(),ia(),function(){const t=document.getElementById("years_tbl");t.innerHTML="";for(let e=1;e<=30;e++){const n=document.createElement("option");n.value=e,n.textContent=`${e} ${1===e?"Year":"Years"}`,1===e&&(n.selected=!0),t.appendChild(n)}}()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,