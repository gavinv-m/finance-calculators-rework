/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";function t(t){let e=t%1==0?Math.abs(t).toLocaleString():Math.abs(t).toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2});return t<0?`- $${e}`:`$${e}`}function e(t){return t%1==0?t.toLocaleString():t.toLocaleString(void 0,{minimumFractionDigits:2,maximumFractionDigits:2})}function i(t){document.getElementById(t).parentNode.innerHTML=`<canvas id="${t}"></canvas>`}function n(t){return t+.5|0}const s=(t,e,i)=>Math.max(Math.min(t,i),e);function o(t){return s(n(2.55*t),0,255)}function a(t){return s(n(255*t),0,255)}function r(t){return s(n(t/2.55)/100,0,1)}function l(t){return s(n(100*t),0,100)}const h={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},c=[..."0123456789ABCDEF"],d=t=>c[15&t],u=t=>c[(240&t)>>4]+c[15&t],g=t=>(240&t)>>4==(15&t);const f=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function p(t,e,i){const n=e*Math.min(i,1-i),s=(e,s=(e+t/30)%12)=>i-n*Math.max(Math.min(s-3,9-s,1),-1);return[s(0),s(8),s(4)]}function m(t,e,i){const n=(n,s=(n+t/60)%6)=>i-i*e*Math.max(Math.min(s,4-s,1),0);return[n(5),n(3),n(1)]}function b(t,e,i){const n=p(t,1,.5);let s;for(e+i>1&&(s=1/(e+i),e*=s,i*=s),s=0;s<3;s++)n[s]*=1-e-i,n[s]+=e;return n}function x(t){const e=t.r/255,i=t.g/255,n=t.b/255,s=Math.max(e,i,n),o=Math.min(e,i,n),a=(s+o)/2;let r,l,h;return s!==o&&(h=s-o,l=a>.5?h/(2-s-o):h/(s+o),r=function(t,e,i,n,s){return t===s?(e-i)/n+(e<i?6:0):e===s?(i-t)/n+2:(t-e)/n+4}(e,i,n,h,s),r=60*r+.5),[0|r,l||0,a]}function y(t,e,i,n){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,n)).map(a)}function _(t,e,i){return y(p,t,e,i)}function v(t){return(t%360+360)%360}const w={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},M={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let k;const C=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,S=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,P=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function E(t,e,i){if(t){let n=x(t);n[e]=Math.max(0,Math.min(n[e]+n[e]*i,0===e?360:1)),n=_(n),t.r=n[0],t.g=n[1],t.b=n[2]}}function I(t,e){return t?Object.assign(e||{},t):t}function D(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=a(t[3]))):(e=I(t,{r:0,g:0,b:0,a:1})).a=a(e.a),e}function R(t){return"r"===t.charAt(0)?function(t){const e=C.exec(t);let i,n,a,r=255;if(e){if(e[7]!==i){const t=+e[7];r=e[8]?o(t):s(255*t,0,255)}return i=+e[1],n=+e[3],a=+e[5],i=255&(e[2]?o(i):s(i,0,255)),n=255&(e[4]?o(n):s(n,0,255)),a=255&(e[6]?o(a):s(a,0,255)),{r:i,g:n,b:a,a:r}}}(t):function(t){const e=f.exec(t);let i,n=255;if(!e)return;e[5]!==i&&(n=e[6]?o(+e[5]):a(+e[5]));const s=v(+e[2]),r=+e[3]/100,l=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return y(b,t,e,i)}(s,r,l):"hsv"===e[1]?function(t,e,i){return y(m,t,e,i)}(s,r,l):_(s,r,l),{r:i[0],g:i[1],b:i[2],a:n}}(t)}class A{constructor(t){if(t instanceof A)return t;const e=typeof t;let i;var n,s,o;"object"===e?i=D(t):"string"===e&&(o=(n=t).length,"#"===n[0]&&(4===o||5===o?s={r:255&17*h[n[1]],g:255&17*h[n[2]],b:255&17*h[n[3]],a:5===o?17*h[n[4]]:255}:7!==o&&9!==o||(s={r:h[n[1]]<<4|h[n[2]],g:h[n[3]]<<4|h[n[4]],b:h[n[5]]<<4|h[n[6]],a:9===o?h[n[7]]<<4|h[n[8]]:255})),i=s||function(t){k||(k=function(){const t={},e=Object.keys(M),i=Object.keys(w);let n,s,o,a,r;for(n=0;n<e.length;n++){for(a=r=e[n],s=0;s<i.length;s++)o=i[s],r=r.replace(o,w[o]);o=parseInt(M[a],16),t[r]=[o>>16&255,o>>8&255,255&o]}return t}(),k.transparent=[0,0,0,0]);const e=k[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||R(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=I(this._rgb);return t&&(t.a=r(t.a)),t}set rgb(t){this._rgb=D(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${r(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):void 0;var t}hexString(){return this._valid?(t=this._rgb,e=(t=>g(t.r)&&g(t.g)&&g(t.b)&&g(t.a))(t)?d:u,t?"#"+e(t.r)+e(t.g)+e(t.b)+((t,e)=>t<255?e(t):"")(t.a,e):void 0):void 0;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=x(t),i=e[0],n=l(e[1]),s=l(e[2]);return t.a<255?`hsla(${i}, ${n}%, ${s}%, ${r(t.a)})`:`hsl(${i}, ${n}%, ${s}%)`}(this._rgb):void 0}mix(t,e){if(t){const i=this.rgb,n=t.rgb;let s;const o=e===s?.5:e,a=2*o-1,r=i.a-n.a,l=((a*r==-1?a:(a+r)/(1+a*r))+1)/2;s=1-l,i.r=255&l*i.r+s*n.r+.5,i.g=255&l*i.g+s*n.g+.5,i.b=255&l*i.b+s*n.b+.5,i.a=o*i.a+(1-o)*n.a,this.rgb=i}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,i){const n=P(r(t.r)),s=P(r(t.g)),o=P(r(t.b));return{r:a(S(n+i*(P(r(e.r))-n))),g:a(S(s+i*(P(r(e.g))-s))),b:a(S(o+i*(P(r(e.b))-o))),a:t.a+i*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new A(this.rgb)}alpha(t){return this._rgb.a=a(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=n(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return E(this._rgb,2,t),this}darken(t){return E(this._rgb,2,-t),this}saturate(t){return E(this._rgb,1,t),this}desaturate(t){return E(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=x(t);i[0]=v(i[0]+e),i=_(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}function T(){}const F=(()=>{let t=0;return()=>t++})();function O(t){return null==t}function L(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function B(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}function z(t){return("number"==typeof t||t instanceof Number)&&isFinite(+t)}function $(t,e){return z(t)?t:e}function V(t,e){return void 0===t?e:t}const N=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function W(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function H(t,e,i,n){let s,o,a;if(L(t))if(o=t.length,n)for(s=o-1;s>=0;s--)e.call(i,t[s],s);else for(s=0;s<o;s++)e.call(i,t[s],s);else if(B(t))for(a=Object.keys(t),o=a.length,s=0;s<o;s++)e.call(i,t[a[s]],a[s])}function j(t,e){let i,n,s,o;if(!t||!e||t.length!==e.length)return!1;for(i=0,n=t.length;i<n;++i)if(s=t[i],o=e[i],s.datasetIndex!==o.datasetIndex||s.index!==o.index)return!1;return!0}function Y(t){if(L(t))return t.map(Y);if(B(t)){const e=Object.create(null),i=Object.keys(t),n=i.length;let s=0;for(;s<n;++s)e[i[s]]=Y(t[i[s]]);return e}return t}function U(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function q(t,e,i,n){if(!U(t))return;const s=e[t],o=i[t];B(s)&&B(o)?X(s,o,n):e[t]=Y(o)}function X(t,e,i){const n=L(e)?e:[e],s=n.length;if(!B(t))return t;const o=(i=i||{}).merger||q;let a;for(let e=0;e<s;++e){if(a=n[e],!B(a))continue;const s=Object.keys(a);for(let e=0,n=s.length;e<n;++e)o(s[e],t,a,i)}return t}function G(t,e){return X(t,e,{merger:K})}function K(t,e,i){if(!U(t))return;const n=e[t],s=i[t];B(n)&&B(s)?G(n,s):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=Y(s))}const Z={"":t=>t,x:t=>t.x,y:t=>t.y};function J(t,e){const i=Z[e]||(Z[e]=function(t){const e=function(t){const e=t.split("."),i=[];let n="";for(const t of e)n+=t,n.endsWith("\\")?n=n.slice(0,-1)+".":(i.push(n),n="");return i}(t);return t=>{for(const i of e){if(""===i)break;t=t&&t[i]}return t}}(e));return i(t)}function Q(t){return t.charAt(0).toUpperCase()+t.slice(1)}const tt=t=>void 0!==t,et=t=>"function"==typeof t,it=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0},nt=Math.PI,st=2*nt,ot=st+nt,at=Number.POSITIVE_INFINITY,rt=nt/180,lt=nt/2,ht=nt/4,ct=2*nt/3,dt=Math.log10,ut=Math.sign;function gt(t,e,i){return Math.abs(t-e)<i}function ft(t){const e=Math.round(t);t=gt(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(dt(t))),n=t/i;return(n<=1?1:n<=2?2:n<=5?5:10)*i}function pt(t){return!function(t){return"symbol"==typeof t||"object"==typeof t&&null!==t&&!(Symbol.toPrimitive in t||"toString"in t||"valueOf"in t)}(t)&&!isNaN(parseFloat(t))&&isFinite(t)}function mt(t,e,i){let n,s,o;for(n=0,s=t.length;n<s;n++)o=t[n][i],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function bt(t){return t*(nt/180)}function xt(t){return t*(180/nt)}function yt(t){if(!z(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function _t(t,e){const i=e.x-t.x,n=e.y-t.y,s=Math.sqrt(i*i+n*n);let o=Math.atan2(n,i);return o<-.5*nt&&(o+=st),{angle:o,distance:s}}function vt(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function wt(t,e){return(t-e+ot)%st-nt}function Mt(t){return(t%st+st)%st}function kt(t,e,i,n){const s=Mt(t),o=Mt(e),a=Mt(i),r=Mt(o-s),l=Mt(a-s),h=Mt(s-o),c=Mt(s-a);return s===o||s===a||n&&o===a||r>l&&h<c}function Ct(t,e,i){return Math.max(e,Math.min(i,t))}function St(t,e,i,n=1e-6){return t>=Math.min(e,i)-n&&t<=Math.max(e,i)+n}function Pt(t,e,i){i=i||(i=>t[i]<e);let n,s=t.length-1,o=0;for(;s-o>1;)n=o+s>>1,i(n)?o=n:s=n;return{lo:o,hi:s}}const Et=(t,e,i,n)=>Pt(t,i,n?n=>{const s=t[n][e];return s<i||s===i&&t[n+1][e]===i}:n=>t[n][e]<i),It=(t,e,i)=>Pt(t,i,(n=>t[n][e]>=i)),Dt=["push","pop","shift","splice","unshift"];function Rt(t,e){const i=t._chartjs;if(!i)return;const n=i.listeners,s=n.indexOf(e);-1!==s&&n.splice(s,1),n.length>0||(Dt.forEach((e=>{delete t[e]})),delete t._chartjs)}function At(t){const e=new Set(t);return e.size===t.length?t:Array.from(e)}const Tt="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function Ft(t,e){let i=[],n=!1;return function(...s){i=s,n||(n=!0,Tt.call(window,(()=>{n=!1,t.apply(e,i)})))}}const Ot=t=>"start"===t?"left":"end"===t?"right":"center",Lt=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2;function Bt(t,e,i){const n=e.length;let s=0,o=n;if(t._sorted){const{iScale:a,vScale:r,_parsed:l}=t,h=t.dataset&&t.dataset.options?t.dataset.options.spanGaps:null,c=a.axis,{min:d,max:u,minDefined:g,maxDefined:f}=a.getUserBounds();if(g){if(s=Math.min(Et(l,c,d).lo,i?n:Et(e,c,a.getPixelForValue(d)).lo),h){const t=l.slice(0,s+1).reverse().findIndex((t=>!O(t[r.axis])));s-=Math.max(0,t)}s=Ct(s,0,n-1)}if(f){let t=Math.max(Et(l,a.axis,u,!0).hi+1,i?0:Et(e,c,a.getPixelForValue(u),!0).hi+1);if(h){const e=l.slice(t-1).findIndex((t=>!O(t[r.axis])));t+=Math.max(0,e)}o=Ct(t,s,n)-s}else o=n-s}return{start:s,count:o}}function zt(t){const{xScale:e,yScale:i,_scaleRanges:n}=t,s={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!n)return t._scaleRanges=s,!0;const o=n.xmin!==e.min||n.xmax!==e.max||n.ymin!==i.min||n.ymax!==i.max;return Object.assign(n,s),o}const $t=t=>0===t||1===t,Vt=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*st/i),Nt=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*st/i)+1,Wt={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*lt),easeOutSine:t=>Math.sin(t*lt),easeInOutSine:t=>-.5*(Math.cos(nt*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>$t(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>$t(t)?t:Vt(t,.075,.3),easeOutElastic:t=>$t(t)?t:Nt(t,.075,.3),easeInOutElastic(t){const e=.1125;return $t(t)?t:t<.5?.5*Vt(2*t,e,.45):.5+.5*Nt(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-Wt.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*Wt.easeInBounce(2*t):.5*Wt.easeOutBounce(2*t-1)+.5};function Ht(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function jt(t){return Ht(t)?t:new A(t)}function Yt(t){return Ht(t)?t:new A(t).saturate(.5).darken(.1).hexString()}const Ut=["x","y","borderWidth","radius","tension"],qt=["color","borderColor","backgroundColor"],Xt=new Map;function Gt(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let n=Xt.get(i);return n||(n=new Intl.NumberFormat(t,e),Xt.set(i,n)),n}(e,i).format(t)}const Kt={values:t=>L(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const n=this.chart.options.locale;let s,o=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(s="scientific"),o=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t)),i}(t,i)}const a=dt(Math.abs(o)),r=isNaN(a)?1:Math.max(Math.min(-1*Math.floor(a),20),0),l={notation:s,minimumFractionDigits:r,maximumFractionDigits:r};return Object.assign(l,this.options.ticks.format),Gt(t,n,l)},logarithmic(t,e,i){if(0===t)return"0";const n=i[e].significand||t/Math.pow(10,Math.floor(dt(t)));return[1,2,3,5,10,15].includes(n)||e>.8*i.length?Kt.numeric.call(this,t,e,i):""}};var Zt={formatters:Kt};const Jt=Object.create(null),Qt=Object.create(null);function te(t,e){if(!e)return t;const i=e.split(".");for(let e=0,n=i.length;e<n;++e){const n=i[e];t=t[n]||(t[n]=Object.create(null))}return t}function ee(t,e,i){return"string"==typeof e?X(te(t,e),i):X(te(t,""),e)}class ie{constructor(t,e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>Yt(e.backgroundColor),this.hoverBorderColor=(t,e)=>Yt(e.borderColor),this.hoverColor=(t,e)=>Yt(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t),this.apply(e)}set(t,e){return ee(this,t,e)}get(t){return te(this,t)}describe(t,e){return ee(Qt,t,e)}override(t,e){return ee(Jt,t,e)}route(t,e,i,n){const s=te(this,t),o=te(this,i),a="_"+e;Object.defineProperties(s,{[a]:{value:s[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[a],e=o[n];return B(t)?Object.assign({},e,t):V(t,e)},set(t){this[a]=t}}})}apply(t){t.forEach((t=>t(this)))}}var ne=new ie({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[function(t){t.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),t.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),t.set("animations",{colors:{type:"color",properties:qt},numbers:{type:"number",properties:Ut}}),t.describe("animations",{_fallback:"animation"}),t.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}})},function(t){t.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})},function(t){t.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",clip:!0,grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Zt.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),t.route("scale.ticks","color","","color"),t.route("scale.grid","color","","borderColor"),t.route("scale.border","color","","borderColor"),t.route("scale.title","color","","color"),t.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t&&"dash"!==t}),t.describe("scales",{_fallback:"scale"}),t.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t})}]);function se(t,e,i,n,s){let o=e[s];return o||(o=e[s]=t.measureText(s).width,i.push(s)),o>n&&(n=o),n}function oe(t,e,i,n){let s=(n=n||{}).data=n.data||{},o=n.garbageCollect=n.garbageCollect||[];n.font!==e&&(s=n.data={},o=n.garbageCollect=[],n.font=e),t.save(),t.font=e;let a=0;const r=i.length;let l,h,c,d,u;for(l=0;l<r;l++)if(d=i[l],null==d||L(d)){if(L(d))for(h=0,c=d.length;h<c;h++)u=d[h],null==u||L(u)||(a=se(t,s,o,a,u))}else a=se(t,s,o,a,d);t.restore();const g=o.length/2;if(g>i.length){for(l=0;l<g;l++)delete s[o[l]];o.splice(0,g)}return a}function ae(t,e,i){const n=t.currentDevicePixelRatio,s=0!==i?Math.max(i/2,.5):0;return Math.round((e-s)*n)/n+s}function re(t,e){(e||t)&&((e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore())}function le(t,e,i,n){he(t,e,i,n,null)}function he(t,e,i,n,s){let o,a,r,l,h,c,d,u;const g=e.pointStyle,f=e.rotation,p=e.radius;let m=(f||0)*rt;if(g&&"object"==typeof g&&(o=g.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(i,n),t.rotate(m),t.drawImage(g,-g.width/2,-g.height/2,g.width,g.height),void t.restore();if(!(isNaN(p)||p<=0)){switch(t.beginPath(),g){default:s?t.ellipse(i,n,s/2,p,0,0,st):t.arc(i,n,p,0,st),t.closePath();break;case"triangle":c=s?s/2:p,t.moveTo(i+Math.sin(m)*c,n-Math.cos(m)*p),m+=ct,t.lineTo(i+Math.sin(m)*c,n-Math.cos(m)*p),m+=ct,t.lineTo(i+Math.sin(m)*c,n-Math.cos(m)*p),t.closePath();break;case"rectRounded":h=.516*p,l=p-h,a=Math.cos(m+ht)*l,d=Math.cos(m+ht)*(s?s/2-h:l),r=Math.sin(m+ht)*l,u=Math.sin(m+ht)*(s?s/2-h:l),t.arc(i-d,n-r,h,m-nt,m-lt),t.arc(i+u,n-a,h,m-lt,m),t.arc(i+d,n+r,h,m,m+lt),t.arc(i-u,n+a,h,m+lt,m+nt),t.closePath();break;case"rect":if(!f){l=Math.SQRT1_2*p,c=s?s/2:l,t.rect(i-c,n-l,2*c,2*l);break}m+=ht;case"rectRot":d=Math.cos(m)*(s?s/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(s?s/2:p),t.moveTo(i-d,n-r),t.lineTo(i+u,n-a),t.lineTo(i+d,n+r),t.lineTo(i-u,n+a),t.closePath();break;case"crossRot":m+=ht;case"cross":d=Math.cos(m)*(s?s/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(s?s/2:p),t.moveTo(i-d,n-r),t.lineTo(i+d,n+r),t.moveTo(i+u,n-a),t.lineTo(i-u,n+a);break;case"star":d=Math.cos(m)*(s?s/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(s?s/2:p),t.moveTo(i-d,n-r),t.lineTo(i+d,n+r),t.moveTo(i+u,n-a),t.lineTo(i-u,n+a),m+=ht,d=Math.cos(m)*(s?s/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(s?s/2:p),t.moveTo(i-d,n-r),t.lineTo(i+d,n+r),t.moveTo(i+u,n-a),t.lineTo(i-u,n+a);break;case"line":a=s?s/2:Math.cos(m)*p,r=Math.sin(m)*p,t.moveTo(i-a,n-r),t.lineTo(i+a,n+r);break;case"dash":t.moveTo(i,n),t.lineTo(i+Math.cos(m)*(s?s/2:p),n+Math.sin(m)*p);break;case!1:t.closePath()}t.fill(),e.borderWidth>0&&t.stroke()}}function ce(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function de(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function ue(t){t.restore()}function ge(t,e,i,n,s){if(!e)return t.lineTo(i.x,i.y);if("middle"===s){const n=(e.x+i.x)/2;t.lineTo(n,e.y),t.lineTo(n,i.y)}else"after"===s!=!!n?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function fe(t,e,i,n){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(n?e.cp1x:e.cp2x,n?e.cp1y:e.cp2y,n?i.cp2x:i.cp1x,n?i.cp2y:i.cp1y,i.x,i.y)}function pe(t,e,i,n,s){if(s.strikethrough||s.underline){const o=t.measureText(n),a=e-o.actualBoundingBoxLeft,r=e+o.actualBoundingBoxRight,l=i-o.actualBoundingBoxAscent,h=i+o.actualBoundingBoxDescent,c=s.strikethrough?(l+h)/2:h;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=s.decorationWidth||2,t.moveTo(a,c),t.lineTo(r,c),t.stroke()}}function me(t,e){const i=t.fillStyle;t.fillStyle=e.color,t.fillRect(e.left,e.top,e.width,e.height),t.fillStyle=i}function be(t,e,i,n,s,o={}){const a=L(e)?e:[e],r=o.strokeWidth>0&&""!==o.strokeColor;let l,h;for(t.save(),t.font=s.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),O(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),l=0;l<a.length;++l)h=a[l],o.backdrop&&me(t,o.backdrop),r&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),O(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(h,i,n,o.maxWidth)),t.fillText(h,i,n,o.maxWidth),pe(t,i,n,h,o),n+=Number(s.lineHeight);t.restore()}function xe(t,e){const{x:i,y:n,w:s,h:o,radius:a}=e;t.arc(i+a.topLeft,n+a.topLeft,a.topLeft,1.5*nt,nt,!0),t.lineTo(i,n+o-a.bottomLeft),t.arc(i+a.bottomLeft,n+o-a.bottomLeft,a.bottomLeft,nt,lt,!0),t.lineTo(i+s-a.bottomRight,n+o),t.arc(i+s-a.bottomRight,n+o-a.bottomRight,a.bottomRight,lt,0,!0),t.lineTo(i+s,n+a.topRight),t.arc(i+s-a.topRight,n+a.topRight,a.topRight,0,-lt,!0),t.lineTo(i+a.topLeft,n)}const ye=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,_e=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function ve(t,e){const i=(""+t).match(ye);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}function we(t,e){const i={},n=B(e),s=n?Object.keys(e):e,o=B(t)?n?i=>V(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of s)i[t]=+o(t)||0;return i}function Me(t){return we(t,{top:"y",right:"x",bottom:"y",left:"x"})}function ke(t){return we(t,["topLeft","topRight","bottomLeft","bottomRight"])}function Ce(t){const e=Me(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function Se(t,e){t=t||{},e=e||ne.font;let i=V(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let n=V(t.style,e.style);n&&!(""+n).match(_e)&&(console.warn('Invalid font style specified: "'+n+'"'),n=void 0);const s={family:V(t.family,e.family),lineHeight:ve(V(t.lineHeight,e.lineHeight),i),size:i,style:n,weight:V(t.weight,e.weight),string:""};return s.string=function(t){return!t||O(t.size)||O(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(s),s}function Pe(t,e,i,n){let s,o,a,r=!0;for(s=0,o=t.length;s<o;++s)if(a=t[s],void 0!==a&&(void 0!==e&&"function"==typeof a&&(a=a(e),r=!1),void 0!==i&&L(a)&&(a=a[i%a.length],r=!1),void 0!==a))return n&&!r&&(n.cacheable=!1),a}function Ee(t,e){return Object.assign(Object.create(t),e)}function Ie(t,e=[""],i,n,s=()=>t[0]){const o=i||t;void 0===n&&(n=Ve("_fallback",t));const a={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:o,_fallback:n,_getTarget:s,override:i=>Ie([i,...t],e,o,n)};return new Proxy(a,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,n)=>Fe(i,n,(()=>function(t,e,i,n){let s;for(const o of e)if(s=Ve(Ae(o,t),i),void 0!==s)return Te(t,s)?ze(i,n,t,s):s}(n,e,t,i))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>Ne(t).includes(e),ownKeys:t=>Ne(t),set(t,e,i){const n=t._storage||(t._storage=s());return t[e]=n[e]=i,delete t._keys,!0}})}function De(t,e,i,n){const s={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:Re(t,n),setContext:e=>De(t,e,i,n),override:s=>De(t.override(s),e,i,n)};return new Proxy(s,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>Fe(t,e,(()=>function(t,e,i){const{_proxy:n,_context:s,_subProxy:o,_descriptors:a}=t;let r=n[e];return et(r)&&a.isScriptable(e)&&(r=function(t,e,i,n){const{_proxy:s,_context:o,_subProxy:a,_stack:r}=i;if(r.has(t))throw new Error("Recursion detected: "+Array.from(r).join("->")+"->"+t);r.add(t);let l=e(o,a||n);return r.delete(t),Te(t,l)&&(l=ze(s._scopes,s,t,l)),l}(e,r,t,i)),L(r)&&r.length&&(r=function(t,e,i,n){const{_proxy:s,_context:o,_subProxy:a,_descriptors:r}=i;if(void 0!==o.index&&n(t))return e[o.index%e.length];if(B(e[0])){const i=e,n=s._scopes.filter((t=>t!==i));e=[];for(const l of i){const i=ze(n,s,t,l);e.push(De(i,o,a&&a[t],r))}}return e}(e,r,t,a.isIndexable)),Te(e,r)&&(r=De(r,s,o&&o[e],a)),r}(t,e,i))),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,n)=>(t[i]=n,delete e[i],!0)})}function Re(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:n=e.indexable,_allKeys:s=e.allKeys}=t;return{allKeys:s,scriptable:i,indexable:n,isScriptable:et(i)?i:()=>i,isIndexable:et(n)?n:()=>n}}const Ae=(t,e)=>t?t+Q(e):e,Te=(t,e)=>B(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function Fe(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e)||"constructor"===e)return t[e];const n=i();return t[e]=n,n}function Oe(t,e,i){return et(t)?t(e,i):t}const Le=(t,e)=>!0===t?e:"string"==typeof t?J(e,t):void 0;function Be(t,e,i,n,s){for(const o of e){const e=Le(i,o);if(e){t.add(e);const o=Oe(e._fallback,i,s);if(void 0!==o&&o!==i&&o!==n)return o}else if(!1===e&&void 0!==n&&i!==n)return null}return!1}function ze(t,e,i,n){const s=e._rootScopes,o=Oe(e._fallback,i,n),a=[...t,...s],r=new Set;r.add(n);let l=$e(r,a,i,o||i,n);return null!==l&&(void 0===o||o===i||(l=$e(r,a,o,l,n),null!==l))&&Ie(Array.from(r),[""],s,o,(()=>function(t,e,i){const n=t._getTarget();e in n||(n[e]={});const s=n[e];return L(s)&&B(i)?i:s||{}}(e,i,n)))}function $e(t,e,i,n,s){for(;i;)i=Be(t,e,i,n,s);return i}function Ve(t,e){for(const i of e){if(!i)continue;const e=i[t];if(void 0!==e)return e}}function Ne(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function We(t,e,i,n){const{iScale:s}=t,{key:o="r"}=this._parsing,a=new Array(n);let r,l,h,c;for(r=0,l=n;r<l;++r)h=r+i,c=e[h],a[r]={r:s.parse(J(c,o),h)};return a}const He=Number.EPSILON||1e-14,je=(t,e)=>e<t.length&&!t[e].skip&&t[e],Ye=t=>"x"===t?"y":"x";function Ue(t,e,i,n){const s=t.skip?e:t,o=e,a=i.skip?e:i,r=vt(o,s),l=vt(a,o);let h=r/(r+l),c=l/(r+l);h=isNaN(h)?0:h,c=isNaN(c)?0:c;const d=n*h,u=n*c;return{previous:{x:o.x-d*(a.x-s.x),y:o.y-d*(a.y-s.y)},next:{x:o.x+u*(a.x-s.x),y:o.y+u*(a.y-s.y)}}}function qe(t,e,i){return Math.max(Math.min(t,i),e)}function Xe(t,e,i,n,s){let o,a,r,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const i=Ye(e),n=t.length,s=Array(n).fill(0),o=Array(n);let a,r,l,h=je(t,0);for(a=0;a<n;++a)if(r=l,l=h,h=je(t,a+1),l){if(h){const t=h[e]-l[e];s[a]=0!==t?(h[i]-l[i])/t:0}o[a]=r?h?ut(s[a-1])!==ut(s[a])?0:(s[a-1]+s[a])/2:s[a-1]:s[a]}!function(t,e,i){const n=t.length;let s,o,a,r,l,h=je(t,0);for(let c=0;c<n-1;++c)l=h,h=je(t,c+1),l&&h&&(gt(e[c],0,He)?i[c]=i[c+1]=0:(s=i[c]/e[c],o=i[c+1]/e[c],r=Math.pow(s,2)+Math.pow(o,2),r<=9||(a=3/Math.sqrt(r),i[c]=s*a*e[c],i[c+1]=o*a*e[c])))}(t,s,o),function(t,e,i="x"){const n=Ye(i),s=t.length;let o,a,r,l=je(t,0);for(let h=0;h<s;++h){if(a=r,r=l,l=je(t,h+1),!r)continue;const s=r[i],c=r[n];a&&(o=(s-a[i])/3,r[`cp1${i}`]=s-o,r[`cp1${n}`]=c-o*e[h]),l&&(o=(l[i]-s)/3,r[`cp2${i}`]=s+o,r[`cp2${n}`]=c+o*e[h])}}(t,o,e)}(t,s);else{let i=n?t[t.length-1]:t[0];for(o=0,a=t.length;o<a;++o)r=t[o],l=Ue(i,r,t[Math.min(o+1,a-(n?0:1))%a],e.tension),r.cp1x=l.previous.x,r.cp1y=l.previous.y,r.cp2x=l.next.x,r.cp2y=l.next.y,i=r}e.capBezierPoints&&function(t,e){let i,n,s,o,a,r=ce(t[0],e);for(i=0,n=t.length;i<n;++i)a=o,o=r,r=i<n-1&&ce(t[i+1],e),o&&(s=t[i],a&&(s.cp1x=qe(s.cp1x,e.left,e.right),s.cp1y=qe(s.cp1y,e.top,e.bottom)),r&&(s.cp2x=qe(s.cp2x,e.left,e.right),s.cp2y=qe(s.cp2y,e.top,e.bottom)))}(t,i)}function Ge(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Ke(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function Ze(t,e,i){let n;return"string"==typeof t?(n=parseInt(t,10),-1!==t.indexOf("%")&&(n=n/100*e.parentNode[i])):n=t,n}const Je=t=>t.ownerDocument.defaultView.getComputedStyle(t,null),Qe=["top","right","bottom","left"];function ti(t,e,i){const n={};i=i?"-"+i:"";for(let s=0;s<4;s++){const o=Qe[s];n[o]=parseFloat(t[e+"-"+o+i])||0}return n.width=n.left+n.right,n.height=n.top+n.bottom,n}function ei(t,e){if("native"in t)return t;const{canvas:i,currentDevicePixelRatio:n}=e,s=Je(i),o="border-box"===s.boxSizing,a=ti(s,"padding"),r=ti(s,"border","width"),{x:l,y:h,box:c}=function(t,e){const i=t.touches,n=i&&i.length?i[0]:t,{offsetX:s,offsetY:o}=n;let a,r,l=!1;if(((t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot))(s,o,t.target))a=s,r=o;else{const t=e.getBoundingClientRect();a=n.clientX-t.left,r=n.clientY-t.top,l=!0}return{x:a,y:r,box:l}}(t,i),d=a.left+(c&&r.left),u=a.top+(c&&r.top);let{width:g,height:f}=e;return o&&(g-=a.width+r.width,f-=a.height+r.height),{x:Math.round((l-d)/g*i.width/n),y:Math.round((h-u)/f*i.height/n)}}const ii=t=>Math.round(10*t)/10;function ni(t,e,i){const n=e||1,s=Math.floor(t.height*n),o=Math.floor(t.width*n);t.height=Math.floor(t.height),t.width=Math.floor(t.width);const a=t.canvas;return a.style&&(i||!a.style.height&&!a.style.width)&&(a.style.height=`${t.height}px`,a.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==n||a.height!==s||a.width!==o)&&(t.currentDevicePixelRatio=n,a.height=s,a.width=o,t.ctx.setTransform(n,0,0,n,0,0),!0)}const si=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};Ge()&&(window.addEventListener("test",null,e),window.removeEventListener("test",null,e))}catch(t){}return t}();function oi(t,e){const i=function(t,e){return Je(t).getPropertyValue(e)}(t,e),n=i&&i.match(/^(\d+)(\.\d+)?px$/);return n?+n[1]:void 0}function ai(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function ri(t,e,i,n){return{x:t.x+i*(e.x-t.x),y:"middle"===n?i<.5?t.y:e.y:"after"===n?i<1?t.y:e.y:i>0?e.y:t.y}}function li(t,e,i,n){const s={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},a=ai(t,s,i),r=ai(s,o,i),l=ai(o,e,i),h=ai(a,r,i),c=ai(r,l,i);return ai(h,c,i)}function hi(t,e,i){return t?function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,i):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function ci(t,e){let i,n;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,n=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=n)}function di(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function ui(t){return"angle"===t?{between:kt,compare:wt,normalize:Mt}:{between:St,compare:(t,e)=>t-e,normalize:t=>t}}function gi({start:t,end:e,count:i,loop:n,style:s}){return{start:t%i,end:e%i,loop:n&&(e-t+1)%i==0,style:s}}function fi(t,e,i){if(!i)return[t];const{property:n,start:s,end:o}=i,a=e.length,{compare:r,between:l,normalize:h}=ui(n),{start:c,end:d,loop:u,style:g}=function(t,e,i){const{property:n,start:s,end:o}=i,{between:a,normalize:r}=ui(n),l=e.length;let h,c,{start:d,end:u,loop:g}=t;if(g){for(d+=l,u+=l,h=0,c=l;h<c&&a(r(e[d%l][n]),s,o);++h)d--,u--;d%=l,u%=l}return u<d&&(u+=l),{start:d,end:u,loop:g,style:t.style}}(t,e,i),f=[];let p,m,b,x=!1,y=null;for(let t=c,i=c;t<=d;++t)m=e[t%a],m.skip||(p=h(m[n]),p!==b&&(x=l(p,s,o),null===y&&(x||l(s,b,p)&&0!==r(s,b))&&(y=0===r(p,s)?t:i),null!==y&&(!x||0===r(o,p)||l(o,b,p))&&(f.push(gi({start:y,end:t,loop:u,count:a,style:g})),y=null),i=t,b=p));return null!==y&&f.push(gi({start:y,end:d,loop:u,count:a,style:g})),f}function pi(t,e){const i=[],n=t.segments;for(let s=0;s<n.length;s++){const o=fi(n[s],t.points,e);o.length&&i.push(...o)}return i}function mi(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function bi(t,e){if(!e)return!1;const i=[],n=function(t,e){return Ht(e)?(i.includes(e)||i.push(e),i.indexOf(e)):e};return JSON.stringify(t,n)!==JSON.stringify(e,n)}function xi(t,e,i){return t.options.clip?t[i]:e[i]}function yi(t,e){const i=e._clip;if(i.disabled)return!1;const n=function(t,e){const{xScale:i,yScale:n}=t;return i&&n?{left:xi(i,e,"left"),right:xi(i,e,"right"),top:xi(n,e,"top"),bottom:xi(n,e,"bottom")}:e}(e,t.chartArea);return{left:!1===i.left?0:n.left-(!0===i.left?0:i.left),right:!1===i.right?t.width:n.right+(!0===i.right?0:i.right),top:!1===i.top?0:n.top-(!0===i.top?0:i.top),bottom:!1===i.bottom?t.height:n.bottom+(!0===i.bottom?0:i.bottom)}}class _i{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,n){const s=e.listeners[n],o=e.duration;s.forEach((n=>n({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(i-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=Tt.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,n)=>{if(!i.running||!i.items.length)return;const s=i.items;let o,a=s.length-1,r=!1;for(;a>=0;--a)o=s[a],o._active?(o._total>i.duration&&(i.duration=o._total),o.tick(t),r=!0):(s[a]=s[s.length-1],s.pop());r&&(n.draw(),this._notify(n,i,t,"progress")),s.length||(i.running=!1,this._notify(n,i,t,"complete"),i.initial=!1),e+=s.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let n=i.length-1;for(;n>=0;--n)i[n].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}}var vi=new _i;const wi="transparent",Mi={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const n=jt(t||wi),s=n.valid&&jt(e||wi);return s&&s.valid?s.mix(n,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class ki{constructor(t,e,i,n){const s=e[i];n=Pe([t.to,n,s,t.from]);const o=Pe([t.from,s,n]);this._active=!0,this._fn=t.fn||Mi[t.type||typeof o],this._easing=Wt[t.easing]||Wt.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=o,this._to=n,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const n=this._target[this._prop],s=i-this._start,o=this._duration-s;this._start=i,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=s,this._loop=!!t.loop,this._to=Pe([t.to,e,n,t.from]),this._from=Pe([t.from,n,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,n=this._prop,s=this._from,o=this._loop,a=this._to;let r;if(this._active=s!==a&&(o||e<i),!this._active)return this._target[n]=a,void this._notify(!0);e<0?this._target[n]=s:(r=e/i%2,r=o&&r>1?2-r:r,r=this._easing(Math.min(1,Math.max(0,r))),this._target[n]=this._fn(s,a,r))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}class Ci{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!B(t))return;const e=Object.keys(ne.animation),i=this._properties;Object.getOwnPropertyNames(t).forEach((n=>{const s=t[n];if(!B(s))return;const o={};for(const t of e)o[t]=s[t];(L(s.properties)&&s.properties||[n]).forEach((t=>{t!==n&&i.has(t)||i.set(t,o)}))}))}_animateOptions(t,e){const i=e.options,n=function(t,e){if(!e)return;let i=t.options;if(i)return i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}})),i;t.options=e}(t,i);if(!n)return[];const s=this._createAnimations(n,i);return i.$shared&&function(t,e){const i=[],n=Object.keys(e);for(let e=0;e<n.length;e++){const s=t[n[e]];s&&s.active()&&i.push(s.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),s}_createAnimations(t,e){const i=this._properties,n=[],s=t.$animations||(t.$animations={}),o=Object.keys(e),a=Date.now();let r;for(r=o.length-1;r>=0;--r){const l=o[r];if("$"===l.charAt(0))continue;if("options"===l){n.push(...this._animateOptions(t,e));continue}const h=e[l];let c=s[l];const d=i.get(l);if(c){if(d&&c.active()){c.update(d,h,a);continue}c.cancel()}d&&d.duration?(s[l]=c=new ki(d,t,l,h),n.push(c)):t[l]=h}return n}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(vi.add(this._chart,i),!0):void 0}}function Si(t,e){const i=t&&t.options||{},n=i.reverse,s=void 0===i.min?e:0,o=void 0===i.max?e:0;return{start:n?o:s,end:n?s:o}}function Pi(t,e){const i=[],n=t._getSortedDatasetMetas(e);let s,o;for(s=0,o=n.length;s<o;++s)i.push(n[s].index);return i}function Ei(t,e,i,n={}){const s=t.keys,o="single"===n.mode;let a,r,l,h;if(null===e)return;let c=!1;for(a=0,r=s.length;a<r;++a){if(l=+s[a],l===i){if(c=!0,n.all)continue;break}h=t.values[l],z(h)&&(o||0===e||ut(e)===ut(h))&&(e+=h)}return c||n.all?e:0}function Ii(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function Di(t,e,i){const n=t[e]||(t[e]={});return n[i]||(n[i]={})}function Ri(t,e,i,n){for(const s of e.getMatchingVisibleMetas(n).reverse()){const e=t[s.index];if(i&&e>0||!i&&e<0)return s.index}return null}function Ai(t,e){const{chart:i,_cachedMeta:n}=t,s=i._stacks||(i._stacks={}),{iScale:o,vScale:a,index:r}=n,l=o.axis,h=a.axis,c=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(o,a,n),d=e.length;let u;for(let t=0;t<d;++t){const i=e[t],{[l]:o,[h]:d}=i;u=(i._stacks||(i._stacks={}))[h]=Di(s,c,o),u[r]=d,u._top=Ri(u,a,!0,n.type),u._bottom=Ri(u,a,!1,n.type),(u._visualValues||(u._visualValues={}))[r]=d}}function Ti(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function Fi(t,e){const i=t.controller.index,n=t.vScale&&t.vScale.axis;if(n){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[n]||void 0===e[n][i])return;delete e[n][i],void 0!==e[n]._visualValues&&void 0!==e[n]._visualValues[i]&&delete e[n]._visualValues[i]}}}const Oi=t=>"reset"===t||"none"===t,Li=(t,e)=>e?t:Object.assign({},t);class Bi{static defaults={};static datasetElementType=null;static dataElementType=null;constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=Ii(t.vScale,t),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(t){this.index!==t&&Fi(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),n=(t,e,i,n)=>"x"===t?e:"r"===t?n:i,s=e.xAxisID=V(i.xAxisID,Ti(t,"x")),o=e.yAxisID=V(i.yAxisID,Ti(t,"y")),a=e.rAxisID=V(i.rAxisID,Ti(t,"r")),r=e.indexAxis,l=e.iAxisID=n(r,s,o,a),h=e.vAxisID=n(r,o,s,a);e.xScale=this.getScaleForId(s),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(a),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(h)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&Rt(this._data,this),t._stacked&&Fi(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if(B(e)){const t=this._cachedMeta;this._data=function(t,e){const{iScale:i,vScale:n}=e,s="x"===i.axis?"x":"y",o="x"===n.axis?"x":"y",a=Object.keys(t),r=new Array(a.length);let l,h,c;for(l=0,h=a.length;l<h;++l)c=a[l],r[l]={[s]:c,[o]:t[c]};return r}(e,t)}else if(i!==e){if(i){Rt(i,this);const t=this._cachedMeta;Fi(t),t._parsed=[]}e&&Object.isExtensible(e)&&((n=e)._chartjs?n._chartjs.listeners.push(this):(Object.defineProperty(n,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),Dt.forEach((t=>{const e="_onData"+Q(t),i=n[t];Object.defineProperty(n,t,{configurable:!0,enumerable:!1,value(...t){const s=i.apply(this,t);return n._chartjs.listeners.forEach((i=>{"function"==typeof i[e]&&i[e](...t)})),s}})})))),this._syncList=[],this._data=e}var n}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let n=!1;this._dataCheck();const s=e._stacked;e._stacked=Ii(e.vScale,e),e.stack!==i.stack&&(n=!0,Fi(e),e.stack=i.stack),this._resyncElements(t),(n||s!==e._stacked)&&(Ai(this,e._parsed),e._stacked=Ii(e.vScale,e))}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:n}=this,{iScale:s,_stacked:o}=i,a=s.axis;let r,l,h,c=0===t&&e===n.length||i._sorted,d=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=n,i._sorted=!0,h=n;else{h=L(n[t])?this.parseArrayData(i,n,t,e):B(n[t])?this.parseObjectData(i,n,t,e):this.parsePrimitiveData(i,n,t,e);const s=()=>null===l[a]||d&&l[a]<d[a];for(r=0;r<e;++r)i._parsed[r+t]=l=h[r],c&&(s()&&(c=!1),d=l);i._sorted=c}o&&Ai(this,h)}parsePrimitiveData(t,e,i,n){const{iScale:s,vScale:o}=t,a=s.axis,r=o.axis,l=s.getLabels(),h=s===o,c=new Array(n);let d,u,g;for(d=0,u=n;d<u;++d)g=d+i,c[d]={[a]:h||s.parse(l[g],g),[r]:o.parse(e[g],g)};return c}parseArrayData(t,e,i,n){const{xScale:s,yScale:o}=t,a=new Array(n);let r,l,h,c;for(r=0,l=n;r<l;++r)h=r+i,c=e[h],a[r]={x:s.parse(c[0],h),y:o.parse(c[1],h)};return a}parseObjectData(t,e,i,n){const{xScale:s,yScale:o}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,l=new Array(n);let h,c,d,u;for(h=0,c=n;h<c;++h)d=h+i,u=e[d],l[h]={x:s.parse(J(u,a),d),y:o.parse(J(u,r),d)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const n=this.chart,s=this._cachedMeta,o=e[t.axis];return Ei({keys:Pi(n,!0),values:e._stacks[t.axis]._visualValues},o,s.index,{mode:i})}updateRangeFromParsed(t,e,i,n){const s=i[e.axis];let o=null===s?NaN:s;const a=n&&i._stacks[e.axis];n&&a&&(n.values=a,o=Ei(n,s,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const i=this._cachedMeta,n=i._parsed,s=i._sorted&&t===i.iScale,o=n.length,a=this._getOtherScale(t),r=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:Pi(i,!0),values:null})(e,i,this.chart),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:h,max:c}=function(t){const{min:e,max:i,minDefined:n,maxDefined:s}=t.getUserBounds();return{min:n?e:Number.NEGATIVE_INFINITY,max:s?i:Number.POSITIVE_INFINITY}}(a);let d,u;function g(){u=n[d];const e=u[a.axis];return!z(u[t.axis])||h>e||c<e}for(d=0;d<o&&(g()||(this.updateRangeFromParsed(l,t,u,r),!s));++d);if(s)for(d=o-1;d>=0;--d)if(!g()){this.updateRangeFromParsed(l,t,u,r);break}return l}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let n,s,o;for(n=0,s=e.length;n<s;++n)o=e[n][t.axis],z(o)&&i.push(o);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,n=e.vScale,s=this.getParsed(t);return{label:i?""+i.getLabelForValue(s[i.axis]):"",value:n?""+n.getLabelForValue(s[n.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,n,s;return B(t)?(e=t.top,i=t.right,n=t.bottom,s=t.left):e=i=n=s=t,{top:e,right:i,bottom:n,left:s,disabled:!1===t}}(V(this.options.clip,function(t,e,i){if(!1===i)return!1;const n=Si(t,i),s=Si(e,i);return{top:s.end,right:n.end,bottom:s.start,left:n.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,n=i.data||[],s=e.chartArea,o=[],a=this._drawStart||0,r=this._drawCount||n.length-a,l=this.options.drawActiveElementsOnTop;let h;for(i.dataset&&i.dataset.draw(t,s,a,r),h=a;h<a+r;++h){const e=n[h];e.hidden||(e.active&&l?o.push(e):e.draw(t,s))}for(h=0;h<o.length;++h)o[h].draw(t,s)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const n=this.getDataset();let s;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];s=e.$context||(e.$context=function(t,e,i){return Ee(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),s.parsed=this.getParsed(t),s.raw=n.data[t],s.index=s.dataIndex=t}else s=this.$context||(this.$context=function(t,e){return Ee(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),s.dataset=n,s.index=s.datasetIndex=this.index;return s.active=!!e,s.mode=i,s}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const n="active"===e,s=this._cachedDataOpts,o=t+"-"+e,a=s[o],r=this.enableOptionSharing&&tt(i);if(a)return Li(a,r);const l=this.chart.config,h=l.datasetElementScopeKeys(this._type,t),c=n?[`${t}Hover`,"hover",t,""]:[t,""],d=l.getOptionScopes(this.getDataset(),h),u=Object.keys(ne.elements[t]),g=l.resolveNamedOptions(d,u,(()=>this.getContext(i,n,e)),c);return g.$shared&&(g.$shared=r,s[o]=Object.freeze(Li(g,r))),g}_resolveAnimations(t,e,i){const n=this.chart,s=this._cachedDataOpts,o=`animation-${e}`,a=s[o];if(a)return a;let r;if(!1!==n.options.animation){const n=this.chart.config,s=n.datasetAnimationScopeKeys(this._type,e),o=n.getOptionScopes(this.getDataset(),s);r=n.createResolver(o,this.getContext(t,i,e))}const l=new Ci(n,r&&r.animations);return r&&r._cacheable&&(s[o]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||Oi(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const i=this.resolveDataElementOptions(t,e),n=this._sharedOptions,s=this.getSharedOptions(i),o=this.includeOptions(e,s)||s!==n;return this.updateSharedOptions(s,e,i),{sharedOptions:s,includeOptions:o}}updateElement(t,e,i,n){Oi(n)?Object.assign(t,i):this._resolveAnimations(e,n).update(t,i)}updateSharedOptions(t,e,i){t&&!Oi(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,n){t.active=n;const s=this.getStyle(e,n);this._resolveAnimations(e,i,n).update(t,{options:!n&&this.getSharedOptions(s)||s})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const n=i.length,s=e.length,o=Math.min(s,n);o&&this.parse(0,o),s>n?this._insertElements(n,s-n,t):s<n&&this._removeElements(s,n-s)}_insertElements(t,e,i=!0){const n=this._cachedMeta,s=n.data,o=t+e;let a;const r=t=>{for(t.length+=e,a=t.length-1;a>=o;a--)t[a]=t[a-e]};for(r(s),a=t;a<o;++a)s[a]=new this.dataElementType;this._parsing&&r(n._parsed),this.parse(t,e),i&&this.updateElements(s,t,e,"reset")}updateElements(t,e,i,n){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const n=i._parsed.splice(t,e);i._stacked&&Fi(i,n)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,n]=t;this[e](i,n)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function zi(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let n=[];for(let e=0,s=i.length;e<s;e++)n=n.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=At(n.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let n,s,o,a,r=e._length;const l=()=>{32767!==o&&-32768!==o&&(tt(a)&&(r=Math.min(r,Math.abs(o-a)||r)),a=o)};for(n=0,s=i.length;n<s;++n)o=e.getPixelForValue(i[n]),l();for(a=void 0,n=0,s=e.ticks.length;n<s;++n)o=e.getPixelForTick(n),l();return r}function $i(t,e,i,n){return L(t)?function(t,e,i,n){const s=i.parse(t[0],n),o=i.parse(t[1],n),a=Math.min(s,o),r=Math.max(s,o);let l=a,h=r;Math.abs(a)>Math.abs(r)&&(l=r,h=a),e[i.axis]=h,e._custom={barStart:l,barEnd:h,start:s,end:o,min:a,max:r}}(t,e,i,n):e[i.axis]=i.parse(t,n),e}function Vi(t,e,i,n){const s=t.iScale,o=t.vScale,a=s.getLabels(),r=s===o,l=[];let h,c,d,u;for(h=i,c=i+n;h<c;++h)u=e[h],d={},d[s.axis]=r||s.parse(a[h],h),l.push($i(u,d,o,h));return l}function Ni(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function Wi(t,e,i,n){let s=e.borderSkipped;const o={};if(!s)return void(t.borderSkipped=o);if(!0===s)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:a,end:r,reverse:l,top:h,bottom:c}=function(t){let e,i,n,s,o;return t.horizontal?(e=t.base>t.x,i="left",n="right"):(e=t.base<t.y,i="bottom",n="top"),e?(s="end",o="start"):(s="start",o="end"),{start:i,end:n,reverse:e,top:s,bottom:o}}(t);"middle"===s&&i&&(t.enableBorderRadius=!0,(i._top||0)===n?s=h:(i._bottom||0)===n?s=c:(o[Hi(c,a,r,l)]=!0,s=h)),o[Hi(s,a,r,l)]=!0,t.borderSkipped=o}function Hi(t,e,i,n){var s,o,a;return n?(a=i,t=ji(t=(s=t)===(o=e)?a:s===a?o:s,i,e)):t=ji(t,e,i),t}function ji(t,e,i){return"start"===t?e:"end"===t?i:t}function Yi(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}class Ui extends Bi{static id="doughnut";static defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"};static descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t&&!t.startsWith("borderDash")&&!t.startsWith("hoverBorderDash")};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:n}}=t.legend.options;return e.labels.map(((e,s)=>{const o=t.getDatasetMeta(0).controller.getStyle(s);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:n,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(s),index:s}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}}};constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,n=this._cachedMeta;if(!1===this._parsing)n._parsed=i;else{let s,o,a=t=>+i[t];if(B(i[t])){const{key:t="value"}=this._parsing;a=e=>+J(i[e],t)}for(s=t,o=t+e;s<o;++s)n._parsed[s]=a(s)}}_getRotation(){return bt(this.options.rotation-90)}_getCircumference(){return bt(this.options.circumference)}_getRotationExtents(){let t=st,e=-st;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)&&this.chart.getDatasetMeta(i).type===this._type){const n=this.chart.getDatasetMeta(i).controller,s=n._getRotation(),o=n._getCircumference();t=Math.min(t,s),e=Math.max(e,s+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,n=this._cachedMeta,s=n.data,o=this.getMaxBorderWidth()+this.getMaxOffset(s)+this.options.spacing,a=Math.max((Math.min(i.width,i.height)-o)/2,0),r=Math.min((h=a,"string"==typeof(l=this.options.cutout)&&l.endsWith("%")?parseFloat(l)/100:+l/h),1);var l,h;const c=this._getRingWeight(this.index),{circumference:d,rotation:u}=this._getRotationExtents(),{ratioX:g,ratioY:f,offsetX:p,offsetY:m}=function(t,e,i){let n=1,s=1,o=0,a=0;if(e<st){const r=t,l=r+e,h=Math.cos(r),c=Math.sin(r),d=Math.cos(l),u=Math.sin(l),g=(t,e,n)=>kt(t,r,l,!0)?1:Math.max(e,e*i,n,n*i),f=(t,e,n)=>kt(t,r,l,!0)?-1:Math.min(e,e*i,n,n*i),p=g(0,h,d),m=g(lt,c,u),b=f(nt,h,d),x=f(nt+lt,c,u);n=(p-b)/2,s=(m-x)/2,o=-(p+b)/2,a=-(m+x)/2}return{ratioX:n,ratioY:s,offsetX:o,offsetY:a}}(u,d,r),b=(i.width-o)/g,x=(i.height-o)/f,y=Math.max(Math.min(b,x)/2,0),_=N(this.options.radius,y),v=(_-Math.max(_*r,0))/this._getVisibleDatasetWeightTotal();this.offsetX=p*_,this.offsetY=m*_,n.total=this.calculateTotal(),this.outerRadius=_-v*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-v*c,0),this.updateElements(s,0,s.length,t)}_circumference(t,e){const i=this.options,n=this._cachedMeta,s=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===n._parsed[t]||n.data[t].hidden?0:this.calculateCircumference(n._parsed[t]*s/st)}updateElements(t,e,i,n){const s="reset"===n,o=this.chart,a=o.chartArea,r=o.options.animation,l=(a.left+a.right)/2,h=(a.top+a.bottom)/2,c=s&&r.animateScale,d=c?0:this.innerRadius,u=c?0:this.outerRadius,{sharedOptions:g,includeOptions:f}=this._getSharedOptions(e,n);let p,m=this._getRotation();for(p=0;p<e;++p)m+=this._circumference(p,s);for(p=e;p<e+i;++p){const e=this._circumference(p,s),i=t[p],o={x:l+this.offsetX,y:h+this.offsetY,startAngle:m,endAngle:m+e,circumference:e,outerRadius:u,innerRadius:d};f&&(o.options=g||this.resolveDataElementOptions(p,i.active?"active":n)),m+=e,this.updateElement(i,p,o,n)}}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,n=0;for(i=0;i<e.length;i++){const s=t._parsed[i];null===s||isNaN(s)||!this.chart.getDataVisibility(i)||e[i].hidden||(n+=Math.abs(s))}return n}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?st*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],s=Gt(e._parsed[t],i.options.locale);return{label:n[t]||"",value:s}}getMaxBorderWidth(t){let e=0;const i=this.chart;let n,s,o,a,r;if(!t)for(n=0,s=i.data.datasets.length;n<s;++n)if(i.isDatasetVisible(n)){o=i.getDatasetMeta(n),t=o.data,a=o.controller;break}if(!t)return 0;for(n=0,s=t.length;n<s;++n)r=a.resolveDataElementOptions(n),"inner"!==r.borderAlign&&(e=Math.max(e,r.borderWidth||0,r.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,n=t.length;i<n;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(V(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}class qi extends Bi{static id="polarArea";static defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:n}}=t.legend.options;return e.labels.map(((e,s)=>{const o=t.getDatasetMeta(0).controller.getStyle(s);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:n,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(s),index:s}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],s=Gt(e._parsed[t].r,i.options.locale);return{label:n[t]||"",value:s}}parseObjectData(t,e,i,n){return We.bind(this)(t,e,i,n)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,i)=>{const n=this.getParsed(i).r;!isNaN(n)&&this.chart.getDataVisibility(i)&&(n<e.min&&(e.min=n),n>e.max&&(e.max=n))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,n=Math.min(e.right-e.left,e.bottom-e.top),s=Math.max(n/2,0),o=(s-Math.max(i.cutoutPercentage?s/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=s-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,i,n){const s="reset"===n,o=this.chart,a=o.options.animation,r=this._cachedMeta.rScale,l=r.xCenter,h=r.yCenter,c=r.getIndexAngle(0)-.5*nt;let d,u=c;const g=360/this.countVisibleElements();for(d=0;d<e;++d)u+=this._computeAngle(d,n,g);for(d=e;d<e+i;d++){const e=t[d];let i=u,f=u+this._computeAngle(d,n,g),p=o.getDataVisibility(d)?r.getDistanceFromCenterForValue(this.getParsed(d).r):0;u=f,s&&(a.animateScale&&(p=0),a.animateRotate&&(i=f=c));const m={x:l,y:h,innerRadius:0,outerRadius:p,startAngle:i,endAngle:f,options:this.resolveDataElementOptions(d,e.active?"active":n)};this.updateElement(e,d,m,n)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,i)=>{!isNaN(this.getParsed(i).r)&&this.chart.getDataVisibility(i)&&e++})),e}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?bt(this.resolveDataElementOptions(t,e).angle||i):0}}var Xi=Object.freeze({__proto__:null,BarController:class extends Bi{static id="bar";static defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}};static overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};parsePrimitiveData(t,e,i,n){return Vi(t,e,i,n)}parseArrayData(t,e,i,n){return Vi(t,e,i,n)}parseObjectData(t,e,i,n){const{iScale:s,vScale:o}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,l="x"===s.axis?a:r,h="x"===o.axis?a:r,c=[];let d,u,g,f;for(d=i,u=i+n;d<u;++d)f=e[d],g={},g[s.axis]=s.parse(J(f,l),d),c.push($i(J(f,h),g,o,d));return c}updateRangeFromParsed(t,e,i,n){super.updateRangeFromParsed(t,e,i,n);const s=i._custom;s&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,s.min),t.max=Math.max(t.max,s.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:n}=e,s=this.getParsed(t),o=s._custom,a=Ni(o)?"["+o.start+", "+o.end+"]":""+n.getLabelForValue(s[n.axis]);return{label:""+i.getLabelForValue(s[i.axis]),value:a}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,n){const s="reset"===n,{index:o,_cachedMeta:{vScale:a}}=this,r=a.getBasePixel(),l=a.isHorizontal(),h=this._getRuler(),{sharedOptions:c,includeOptions:d}=this._getSharedOptions(e,n);for(let u=e;u<e+i;u++){const e=this.getParsed(u),i=s||O(e[a.axis])?{base:r,head:r}:this._calculateBarValuePixels(u),g=this._calculateBarIndexPixels(u,h),f=(e._stacks||{})[a.axis],p={horizontal:l,base:i.base,enableBorderRadius:!f||Ni(e._custom)||o===f._top||o===f._bottom,x:l?i.head:g.center,y:l?g.center:i.head,height:l?g.size:Math.abs(i.size),width:l?Math.abs(i.size):g.size};d&&(p.options=c||this.resolveDataElementOptions(u,t[u].active?"active":n));const m=p.options||t[u].options;Wi(p,m,f,o),Yi(p,m,h.ratio),this.updateElement(t[u],u,p,n)}}_getStacks(t,e){const{iScale:i}=this._cachedMeta,n=i.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),s=i.options.stacked,o=[],a=this._cachedMeta.controller.getParsed(e),r=a&&a[i.axis],l=t=>{const e=t._parsed.find((t=>t[i.axis]===r)),n=e&&e[t.vScale.axis];if(O(n)||isNaN(n))return!0};for(const i of n)if((void 0===e||!l(i))&&((!1===s||-1===o.indexOf(i.stack)||void 0===s&&void 0===i.stack)&&o.push(i.stack),i.index===t))break;return o.length||o.push(void 0),o}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const n=this._getStacks(t,i),s=void 0!==e?n.indexOf(e):-1;return-1===s?n.length-1:s}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,n=[];let s,o;for(s=0,o=e.data.length;s<o;++s)n.push(i.getPixelForValue(this.getParsed(s)[i.axis],s));const a=t.barThickness;return{min:a||zi(e),pixels:n,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:a?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i,index:n},options:{base:s,minBarLength:o}}=this,a=s||0,r=this.getParsed(t),l=r._custom,h=Ni(l);let c,d,u=r[e.axis],g=0,f=i?this.applyStack(e,r,i):u;f!==u&&(g=f-u,f=u),h&&(u=l.barStart,f=l.barEnd-l.barStart,0!==u&&ut(u)!==ut(l.barEnd)&&(g=0),g+=u);const p=O(s)||h?g:s;let m=e.getPixelForValue(p);if(c=this.chart.getDataVisibility(t)?e.getPixelForValue(g+f):m,d=c-m,Math.abs(d)<o){d=function(t,e,i){return 0!==t?ut(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(d,e,a)*o,u===a&&(m-=d/2);const t=e.getPixelForDecimal(0),s=e.getPixelForDecimal(1),l=Math.min(t,s),g=Math.max(t,s);m=Math.max(Math.min(m,g),l),c=m+d,i&&!h&&(r._stacks[e.axis]._visualValues[n]=e.getValueForPixel(c)-e.getValueForPixel(m))}if(m===e.getPixelForValue(a)){const t=ut(d)*e.getLineWidthForValue(a)/2;m+=t,d-=t}return{size:d,base:m,head:c,center:c+d/2}}_calculateBarIndexPixels(t,e){const i=e.scale,n=this.options,s=n.skipNull,o=V(n.maxBarThickness,1/0);let a,r;if(e.grouped){const i=s?this._getStackCount(t):e.stackCount,l="flex"===n.barThickness?function(t,e,i,n){const s=e.pixels,o=s[t];let a=t>0?s[t-1]:null,r=t<s.length-1?s[t+1]:null;const l=i.categoryPercentage;null===a&&(a=o-(null===r?e.end-e.start:r-o)),null===r&&(r=o+o-a);const h=o-(o-Math.min(a,r))/2*l;return{chunk:Math.abs(r-a)/2*l/n,ratio:i.barPercentage,start:h}}(t,e,n,i):function(t,e,i,n){const s=i.barThickness;let o,a;return O(s)?(o=e.min*i.categoryPercentage,a=i.barPercentage):(o=s*n,a=1),{chunk:o/n,ratio:a,start:e.pixels[t]-o/2}}(t,e,n,i),h=this._getStackIndex(this.index,this._cachedMeta.stack,s?t:void 0);a=l.start+l.chunk*h+l.chunk/2,r=Math.min(o,l.chunk*l.ratio)}else a=i.getPixelForValue(this.getParsed(t)[i.axis],t),r=Math.min(o,e.min*e.ratio);return{base:a-r/2,head:a+r/2,center:a,size:r}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,n=i.length;let s=0;for(;s<n;++s)null===this.getParsed(s)[e.axis]||i[s].hidden||i[s].draw(this._ctx)}},BubbleController:class extends Bi{static id="bubble";static defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}};static overrides={scales:{x:{type:"linear"},y:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,n){const s=super.parsePrimitiveData(t,e,i,n);for(let t=0;t<s.length;t++)s[t]._custom=this.resolveDataElementOptions(t+i).radius;return s}parseArrayData(t,e,i,n){const s=super.parseArrayData(t,e,i,n);for(let t=0;t<s.length;t++){const n=e[i+t];s[t]._custom=V(n[2],this.resolveDataElementOptions(t+i).radius)}return s}parseObjectData(t,e,i,n){const s=super.parseObjectData(t,e,i,n);for(let t=0;t<s.length;t++){const n=e[i+t];s[t]._custom=V(n&&n.r&&+n.r,this.resolveDataElementOptions(t+i).radius)}return s}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:n,yScale:s}=e,o=this.getParsed(t),a=n.getLabelForValue(o.x),r=s.getLabelForValue(o.y),l=o._custom;return{label:i[t]||"",value:"("+a+", "+r+(l?", "+l:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,n){const s="reset"===n,{iScale:o,vScale:a}=this._cachedMeta,{sharedOptions:r,includeOptions:l}=this._getSharedOptions(e,n),h=o.axis,c=a.axis;for(let d=e;d<e+i;d++){const e=t[d],i=!s&&this.getParsed(d),u={},g=u[h]=s?o.getPixelForDecimal(.5):o.getPixelForValue(i[h]),f=u[c]=s?a.getBasePixel():a.getPixelForValue(i[c]);u.skip=isNaN(g)||isNaN(f),l&&(u.options=r||this.resolveDataElementOptions(d,e.active?"active":n),s&&(u.options.radius=0)),this.updateElement(e,d,u,n)}}resolveDataElementOptions(t,e){const i=this.getParsed(t);let n=super.resolveDataElementOptions(t,e);n.$shared&&(n=Object.assign({},n,{$shared:!1}));const s=n.radius;return"active"!==e&&(n.radius=0),n.radius+=V(i&&i._custom,s),n}},DoughnutController:Ui,LineController:class extends Bi{static id="line";static defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1};static overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:n=[],_dataset:s}=e,o=this.chart._animationsDisabled;let{start:a,count:r}=Bt(e,n,o);this._drawStart=a,this._drawCount=r,zt(e)&&(a=0,r=n.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!s._decimated,i.points=n;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(i,void 0,{animated:!o,options:l},t),this.updateElements(n,a,r,t)}updateElements(t,e,i,n){const s="reset"===n,{iScale:o,vScale:a,_stacked:r,_dataset:l}=this._cachedMeta,{sharedOptions:h,includeOptions:c}=this._getSharedOptions(e,n),d=o.axis,u=a.axis,{spanGaps:g,segment:f}=this.options,p=pt(g)?g:Number.POSITIVE_INFINITY,m=this.chart._animationsDisabled||s||"none"===n,b=e+i,x=t.length;let y=e>0&&this.getParsed(e-1);for(let i=0;i<x;++i){const g=t[i],x=m?g:{};if(i<e||i>=b){x.skip=!0;continue}const _=this.getParsed(i),v=O(_[u]),w=x[d]=o.getPixelForValue(_[d],i),M=x[u]=s||v?a.getBasePixel():a.getPixelForValue(r?this.applyStack(a,_,r):_[u],i);x.skip=isNaN(w)||isNaN(M)||v,x.stop=i>0&&Math.abs(_[d]-y[d])>p,f&&(x.parsed=_,x.raw=l.data[i]),c&&(x.options=h||this.resolveDataElementOptions(i,g.active?"active":n)),m||this.updateElement(g,i,x,n),y=_}}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,n=t.data||[];if(!n.length)return i;const s=n[0].size(this.resolveDataElementOptions(0)),o=n[n.length-1].size(this.resolveDataElementOptions(n.length-1));return Math.max(i,s,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}},PieController:class extends Ui{static id="pie";static defaults={cutout:0,rotation:0,circumference:360,radius:"100%"}},PolarAreaController:qi,RadarController:class extends Bi{static id="radar";static defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}};static overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}parseObjectData(t,e,i,n){return We.bind(this)(t,e,i,n)}update(t){const e=this._cachedMeta,i=e.dataset,n=e.data||[],s=e.iScale.getLabels();if(i.points=n,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:s.length===n.length,options:e};this.updateElement(i,void 0,o,t)}this.updateElements(n,0,n.length,t)}updateElements(t,e,i,n){const s=this._cachedMeta.rScale,o="reset"===n;for(let a=e;a<e+i;a++){const e=t[a],i=this.resolveDataElementOptions(a,e.active?"active":n),r=s.getPointPositionForValue(a,this.getParsed(a).r),l=o?s.xCenter:r.x,h=o?s.yCenter:r.y,c={x:l,y:h,angle:r.angle,skip:isNaN(l)||isNaN(h),options:i};this.updateElement(e,a,c,n)}}},ScatterController:class extends Bi{static id="scatter";static defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1};static overrides={interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}};getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:n,yScale:s}=e,o=this.getParsed(t),a=n.getLabelForValue(o.x),r=s.getLabelForValue(o.y);return{label:i[t]||"",value:"("+a+", "+r+")"}}update(t){const e=this._cachedMeta,{data:i=[]}=e,n=this.chart._animationsDisabled;let{start:s,count:o}=Bt(e,i,n);if(this._drawStart=s,this._drawCount=o,zt(e)&&(s=0,o=i.length),this.options.showLine){this.datasetElementType||this.addElements();const{dataset:s,_dataset:o}=e;s._chart=this.chart,s._datasetIndex=this.index,s._decimated=!!o._decimated,s.points=i;const a=this.resolveDatasetElementOptions(t);a.segment=this.options.segment,this.updateElement(s,void 0,{animated:!n,options:a},t)}else this.datasetElementType&&(delete e.dataset,this.datasetElementType=!1);this.updateElements(i,s,o,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(t,e,i,n){const s="reset"===n,{iScale:o,vScale:a,_stacked:r,_dataset:l}=this._cachedMeta,h=this.resolveDataElementOptions(e,n),c=this.getSharedOptions(h),d=this.includeOptions(n,c),u=o.axis,g=a.axis,{spanGaps:f,segment:p}=this.options,m=pt(f)?f:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||s||"none"===n;let x=e>0&&this.getParsed(e-1);for(let h=e;h<e+i;++h){const e=t[h],i=this.getParsed(h),f=b?e:{},y=O(i[g]),_=f[u]=o.getPixelForValue(i[u],h),v=f[g]=s||y?a.getBasePixel():a.getPixelForValue(r?this.applyStack(a,i,r):i[g],h);f.skip=isNaN(_)||isNaN(v)||y,f.stop=h>0&&Math.abs(i[u]-x[u])>m,p&&(f.parsed=i,f.raw=l.data[h]),d&&(f.options=c||this.resolveDataElementOptions(h,e.active?"active":n)),b||this.updateElement(e,h,f,n),x=i}this.updateSharedOptions(c,n,h)}getMaxOverflow(){const t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let t=0;for(let i=e.length-1;i>=0;--i)t=Math.max(t,e[i].size(this.resolveDataElementOptions(i))/2);return t>0&&t}const i=t.dataset,n=i.options&&i.options.borderWidth||0;if(!e.length)return n;const s=e[0].size(this.resolveDataElementOptions(0)),o=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(n,s,o)/2}}});function Gi(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class Ki{static override(t){Object.assign(Ki.prototype,t)}options;constructor(t){this.options=t||{}}init(){}formats(){return Gi()}parse(){return Gi()}format(){return Gi()}add(){return Gi()}diff(){return Gi()}startOf(){return Gi()}endOf(){return Gi()}}var Zi=Ki;function Ji(t,e,i,n){const{controller:s,data:o,_sorted:a}=t,r=s._cachedMeta.iScale,l=t.dataset&&t.dataset.options?t.dataset.options.spanGaps:null;if(r&&e===r.axis&&"r"!==e&&a&&o.length){const a=r._reversePixels?It:Et;if(!n){const n=a(o,e,i);if(l){const{vScale:e}=s._cachedMeta,{_parsed:i}=t,o=i.slice(0,n.lo+1).reverse().findIndex((t=>!O(t[e.axis])));n.lo-=Math.max(0,o);const a=i.slice(n.hi).findIndex((t=>!O(t[e.axis])));n.hi+=Math.max(0,a)}return n}if(s._sharedOptions){const t=o[0],n="function"==typeof t.getRange&&t.getRange(e);if(n){const t=a(o,e,i-n),s=a(o,e,i+n);return{lo:t.lo,hi:s.hi}}}}return{lo:0,hi:o.length-1}}function Qi(t,e,i,n,s){const o=t.getSortedVisibleDatasetMetas(),a=i[e];for(let t=0,i=o.length;t<i;++t){const{index:i,data:r}=o[t],{lo:l,hi:h}=Ji(o[t],e,a,s);for(let t=l;t<=h;++t){const e=r[t];e.skip||n(e,i,t)}}}function tn(t,e,i,n,s){const o=[];return s||t.isPointInArea(e)?(Qi(t,i,e,(function(i,a,r){(s||ce(i,t.chartArea,0))&&i.inRange(e.x,e.y,n)&&o.push({element:i,datasetIndex:a,index:r})}),!0),o):o}function en(t,e,i,n,s,o){return o||t.isPointInArea(e)?"r"!==i||n?function(t,e,i,n,s,o){let a=[];const r=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,n){const s=e?Math.abs(t.x-n.x):0,o=i?Math.abs(t.y-n.y):0;return Math.sqrt(Math.pow(s,2)+Math.pow(o,2))}}(i);let l=Number.POSITIVE_INFINITY;return Qi(t,i,e,(function(i,h,c){const d=i.inRange(e.x,e.y,s);if(n&&!d)return;const u=i.getCenterPoint(s);if(!o&&!t.isPointInArea(u)&&!d)return;const g=r(e,u);g<l?(a=[{element:i,datasetIndex:h,index:c}],l=g):g===l&&a.push({element:i,datasetIndex:h,index:c})})),a}(t,e,i,n,s,o):function(t,e,i,n){let s=[];return Qi(t,i,e,(function(t,i,o){const{startAngle:a,endAngle:r}=t.getProps(["startAngle","endAngle"],n),{angle:l}=_t(t,{x:e.x,y:e.y});kt(l,a,r)&&s.push({element:t,datasetIndex:i,index:o})})),s}(t,e,i,s):[]}function nn(t,e,i,n,s){const o=[],a="x"===i?"inXRange":"inYRange";let r=!1;return Qi(t,i,e,((t,n,l)=>{t[a]&&t[a](e[i],s)&&(o.push({element:t,datasetIndex:n,index:l}),r=r||t.inRange(e.x,e.y,s))})),n&&!r?[]:o}var sn={evaluateInteractionItems:Qi,modes:{index(t,e,i,n){const s=ei(e,t),o=i.axis||"x",a=i.includeInvisible||!1,r=i.intersect?tn(t,s,o,n,a):en(t,s,o,!1,n,a),l=[];return r.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=r[0].index,i=t.data[e];i&&!i.skip&&l.push({element:i,datasetIndex:t.index,index:e})})),l):[]},dataset(t,e,i,n){const s=ei(e,t),o=i.axis||"xy",a=i.includeInvisible||!1;let r=i.intersect?tn(t,s,o,n,a):en(t,s,o,!1,n,a);if(r.length>0){const e=r[0].datasetIndex,i=t.getDatasetMeta(e).data;r=[];for(let t=0;t<i.length;++t)r.push({element:i[t],datasetIndex:e,index:t})}return r},point:(t,e,i,n)=>tn(t,ei(e,t),i.axis||"xy",n,i.includeInvisible||!1),nearest(t,e,i,n){const s=ei(e,t),o=i.axis||"xy",a=i.includeInvisible||!1;return en(t,s,o,i.intersect,n,a)},x:(t,e,i,n)=>nn(t,ei(e,t),"x",i.intersect,n),y:(t,e,i,n)=>nn(t,ei(e,t),"y",i.intersect,n)}};const on=["left","top","right","bottom"];function an(t,e){return t.filter((t=>t.pos===e))}function rn(t,e){return t.filter((t=>-1===on.indexOf(t.pos)&&t.box.axis===e))}function ln(t,e){return t.sort(((t,i)=>{const n=e?i:t,s=e?t:i;return n.weight===s.weight?n.index-s.index:n.weight-s.weight}))}function hn(t,e,i,n){return Math.max(t[i],e[i])+Math.max(t[n],e[n])}function cn(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function dn(t,e,i,n){const{pos:s,box:o}=i,a=t.maxPadding;if(!B(s)){i.size&&(t[s]-=i.size);const e=n[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?o.height:o.width),i.size=e.size/e.count,t[s]+=i.size}o.getPadding&&cn(a,o.getPadding());const r=Math.max(0,e.outerWidth-hn(a,t,"left","right")),l=Math.max(0,e.outerHeight-hn(a,t,"top","bottom")),h=r!==t.w,c=l!==t.h;return t.w=r,t.h=l,i.horizontal?{same:h,other:c}:{same:c,other:h}}function un(t,e){const i=e.maxPadding;return function(t){const n={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{n[t]=Math.max(e[t],i[t])})),n}(t?["left","right"]:["top","bottom"])}function gn(t,e,i,n){const s=[];let o,a,r,l,h,c;for(o=0,a=t.length,h=0;o<a;++o){r=t[o],l=r.box,l.update(r.width||e.w,r.height||e.h,un(r.horizontal,e));const{same:a,other:d}=dn(e,i,r,n);h|=a&&s.length,c=c||d,l.fullSize||s.push(r)}return h&&gn(s,e,i,n)||c}function fn(t,e,i,n,s){t.top=i,t.left=e,t.right=e+n,t.bottom=i+s,t.width=n,t.height=s}function pn(t,e,i,n){const s=i.padding;let{x:o,y:a}=e;for(const r of t){const t=r.box,l=n[r.stack]||{count:1,placed:0,weight:1},h=r.stackWeight/l.weight||1;if(r.horizontal){const n=e.w*h,o=l.size||t.height;tt(l.start)&&(a=l.start),t.fullSize?fn(t,s.left,a,i.outerWidth-s.right-s.left,o):fn(t,e.left+l.placed,a,n,o),l.start=a,l.placed+=n,a=t.bottom}else{const n=e.h*h,a=l.size||t.width;tt(l.start)&&(o=l.start),t.fullSize?fn(t,o,s.top,a,i.outerHeight-s.bottom-s.top):fn(t,o,e.top+l.placed,a,n),l.start=o,l.placed+=n,o=t.right}}e.x=o,e.y=a}var mn={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,n){if(!t)return;const s=Ce(t.options.layout.padding),o=Math.max(e-s.width,0),a=Math.max(i-s.height,0),r=function(t){const e=function(t){const e=[];let i,n,s,o,a,r;for(i=0,n=(t||[]).length;i<n;++i)s=t[i],({position:o,options:{stack:a,stackWeight:r=1}}=s),e.push({index:i,box:s,pos:o,horizontal:s.isHorizontal(),weight:s.weight,stack:a&&o+a,stackWeight:r});return e}(t),i=ln(e.filter((t=>t.box.fullSize)),!0),n=ln(an(e,"left"),!0),s=ln(an(e,"right")),o=ln(an(e,"top"),!0),a=ln(an(e,"bottom")),r=rn(e,"x"),l=rn(e,"y");return{fullSize:i,leftAndTop:n.concat(o),rightAndBottom:s.concat(l).concat(a).concat(r),chartArea:an(e,"chartArea"),vertical:n.concat(s).concat(l),horizontal:o.concat(a).concat(r)}}(t.boxes),l=r.vertical,h=r.horizontal;H(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const c=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,d=Object.freeze({outerWidth:e,outerHeight:i,padding:s,availableWidth:o,availableHeight:a,vBoxMaxWidth:o/2/c,hBoxMaxHeight:a/2}),u=Object.assign({},s);cn(u,Ce(n));const g=Object.assign({maxPadding:u,w:o,h:a,x:s.left,y:s.top},s),f=function(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:n,stackWeight:s}=i;if(!t||!on.includes(n))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=s}return e}(t),{vBoxMaxWidth:n,hBoxMaxHeight:s}=e;let o,a,r;for(o=0,a=t.length;o<a;++o){r=t[o];const{fullSize:a}=r.box,l=i[r.stack],h=l&&r.stackWeight/l.weight;r.horizontal?(r.width=h?h*n:a&&e.availableWidth,r.height=s):(r.width=n,r.height=h?h*s:a&&e.availableHeight)}return i}(l.concat(h),d);gn(r.fullSize,g,d,f),gn(l,g,d,f),gn(h,g,d,f)&&gn(l,g,d,f),function(t){const e=t.maxPadding;function i(i){const n=Math.max(e[i]-t[i],0);return t[i]+=n,n}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(g),pn(r.leftAndTop,g,d,f),g.x+=g.w,g.y+=g.h,pn(r.rightAndBottom,g,d,f),t.chartArea={left:g.left,top:g.top,right:g.left+g.w,bottom:g.top+g.h,height:g.h,width:g.w},H(r.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(g.w,g.h,{left:0,top:0,right:0,bottom:0})}))}};class bn{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,n){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,n?Math.floor(e/n):i)}}isAttached(t){return!0}updateConfig(t){}}class xn extends bn{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const yn="$chartjs",_n={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},vn=t=>null===t||""===t,wn=!!si&&{passive:!0};function Mn(t,e,i){t&&t.canvas&&t.canvas.removeEventListener(e,i,wn)}function kn(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function Cn(t,e,i){const n=t.canvas,s=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||kn(i.addedNodes,n),e=e&&!kn(i.removedNodes,n);e&&i()}));return s.observe(document,{childList:!0,subtree:!0}),s}function Sn(t,e,i){const n=t.canvas,s=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||kn(i.removedNodes,n),e=e&&!kn(i.addedNodes,n);e&&i()}));return s.observe(document,{childList:!0,subtree:!0}),s}const Pn=new Map;let En=0;function In(){const t=window.devicePixelRatio;t!==En&&(En=t,Pn.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function Dn(t,e,i){const n=t.canvas,s=n&&Ke(n);if(!s)return;const o=Ft(((t,e)=>{const n=s.clientWidth;i(t,e),n<s.clientWidth&&i()}),window),a=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,n=e.contentRect.height;0===i&&0===n||o(i,n)}));return a.observe(s),function(t,e){Pn.size||window.addEventListener("resize",In),Pn.set(t,e)}(t,o),a}function Rn(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){Pn.delete(t),Pn.size||window.removeEventListener("resize",In)}(t)}function An(t,e,i){const n=t.canvas,s=Ft((e=>{null!==t.ctx&&i(function(t,e){const i=_n[t.type]||t.type,{x:n,y:s}=ei(t,e);return{type:i,chart:e,native:t,x:void 0!==n?n:null,y:void 0!==s?s:null}}(e,t))}),t);return function(t,e,i){t&&t.addEventListener(e,i,wn)}(n,e,s),s}class Tn extends bn{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,n=t.getAttribute("height"),s=t.getAttribute("width");if(t[yn]={initial:{height:n,width:s,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",vn(s)){const e=oi(t,"width");void 0!==e&&(t.width=e)}if(vn(n))if(""===t.style.height)t.height=t.width/(e||2);else{const e=oi(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e[yn])return!1;const i=e[yn].initial;["height","width"].forEach((t=>{const n=i[t];O(n)?e.removeAttribute(t):e.setAttribute(t,n)}));const n=i.style||{};return Object.keys(n).forEach((t=>{e.style[t]=n[t]})),e.width=e.width,delete e[yn],!0}addEventListener(t,e,i){this.removeEventListener(t,e);const n=t.$proxies||(t.$proxies={}),s={attach:Cn,detach:Sn,resize:Dn}[e]||An;n[e]=s(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),n=i[e];n&&(({attach:Rn,detach:Rn,resize:Rn}[e]||Mn)(t,e,n),i[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,n){return function(t,e,i,n){const s=Je(t),o=ti(s,"margin"),a=Ze(s.maxWidth,t,"clientWidth")||at,r=Ze(s.maxHeight,t,"clientHeight")||at,l=function(t,e,i){let n,s;if(void 0===e||void 0===i){const o=t&&Ke(t);if(o){const t=o.getBoundingClientRect(),a=Je(o),r=ti(a,"border","width"),l=ti(a,"padding");e=t.width-l.width-r.width,i=t.height-l.height-r.height,n=Ze(a.maxWidth,o,"clientWidth"),s=Ze(a.maxHeight,o,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:n||at,maxHeight:s||at}}(t,e,i);let{width:h,height:c}=l;if("content-box"===s.boxSizing){const t=ti(s,"border","width"),e=ti(s,"padding");h-=e.width+t.width,c-=e.height+t.height}return h=Math.max(0,h-o.width),c=Math.max(0,n?h/n:c-o.height),h=ii(Math.min(h,a,l.maxWidth)),c=ii(Math.min(c,r,l.maxHeight)),h&&!c&&(c=ii(h/2)),(void 0!==e||void 0!==i)&&n&&l.height&&c>l.height&&(c=l.height,h=ii(Math.floor(c*n))),{width:h,height:c}}(t,e,i,n)}isAttached(t){const e=t&&Ke(t);return!(!e||!e.isConnected)}}class Fn{static defaults={};static defaultRoutes=void 0;x;y;active=!1;options;$animations;tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return pt(this.x)&&pt(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const n={};return t.forEach((t=>{n[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),n}}function On(t,e,i,n,s){const o=V(n,0),a=Math.min(V(s,t.length),t.length);let r,l,h,c=0;for(i=Math.ceil(i),s&&(r=s-n,i=r/Math.floor(r/i)),h=o;h<0;)c++,h=Math.round(o+c*i);for(l=Math.max(o,0);l<a;l++)l===h&&(e.push(t[l]),c++,h=Math.round(o+c*i))}const Ln=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i,Bn=(t,e)=>Math.min(e||t,t);function zn(t,e){const i=[],n=t.length/e,s=t.length;let o=0;for(;o<s;o+=n)i.push(t[Math.floor(o)]);return i}function $n(t,e,i){const n=t.ticks.length,s=Math.min(e,n-1),o=t._startPixel,a=t._endPixel,r=1e-6;let l,h=t.getPixelForTick(s);if(!(i&&(l=1===n?Math.max(h-o,a-h):0===e?(t.getPixelForTick(1)-h)/2:(h-t.getPixelForTick(s-1))/2,h+=s<e?l:-l,h<o-r||h>a+r)))return h}function Vn(t){return t.drawTicks?t.tickLength:0}function Nn(t,e){if(!t.display)return 0;const i=Se(t.font,e),n=Ce(t.padding);return(L(t.text)?t.text.length:1)*i.lineHeight+n.height}function Wn(t,e,i){let n=Ot(t);return(i&&"right"!==e||!i&&"right"===e)&&(n=(t=>"left"===t?"right":"right"===t?"left":t)(n)),n}class Hn extends Fn{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:n}=this;return t=$(t,Number.POSITIVE_INFINITY),e=$(e,Number.NEGATIVE_INFINITY),i=$(i,Number.POSITIVE_INFINITY),n=$(n,Number.NEGATIVE_INFINITY),{min:$(t,i),max:$(e,n),minDefined:z(t),maxDefined:z(e)}}getMinMax(t){let e,{min:i,max:n,minDefined:s,maxDefined:o}=this.getUserBounds();if(s&&o)return{min:i,max:n};const a=this.getMatchingVisibleMetas();for(let r=0,l=a.length;r<l;++r)e=a[r].controller.getMinMax(this,t),s||(i=Math.min(i,e.min)),o||(n=Math.max(n,e.max));return i=o&&i>n?n:i,n=s&&i>n?i:n,{min:$(i,$(n,i)),max:$(n,$(i,n))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}getLabelItems(t=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(t))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){W(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:n,grace:s,ticks:o}=this.options,a=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,i){const{min:n,max:s}=t,o=N(e,(s-n)/2),a=(t,e)=>i&&0===t?0:t+e;return{min:a(n,-Math.abs(o)),max:a(s,o)}}(this,s,n),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const r=a<this.ticks.length;this._convertTicksToLabels(r?zn(this.ticks,a):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=function(t,e){const i=t.options.ticks,n=function(t){const e=t.options.offset,i=t._tickSize(),n=t._length/i+(e?0:1),s=t._maxLength/i;return Math.floor(Math.min(n,s))}(t),s=Math.min(i.maxTicksLimit||n,n),o=i.major.enabled?function(t){const e=[];let i,n;for(i=0,n=t.length;i<n;i++)t[i].major&&e.push(i);return e}(e):[],a=o.length,r=o[0],l=o[a-1],h=[];if(a>s)return function(t,e,i,n){let s,o=0,a=i[0];for(n=Math.ceil(n),s=0;s<t.length;s++)s===a&&(e.push(t[s]),o++,a=i[o*n])}(e,h,o,a/s),h;const c=function(t,e,i){const n=function(t){const e=t.length;let i,n;if(e<2)return!1;for(n=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==n)return!1;return n}(t),s=e.length/i;if(!n)return Math.max(s,1);const o=function(t){const e=[],i=Math.sqrt(t);let n;for(n=1;n<i;n++)t%n==0&&(e.push(n),e.push(t/n));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}(n);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>s)return e}return Math.max(s,1)}(o,e,s);if(a>0){let t,i;const n=a>1?Math.round((l-r)/(a-1)):null;for(On(e,h,c,O(n)?0:r-n,r),t=0,i=a-1;t<i;t++)On(e,h,c,o[t],o[t+1]);return On(e,h,c,l,O(n)?e.length:l+n),h}return On(e,h,c),h}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),r&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){W(this.options.afterUpdate,[this])}beforeSetDimensions(){W(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){W(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),W(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){W(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,n,s;for(i=0,n=t.length;i<n;i++)s=t[i],s.label=W(e.callback,[s.value,i,t],this)}afterTickToLabelConversion(){W(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){W(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=Bn(this.ticks.length,t.ticks.maxTicksLimit),n=e.minRotation||0,s=e.maxRotation;let o,a,r,l=n;if(!this._isVisible()||!e.display||n>=s||i<=1||!this.isHorizontal())return void(this.labelRotation=n);const h=this._getLabelSizes(),c=h.widest.width,d=h.highest.height,u=Ct(this.chart.width-c,0,this.maxWidth);o=t.offset?this.maxWidth/i:u/(i-1),c+6>o&&(o=u/(i-(t.offset?.5:1)),a=this.maxHeight-Vn(t.grid)-e.padding-Nn(t.title,this.chart.options.font),r=Math.sqrt(c*c+d*d),l=xt(Math.min(Math.asin(Ct((h.highest.height+6)/o,-1,1)),Math.asin(Ct(a/r,-1,1))-Math.asin(Ct(d/r,-1,1)))),l=Math.max(n,Math.min(s,l))),this.labelRotation=l}afterCalculateLabelRotation(){W(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){W(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:n,grid:s}}=this,o=this._isVisible(),a=this.isHorizontal();if(o){const o=Nn(n,e.options.font);if(a?(t.width=this.maxWidth,t.height=Vn(s)+o):(t.height=this.maxHeight,t.width=Vn(s)+o),i.display&&this.ticks.length){const{first:e,last:n,widest:s,highest:o}=this._getLabelSizes(),r=2*i.padding,l=bt(this.labelRotation),h=Math.cos(l),c=Math.sin(l);if(a){const e=i.mirror?0:c*s.width+h*o.height;t.height=Math.min(this.maxHeight,t.height+e+r)}else{const e=i.mirror?0:h*s.width+c*o.height;t.width=Math.min(this.maxWidth,t.width+e+r)}this._calculatePadding(e,n,c,h)}}this._handleMargins(),a?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,n){const{ticks:{align:s,padding:o},position:a}=this.options,r=0!==this.labelRotation,l="top"!==a&&"x"===this.axis;if(this.isHorizontal()){const a=this.getPixelForTick(0)-this.left,h=this.right-this.getPixelForTick(this.ticks.length-1);let c=0,d=0;r?l?(c=n*t.width,d=i*e.height):(c=i*t.height,d=n*e.width):"start"===s?d=e.width:"end"===s?c=t.width:"inner"!==s&&(c=t.width/2,d=e.width/2),this.paddingLeft=Math.max((c-a+o)*this.width/(this.width-a),0),this.paddingRight=Math.max((d-h+o)*this.width/(this.width-h),0)}else{let i=e.height/2,n=t.height/2;"start"===s?(i=0,n=t.height):"end"===s&&(i=e.height,n=0),this.paddingTop=i+o,this.paddingBottom=n+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){W(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)O(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=zn(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length,this.options.ticks.maxTicksLimit)}return t}_computeLabelSizes(t,e,i){const{ctx:n,_longestTextCache:s}=this,o=[],a=[],r=Math.floor(e/Bn(e,i));let l,h,c,d,u,g,f,p,m,b,x,y=0,_=0;for(l=0;l<e;l+=r){if(d=t[l].label,u=this._resolveTickFontOptions(l),n.font=g=u.string,f=s[g]=s[g]||{data:{},gc:[]},p=u.lineHeight,m=b=0,O(d)||L(d)){if(L(d))for(h=0,c=d.length;h<c;++h)x=d[h],O(x)||L(x)||(m=se(n,f.data,f.gc,m,x),b+=p)}else m=se(n,f.data,f.gc,m,d),b=p;o.push(m),a.push(b),y=Math.max(m,y),_=Math.max(b,_)}!function(t,e){H(t,(t=>{const i=t.gc,n=i.length/2;let s;if(n>e){for(s=0;s<n;++s)delete t.data[i[s]];i.splice(0,n)}}))}(s,e);const v=o.indexOf(y),w=a.indexOf(_),M=t=>({width:o[t]||0,height:a[t]||0});return{first:M(0),last:M(e-1),widest:M(v),highest:M(w),widths:o,heights:a}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return Ct(this._alignToPixels?ae(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return Ee(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=Ee(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=bt(this.labelRotation),i=Math.abs(Math.cos(e)),n=Math.abs(Math.sin(e)),s=this._getLabelSizes(),o=t.autoSkipPadding||0,a=s?s.widest.width+o:0,r=s?s.highest.height+o:0;return this.isHorizontal()?r*i>a*n?a/i:r/n:r*n<a*i?r/i:a/n}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,n=this.options,{grid:s,position:o,border:a}=n,r=s.offset,l=this.isHorizontal(),h=this.ticks.length+(r?1:0),c=Vn(s),d=[],u=a.setContext(this.getContext()),g=u.display?u.width:0,f=g/2,p=function(t){return ae(i,t,g)};let m,b,x,y,_,v,w,M,k,C,S,P;if("top"===o)m=p(this.bottom),v=this.bottom-c,M=m-f,C=p(t.top)+f,P=t.bottom;else if("bottom"===o)m=p(this.top),C=t.top,P=p(t.bottom)-f,v=m+f,M=this.top+c;else if("left"===o)m=p(this.right),_=this.right-c,w=m-f,k=p(t.left)+f,S=t.right;else if("right"===o)m=p(this.left),k=t.left,S=p(t.right)-f,_=m+f,w=this.left+c;else if("x"===e){if("center"===o)m=p((t.top+t.bottom)/2+.5);else if(B(o)){const t=Object.keys(o)[0],e=o[t];m=p(this.chart.scales[t].getPixelForValue(e))}C=t.top,P=t.bottom,v=m+f,M=v+c}else if("y"===e){if("center"===o)m=p((t.left+t.right)/2);else if(B(o)){const t=Object.keys(o)[0],e=o[t];m=p(this.chart.scales[t].getPixelForValue(e))}_=m-f,w=_-c,k=t.left,S=t.right}const E=V(n.ticks.maxTicksLimit,h),I=Math.max(1,Math.ceil(h/E));for(b=0;b<h;b+=I){const t=this.getContext(b),e=s.setContext(t),n=a.setContext(t),o=e.lineWidth,h=e.color,c=n.dash||[],u=n.dashOffset,g=e.tickWidth,f=e.tickColor,p=e.tickBorderDash||[],m=e.tickBorderDashOffset;x=$n(this,b,r),void 0!==x&&(y=ae(i,x,o),l?_=w=k=S=y:v=M=C=P=y,d.push({tx1:_,ty1:v,tx2:w,ty2:M,x1:k,y1:C,x2:S,y2:P,width:o,color:h,borderDash:c,borderDashOffset:u,tickWidth:g,tickColor:f,tickBorderDash:p,tickBorderDashOffset:m}))}return this._ticksLength=h,this._borderValue=m,d}_computeLabelItems(t){const e=this.axis,i=this.options,{position:n,ticks:s}=i,o=this.isHorizontal(),a=this.ticks,{align:r,crossAlign:l,padding:h,mirror:c}=s,d=Vn(i.grid),u=d+h,g=c?-h:u,f=-bt(this.labelRotation),p=[];let m,b,x,y,_,v,w,M,k,C,S,P,E="middle";if("top"===n)v=this.bottom-g,w=this._getXAxisLabelAlignment();else if("bottom"===n)v=this.top+g,w=this._getXAxisLabelAlignment();else if("left"===n){const t=this._getYAxisLabelAlignment(d);w=t.textAlign,_=t.x}else if("right"===n){const t=this._getYAxisLabelAlignment(d);w=t.textAlign,_=t.x}else if("x"===e){if("center"===n)v=(t.top+t.bottom)/2+u;else if(B(n)){const t=Object.keys(n)[0],e=n[t];v=this.chart.scales[t].getPixelForValue(e)+u}w=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===n)_=(t.left+t.right)/2-u;else if(B(n)){const t=Object.keys(n)[0],e=n[t];_=this.chart.scales[t].getPixelForValue(e)}w=this._getYAxisLabelAlignment(d).textAlign}"y"===e&&("start"===r?E="top":"end"===r&&(E="bottom"));const I=this._getLabelSizes();for(m=0,b=a.length;m<b;++m){x=a[m],y=x.label;const t=s.setContext(this.getContext(m));M=this.getPixelForTick(m)+s.labelOffset,k=this._resolveTickFontOptions(m),C=k.lineHeight,S=L(y)?y.length:1;const e=S/2,i=t.color,r=t.textStrokeColor,h=t.textStrokeWidth;let d,u=w;if(o?(_=M,"inner"===w&&(u=m===b-1?this.options.reverse?"left":"right":0===m?this.options.reverse?"right":"left":"center"),P="top"===n?"near"===l||0!==f?-S*C+C/2:"center"===l?-I.highest.height/2-e*C+C:-I.highest.height+C/2:"near"===l||0!==f?C/2:"center"===l?I.highest.height/2-e*C:I.highest.height-S*C,c&&(P*=-1),0===f||t.showLabelBackdrop||(_+=C/2*Math.sin(f))):(v=M,P=(1-S)*C/2),t.showLabelBackdrop){const e=Ce(t.backdropPadding),i=I.heights[m],n=I.widths[m];let s=P-e.top,o=0-e.left;switch(E){case"middle":s-=i/2;break;case"bottom":s-=i}switch(w){case"center":o-=n/2;break;case"right":o-=n;break;case"inner":m===b-1?o-=n:m>0&&(o-=n/2)}d={left:o,top:s,width:n+e.width,height:i+e.height,color:t.backdropColor}}p.push({label:y,font:k,textOffset:P,options:{rotation:f,color:i,strokeColor:r,strokeWidth:h,textAlign:u,textBaseline:E,translation:[_,v],backdrop:d}})}return p}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-bt(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align?i="right":"inner"===e.align&&(i="inner"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:n,padding:s}}=this.options,o=t+s,a=this._getLabelSizes().widest.width;let r,l;return"left"===e?n?(l=this.right+s,"near"===i?r="left":"center"===i?(r="center",l+=a/2):(r="right",l+=a)):(l=this.right-o,"near"===i?r="right":"center"===i?(r="center",l-=a/2):(r="left",l=this.left)):"right"===e?n?(l=this.left+s,"near"===i?r="right":"center"===i?(r="center",l-=a/2):(r="left",l-=a)):(l=this.left+o,"near"===i?r="left":"center"===i?(r="center",l+=a/2):(r="right",l=this.right)):r="right",{textAlign:r,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:n,width:s,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,n,s,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));return i>=0?e.setContext(this.getContext(i)).lineWidth:0}drawGrid(t){const e=this.options.grid,i=this.ctx,n=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let s,o;const a=(t,e,n)=>{n.width&&n.color&&(i.save(),i.lineWidth=n.width,i.strokeStyle=n.color,i.setLineDash(n.borderDash||[]),i.lineDashOffset=n.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(s=0,o=n.length;s<o;++s){const t=n[s];e.drawOnChartArea&&a({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&a({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{border:i,grid:n}}=this,s=i.setContext(this.getContext()),o=i.display?s.width:0;if(!o)return;const a=n.setContext(this.getContext(0)).lineWidth,r=this._borderValue;let l,h,c,d;this.isHorizontal()?(l=ae(t,this.left,o)-o/2,h=ae(t,this.right,a)+a/2,c=d=r):(c=ae(t,this.top,o)-o/2,d=ae(t,this.bottom,a)+a/2,l=h=r),e.save(),e.lineWidth=s.width,e.strokeStyle=s.color,e.beginPath(),e.moveTo(l,c),e.lineTo(h,d),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&de(e,i);const n=this.getLabelItems(t);for(const t of n){const i=t.options,n=t.font;be(e,t.label,0,t.textOffset,n,i)}i&&ue(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:n}}=this;if(!i.display)return;const s=Se(i.font),o=Ce(i.padding),a=i.align;let r=s.lineHeight/2;"bottom"===e||"center"===e||B(e)?(r+=o.bottom,L(i.text)&&(r+=s.lineHeight*(i.text.length-1))):r+=o.top;const{titleX:l,titleY:h,maxWidth:c,rotation:d}=function(t,e,i,n){const{top:s,left:o,bottom:a,right:r,chart:l}=t,{chartArea:h,scales:c}=l;let d,u,g,f=0;const p=a-s,m=r-o;if(t.isHorizontal()){if(u=Lt(n,o,r),B(i)){const t=Object.keys(i)[0],n=i[t];g=c[t].getPixelForValue(n)+p-e}else g="center"===i?(h.bottom+h.top)/2+p-e:Ln(t,i,e);d=r-o}else{if(B(i)){const t=Object.keys(i)[0],n=i[t];u=c[t].getPixelForValue(n)-m+e}else u="center"===i?(h.left+h.right)/2-m+e:Ln(t,i,e);g=Lt(n,a,s),f="left"===i?-lt:lt}return{titleX:u,titleY:g,maxWidth:d,rotation:f}}(this,r,e,a);be(t,i.text,0,0,s,{color:i.color,maxWidth:c,rotation:d,textAlign:Wn(a,e,n),textBaseline:"middle",translation:[l,h]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=V(t.grid&&t.grid.z,-1),n=V(t.border&&t.border.z,0);return this._isVisible()&&this.draw===Hn.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:n,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",n=[];let s,o;for(s=0,o=e.length;s<o;++s){const o=e[s];o[i]!==this.id||t&&o.type!==t||n.push(o)}return n}_resolveTickFontOptions(t){return Se(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class jn{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const n=this.items,s=t.id,o=this.scope+"."+s;if(!s)throw new Error("class does not have id: "+t);return s in n||(n[s]=t,function(t,e,i){const n=X(Object.create(null),[i?ne.get(i):{},ne.get(e),t.defaults]);ne.set(e,n),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const n=i.split("."),s=n.pop(),o=[t].concat(n).join("."),a=e[i].split("."),r=a.pop(),l=a.join(".");ne.route(o,s,l,r)}))}(e,t.defaultRoutes),t.descriptors&&ne.describe(e,t.descriptors)}(t,o,i),this.override&&ne.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,n=this.scope;i in e&&delete e[i],n&&i in ne[n]&&(delete ne[n][i],this.override&&delete Jt[i])}}class Yn{constructor(){this.controllers=new jn(Bi,"datasets",!0),this.elements=new jn(Fn,"elements"),this.plugins=new jn(Object,"plugins"),this.scales=new jn(Hn,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const n=i||this._getRegistryForType(e);i||n.isForType(e)||n===this.plugins&&e.id?this._exec(t,n,e):H(e,(e=>{const n=i||this._getRegistryForType(e);this._exec(t,n,e)}))}))}_exec(t,e,i){const n=Q(t);W(i["before"+n],[],i),e[t](i),W(i["after"+n],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const n=e.get(t);if(void 0===n)throw new Error('"'+t+'" is not a registered '+i+".");return n}}var Un=new Yn;class qn{constructor(){this._init=[]}notify(t,e,i,n){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const s=n?this._descriptors(t).filter(n):this._descriptors(t),o=this._notify(s,t,e,i);return"afterDestroy"===e&&(this._notify(s,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,i,n){n=n||{};for(const s of t){const t=s.plugin;if(!1===W(t[i],[e,n,s.options],t)&&n.cancelable)return!1}return!0}invalidate(){O(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,n=V(i.options&&i.options.plugins,{}),s=function(t){const e={},i=[],n=Object.keys(Un.plugins.items);for(let t=0;t<n.length;t++)i.push(Un.getPlugin(n[t]));const s=t.plugins||[];for(let t=0;t<s.length;t++){const n=s[t];-1===i.indexOf(n)&&(i.push(n),e[n.id]=!0)}return{plugins:i,localIds:e}}(i);return!1!==n||e?function(t,{plugins:e,localIds:i},n,s){const o=[],a=t.getContext();for(const r of e){const e=r.id,l=Xn(n[e],s);null!==l&&o.push({plugin:r,options:Gn(t.config,{plugin:r,local:i[e]},l,a)})}return o}(t,s,n,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,n=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(n(e,i),t,"stop"),this._notify(n(i,e),t,"start")}}function Xn(t,e){return e||!1!==t?!0===t?{}:t:null}function Gn(t,{plugin:e,local:i},n,s){const o=t.pluginScopeKeys(e),a=t.getOptionScopes(n,o);return i&&e.defaults&&a.push(e.defaults),t.createResolver(a,s,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Kn(t,e){const i=ne.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function Zn(t){if("x"===t||"y"===t||"r"===t)return t}function Jn(t,...e){if(Zn(t))return t;for(const n of e){const e=n.axis||("top"===(i=n.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.length>1&&Zn(t[0].toLowerCase());if(e)return e}var i;throw new Error(`Cannot determine type of '${t}' axis. Please provide 'axis' or 'position' option.`)}function Qn(t,e,i){if(i[e+"AxisID"]===t)return{axis:e}}function ts(t){const e=t.options||(t.options={});e.plugins=V(e.plugins,{}),e.scales=function(t,e){const i=Jt[t.type]||{scales:{}},n=e.scales||{},s=Kn(t.type,e),o=Object.create(null);return Object.keys(n).forEach((e=>{const a=n[e];if(!B(a))return console.error(`Invalid scale configuration for scale: ${e}`);if(a._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${e}`);const r=Jn(e,a,function(t,e){if(e.data&&e.data.datasets){const i=e.data.datasets.filter((e=>e.xAxisID===t||e.yAxisID===t));if(i.length)return Qn(t,"x",i[0])||Qn(t,"y",i[0])}return{}}(e,t),ne.scales[a.type]),l=function(t,e){return t===e?"_index_":"_value_"}(r,s),h=i.scales||{};o[e]=G(Object.create(null),[{axis:r},a,h[r],h[l]])})),t.data.datasets.forEach((i=>{const s=i.type||t.type,a=i.indexAxis||Kn(s,e),r=(Jt[s]||{}).scales||{};Object.keys(r).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,a),s=i[e+"AxisID"]||e;o[s]=o[s]||Object.create(null),G(o[s],[{axis:e},n[s],r[t]])}))})),Object.keys(o).forEach((t=>{const e=o[t];G(e,[ne.scales[e.type],ne.scale])})),o}(t,e)}function es(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const is=new Map,ns=new Set;function ss(t,e){let i=is.get(t);return i||(i=e(),is.set(t,i),ns.add(i)),i}const os=(t,e,i)=>{const n=J(e,i);void 0!==n&&t.add(n)};class as{constructor(t){this._config=function(t){return(t=t||{}).data=es(t.data),ts(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=es(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),ts(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return ss(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return ss(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return ss(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return ss(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let n=i.get(t);return n&&!e||(n=new Map,i.set(t,n)),n}getOptionScopes(t,e,i){const{options:n,type:s}=this,o=this._cachedScopes(t,i),a=o.get(e);if(a)return a;const r=new Set;e.forEach((e=>{t&&(r.add(t),e.forEach((e=>os(r,t,e)))),e.forEach((t=>os(r,n,t))),e.forEach((t=>os(r,Jt[s]||{},t))),e.forEach((t=>os(r,ne,t))),e.forEach((t=>os(r,Qt,t)))}));const l=Array.from(r);return 0===l.length&&l.push(Object.create(null)),ns.has(e)&&o.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,Jt[e]||{},ne.datasets[e]||{},{type:e},ne,Qt]}resolveNamedOptions(t,e,i,n=[""]){const s={$shared:!0},{resolver:o,subPrefixes:a}=rs(this._resolverCache,t,n);let r=o;(function(t,e){const{isScriptable:i,isIndexable:n}=Re(t);for(const s of e){const e=i(s),o=n(s),a=(o||e)&&t[s];if(e&&(et(a)||ls(a))||o&&L(a))return!0}return!1})(o,e)&&(s.$shared=!1,r=De(o,i=et(i)?i():i,this.createResolver(t,i,a)));for(const t of e)s[t]=r[t];return s}createResolver(t,e,i=[""],n){const{resolver:s}=rs(this._resolverCache,t,i);return B(e)?De(s,e,void 0,n):s}}function rs(t,e,i){let n=t.get(e);n||(n=new Map,t.set(e,n));const s=i.join();let o=n.get(s);return o||(o={resolver:Ie(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},n.set(s,o)),o}const ls=t=>B(t)&&Object.getOwnPropertyNames(t).some((e=>et(t[e]))),hs=["top","bottom","left","right","chartArea"];function cs(t,e){return"top"===t||"bottom"===t||-1===hs.indexOf(t)&&"x"===e}function ds(t,e){return function(i,n){return i[t]===n[t]?i[e]-n[e]:i[t]-n[t]}}function us(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),W(i&&i.onComplete,[t],e)}function gs(t){const e=t.chart,i=e.options.animation;W(i&&i.onProgress,[t],e)}function fs(t){return Ge()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const ps={},ms=t=>{const e=fs(t);return Object.values(ps).filter((t=>t.canvas===e)).pop()};function bs(t,e,i){const n=Object.keys(t);for(const s of n){const n=+s;if(n>=e){const o=t[s];delete t[s],(i>0||n>e)&&(t[n+i]=o)}}}class xs{static defaults=ne;static instances=ps;static overrides=Jt;static registry=Un;static version="4.4.9";static getChart=ms;static register(...t){Un.add(...t),ys()}static unregister(...t){Un.remove(...t),ys()}constructor(t,e){const i=this.config=new as(e),n=fs(t),s=ms(n);if(s)throw new Error("Canvas is already in use. Chart with ID '"+s.id+"' must be destroyed before the canvas with ID '"+s.canvas.id+"' can be reused.");const o=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||function(t){return!Ge()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?xn:Tn}(n)),this.platform.updateConfig(i);const a=this.platform.acquireContext(n,o.aspectRatio),r=a&&a.canvas,l=r&&r.height,h=r&&r.width;this.id=F(),this.ctx=a,this.canvas=r,this.width=h,this.height=l,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new qn,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let i;return function(...n){return e?(clearTimeout(i),i=setTimeout(t,e,n)):t.apply(this,n),e}}((t=>this.update(t)),o.resizeDelay||0),this._dataChanges=[],ps[this.id]=this,a&&r?(vi.listen(this,"complete",us),vi.listen(this,"progress",gs),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:n,_aspectRatio:s}=this;return O(t)?e&&s?s:n?i/n:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}get registry(){return Un}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():ni(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return re(this.canvas,this.ctx),this}stop(){return vi.stop(this),this}resize(t,e){vi.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,n=this.canvas,s=i.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(n,t,e,s),a=i.devicePixelRatio||this.platform.getDevicePixelRatio(),r=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,ni(this,a,!0)&&(this.notifyPlugins("resize",{size:o}),W(i.onResize,[this,o],this),this.attached&&this._doResize(r)&&this.render())}ensureScalesHaveIDs(){H(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,n=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let s=[];e&&(s=s.concat(Object.keys(e).map((t=>{const i=e[t],n=Jn(t,i),s="r"===n,o="x"===n;return{options:i,dposition:s?"chartArea":o?"bottom":"left",dtype:s?"radialLinear":o?"category":"linear"}})))),H(s,(e=>{const s=e.options,o=s.id,a=Jn(o,s),r=V(s.type,e.dtype);void 0!==s.position&&cs(s.position,a)===cs(e.dposition)||(s.position=e.dposition),n[o]=!0;let l=null;o in i&&i[o].type===r?l=i[o]:(l=new(Un.getScale(r))({id:o,type:r,ctx:this.ctx,chart:this}),i[l.id]=l),l.init(s,t)})),H(n,((t,e)=>{t||delete i[e]})),H(i,(t=>{mn.configure(this,t,t.options),mn.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(ds("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,n;for(this._removeUnreferencedMetasets(),i=0,n=e.length;i<n;i++){const n=e[i];let s=this.getDatasetMeta(i);const o=n.type||this.config.type;if(s.type&&s.type!==o&&(this._destroyDatasetMeta(i),s=this.getDatasetMeta(i)),s.type=o,s.indexAxis=n.indexAxis||Kn(o,this.options),s.order=n.order||0,s.index=i,s.label=""+n.label,s.visible=this.isDatasetVisible(i),s.controller)s.controller.updateIndex(i),s.controller.linkScales();else{const e=Un.getController(o),{datasetElementType:n,dataElementType:a}=ne.datasets[o];Object.assign(e,{dataElementType:Un.getElement(a),datasetElementType:n&&Un.getElement(n)}),s.controller=new e(this,i),t.push(s.controller)}}return this._updateMetasets(),t}_resetElements(){H(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),n=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const s=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!n&&-1===s.indexOf(e);e.buildOrUpdateElements(i),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=i.layout.autoPadding?o:0,this._updateLayout(o),n||H(s,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(ds("z","_idx"));const{_active:a,_lastEvent:r}=this;r?this._eventHandler(r,!0):a.length&&this._updateHoverStyles(a,a,!0),this.render()}_updateScales(){H(this.scales,(t=>{mn.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);it(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:n,count:s}of e)bs(t,n,"_removeElements"===i?-s:s)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),n=i(0);for(let t=1;t<e;t++)if(!it(n,i(t)))return;return Array.from(n).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;mn.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],H(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,et(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),n={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",n)&&(i.controller._update(e),n.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",n))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(vi.has(this)?this.attached&&!vi.running(this)&&vi.start(this):(this.draw(),us({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resizeBeforeDraw=null,this._resize(t,e)}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let n,s;for(n=0,s=e.length;n<s;++n){const s=e[n];t&&!s.visible||i.push(s)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i={meta:t,index:t.index,cancelable:!0},n=yi(this,t);!1!==this.notifyPlugins("beforeDatasetDraw",i)&&(n&&de(e,n),t.controller.draw(),n&&ue(e),i.cancelable=!1,this.notifyPlugins("afterDatasetDraw",i))}isPointInArea(t){return ce(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,i,n){const s=sn.modes[e];return"function"==typeof s?s(this,t,i,n):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let n=i.filter((t=>t&&t._dataset===e)).pop();return n||(n={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(n)),n}getContext(){return this.$context||(this.$context=Ee(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const n=i?"show":"hide",s=this.getDatasetMeta(t),o=s.controller._resolveAnimations(void 0,n);tt(e)?(s.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),o.update(s,{visible:i}),this.update((e=>e.datasetIndex===t?n:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),vi.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),re(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),delete ps[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,n)=>{e.addEventListener(this,i,n),t[i]=n},n=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};H(this.options.events,(t=>i(t,n)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,n)=>{e.addEventListener(this,i,n),t[i]=n},n=(i,n)=>{t[i]&&(e.removeEventListener(this,i,n),delete t[i])},s=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const a=()=>{n("attach",a),this.attached=!0,this.resize(),i("resize",s),i("detach",o)};o=()=>{this.attached=!1,n("resize",s),this._stop(),this._resize(0,0),i("attach",a)},e.isAttached(this.canvas)?a():o()}unbindEvents(){H(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},H(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const n=i?"set":"remove";let s,o,a,r;for("dataset"===e&&(s=this.getDatasetMeta(t[0].datasetIndex),s.controller["_"+n+"DatasetHoverStyle"]()),a=0,r=t.length;a<r;++a){o=t[a];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[n+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!j(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}isPluginEnabled(t){return 1===this._plugins._cache.filter((e=>e.plugin.id===t)).length}_updateHoverStyles(t,e,i){const n=this.options.hover,s=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=s(e,t),a=i?t:s(t,e);o.length&&this.updateHoverStyle(o,n.mode,!1),a.length&&n.mode&&this.updateHoverStyle(a,n.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},n=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,n))return;const s=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,n),(s||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:n=[],options:s}=this,o=e,a=this._getActiveElements(t,n,i,o),r=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),l=function(t,e,i,n){return i&&"mouseout"!==t.type?n?e:t:null}(t,this._lastEvent,i,r);i&&(this._lastEvent=null,W(s.onHover,[t,a,this],this),r&&W(s.onClick,[t,a,this],this));const h=!j(a,n);return(h||e)&&(this._active=a,this._updateHoverStyles(a,n,e)),this._lastEvent=l,h}_getActiveElements(t,e,i,n){if("mouseout"===t.type)return[];if(!i)return e;const s=this.options.hover;return this.getElementsAtEventForMode(t,s.mode,s,n)}}function ys(){return H(xs.instances,(t=>t._plugins.invalidate()))}function _s(t,e,i,n){return{x:i+t*Math.cos(e),y:n+t*Math.sin(e)}}function vs(t,e,i,n,s,o){const{x:a,y:r,startAngle:l,pixelMargin:h,innerRadius:c}=e,d=Math.max(e.outerRadius+n+i-h,0),u=c>0?c+n+i+h:0;let g=0;const f=s-l;if(n){const t=((c>0?c-n:0)+(d>0?d-n:0))/2;g=(f-(0!==t?f*t/(t+n):f))/2}const p=(f-Math.max(.001,f*d-i/nt)/d)/2,m=l+p+g,b=s-p-g,{outerStart:x,outerEnd:y,innerStart:_,innerEnd:v}=function(t,e,i,n){const s=we(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(i-e)/2,a=Math.min(o,n*e/2),r=t=>{const e=(i-Math.min(o,t))*n/2;return Ct(t,0,Math.min(o,e))};return{outerStart:r(s.outerStart),outerEnd:r(s.outerEnd),innerStart:Ct(s.innerStart,0,a),innerEnd:Ct(s.innerEnd,0,a)}}(e,u,d,b-m),w=d-x,M=d-y,k=m+x/w,C=b-y/M,S=u+_,P=u+v,E=m+_/S,I=b-v/P;if(t.beginPath(),o){const e=(k+C)/2;if(t.arc(a,r,d,k,e),t.arc(a,r,d,e,C),y>0){const e=_s(M,C,a,r);t.arc(e.x,e.y,y,C,b+lt)}const i=_s(P,b,a,r);if(t.lineTo(i.x,i.y),v>0){const e=_s(P,I,a,r);t.arc(e.x,e.y,v,b+lt,I+Math.PI)}const n=(b-v/u+(m+_/u))/2;if(t.arc(a,r,u,b-v/u,n,!0),t.arc(a,r,u,n,m+_/u,!0),_>0){const e=_s(S,E,a,r);t.arc(e.x,e.y,_,E+Math.PI,m-lt)}const s=_s(w,m,a,r);if(t.lineTo(s.x,s.y),x>0){const e=_s(w,k,a,r);t.arc(e.x,e.y,x,m-lt,k)}}else{t.moveTo(a,r);const e=Math.cos(k)*d+a,i=Math.sin(k)*d+r;t.lineTo(e,i);const n=Math.cos(C)*d+a,s=Math.sin(C)*d+r;t.lineTo(n,s)}t.closePath()}class ws extends Fn{static id="arc";static defaults={borderAlign:"center",borderColor:"#fff",borderDash:[],borderDashOffset:0,borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0};static defaultRoutes={backgroundColor:"backgroundColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t};circumference;endAngle;fullCircles;innerRadius;outerRadius;pixelMargin;startAngle;constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.getProps(["x","y"],i),{angle:s,distance:o}=_t(n,{x:t,y:e}),{startAngle:a,endAngle:r,innerRadius:l,outerRadius:h,circumference:c}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),d=(this.options.spacing+this.options.borderWidth)/2,u=V(c,r-a),g=kt(s,a,r)&&a!==r,f=u>=st||g,p=St(o,l+d,h+d);return f&&p}getCenterPoint(t){const{x:e,y:i,startAngle:n,endAngle:s,innerRadius:o,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],t),{offset:r,spacing:l}=this.options,h=(n+s)/2,c=(o+a+l+r)/2;return{x:e+Math.cos(h)*c,y:i+Math.sin(h)*c}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,n=(e.offset||0)/4,s=(e.spacing||0)/2,o=e.circular;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>st?Math.floor(i/st):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();const a=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(a)*n,Math.sin(a)*n);const r=n*(1-Math.sin(Math.min(nt,i||0)));t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor,function(t,e,i,n,s){const{fullCircles:o,startAngle:a,circumference:r}=e;let l=e.endAngle;if(o){vs(t,e,i,n,l,s);for(let e=0;e<o;++e)t.fill();isNaN(r)||(l=a+(r%st||st))}vs(t,e,i,n,l,s),t.fill()}(t,this,r,s,o),function(t,e,i,n,s){const{fullCircles:o,startAngle:a,circumference:r,options:l}=e,{borderWidth:h,borderJoinStyle:c,borderDash:d,borderDashOffset:u}=l,g="inner"===l.borderAlign;if(!h)return;t.setLineDash(d||[]),t.lineDashOffset=u,g?(t.lineWidth=2*h,t.lineJoin=c||"round"):(t.lineWidth=h,t.lineJoin=c||"bevel");let f=e.endAngle;if(o){vs(t,e,i,n,f,s);for(let e=0;e<o;++e)t.stroke();isNaN(r)||(f=a+(r%st||st))}g&&function(t,e,i){const{startAngle:n,pixelMargin:s,x:o,y:a,outerRadius:r,innerRadius:l}=e;let h=s/r;t.beginPath(),t.arc(o,a,r,n-h,i+h),l>s?(h=s/l,t.arc(o,a,l,i+h,n-h,!0)):t.arc(o,a,s,i+lt,n-lt),t.closePath(),t.clip()}(t,e,f),o||(vs(t,e,i,n,f,s),t.stroke())}(t,this,r,s,o),t.restore()}}function Ms(t,e,i=e){t.lineCap=V(i.borderCapStyle,e.borderCapStyle),t.setLineDash(V(i.borderDash,e.borderDash)),t.lineDashOffset=V(i.borderDashOffset,e.borderDashOffset),t.lineJoin=V(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=V(i.borderWidth,e.borderWidth),t.strokeStyle=V(i.borderColor,e.borderColor)}function ks(t,e,i){t.lineTo(i.x,i.y)}function Cs(t,e,i={}){const n=t.length,{start:s=0,end:o=n-1}=i,{start:a,end:r}=e,l=Math.max(s,a),h=Math.min(o,r),c=s<a&&o<a||s>r&&o>r;return{count:n,start:l,loop:e.loop,ilen:h<l&&!c?n+h-l:h-l}}function Ss(t,e,i,n){const{points:s,options:o}=e,{count:a,start:r,loop:l,ilen:h}=Cs(s,i,n),c=function(t){return t.stepped?ge:t.tension||"monotone"===t.cubicInterpolationMode?fe:ks}(o);let d,u,g,{move:f=!0,reverse:p}=n||{};for(d=0;d<=h;++d)u=s[(r+(p?h-d:d))%a],u.skip||(f?(t.moveTo(u.x,u.y),f=!1):c(t,g,u,p,o.stepped),g=u);return l&&(u=s[(r+(p?h:0))%a],c(t,g,u,p,o.stepped)),!!l}function Ps(t,e,i,n){const s=e.points,{count:o,start:a,ilen:r}=Cs(s,i,n),{move:l=!0,reverse:h}=n||{};let c,d,u,g,f,p,m=0,b=0;const x=t=>(a+(h?r-t:t))%o,y=()=>{g!==f&&(t.lineTo(m,f),t.lineTo(m,g),t.lineTo(m,p))};for(l&&(d=s[x(0)],t.moveTo(d.x,d.y)),c=0;c<=r;++c){if(d=s[x(c)],d.skip)continue;const e=d.x,i=d.y,n=0|e;n===u?(i<g?g=i:i>f&&(f=i),m=(b*m+e)/++b):(y(),t.lineTo(e,i),u=n,b=0,g=f=i),p=i}y()}function Es(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i?Ss:Ps}const Is="function"==typeof Path2D;class Ds extends Fn{static id="line";static defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const n=i.spanGaps?this._loop:this._fullLoop;Xe(this._points,i,t,n,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const i=t.points,n=t.options.spanGaps,s=i.length;if(!s)return[];const o=!!t._loop,{start:a,end:r}=function(t,e,i,n){let s=0,o=e-1;if(i&&!n)for(;s<e&&!t[s].skip;)s++;for(;s<e&&t[s].skip;)s++;for(s%=e,i&&(o+=s);o>s&&t[o%e].skip;)o--;return o%=e,{start:s,end:o}}(i,s,o,n);return function(t,e,i,n){return n&&n.setContext&&i?function(t,e,i,n){const s=t._chart.getContext(),o=mi(t.options),{_datasetIndex:a,options:{spanGaps:r}}=t,l=i.length,h=[];let c=o,d=e[0].start,u=d;function g(t,e,n,s){const o=r?-1:1;if(t!==e){for(t+=l;i[t%l].skip;)t-=o;for(;i[e%l].skip;)e+=o;t%l!=e%l&&(h.push({start:t%l,end:e%l,loop:n,style:s}),c=s,d=e%l)}}for(const t of e){d=r?d:t.start;let e,o=i[d%l];for(u=d+1;u<=t.end;u++){const r=i[u%l];e=mi(n.setContext(Ee(s,{type:"segment",p0:o,p1:r,p0DataIndex:(u-1)%l,p1DataIndex:u%l,datasetIndex:a}))),bi(e,c)&&g(d,u-1,t.loop,c),o=r,c=e}d<u-1&&g(d,u-1,t.loop,c)}return h}(t,e,i,n):e}(t,!0===n?[{start:a,end:r,loop:o}]:function(t,e,i,n){const s=t.length,o=[];let a,r=e,l=t[e];for(a=e+1;a<=i;++a){const i=t[a%s];i.skip||i.stop?l.skip||(n=!1,o.push({start:e%s,end:(a-1)%s,loop:n}),e=r=i.stop?a:null):(r=a,l.skip&&(e=a)),l=i}return null!==r&&o.push({start:e%s,end:r%s,loop:n}),o}(i,a,r<a?r+s:r,!!t._fullLoop&&0===a&&r===s-1),i,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,n=t[e],s=this.points,o=pi(this,{property:e,start:n,end:n});if(!o.length)return;const a=[],r=function(t){return t.stepped?ri:t.tension||"monotone"===t.cubicInterpolationMode?li:ai}(i);let l,h;for(l=0,h=o.length;l<h;++l){const{start:h,end:c}=o[l],d=s[h],u=s[c];if(d===u){a.push(d);continue}const g=r(d,u,Math.abs((n-d[e])/(u[e]-d[e])),i.stepped);g[e]=t[e],a.push(g)}return 1===a.length?a[0]:a}pathSegment(t,e,i){return Es(this)(t,this,e,i)}path(t,e,i){const n=this.segments,s=Es(this);let o=this._loop;e=e||0,i=i||this.points.length-e;for(const a of n)o&=s(t,this,a,{start:e,end:e+i-1});return!!o}draw(t,e,i,n){const s=this.options||{};(this.points||[]).length&&s.borderWidth&&(t.save(),function(t,e,i,n){Is&&!e.options.segment?function(t,e,i,n){let s=e._path;s||(s=e._path=new Path2D,e.path(s,i,n)&&s.closePath()),Ms(t,e.options),t.stroke(s)}(t,e,i,n):function(t,e,i,n){const{segments:s,options:o}=e,a=Es(e);for(const r of s)Ms(t,o,r.style),t.beginPath(),a(t,e,r,{start:i,end:i+n-1})&&t.closePath(),t.stroke()}(t,e,i,n)}(t,this,i,n),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function Rs(t,e,i,n){const s=t.options,{[i]:o}=t.getProps([i],n);return Math.abs(e-o)<s.radius+s.hitRadius}class As extends Fn{static id="point";parsed;skip;stop;static defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.options,{x:s,y:o}=this.getProps(["x","y"],i);return Math.pow(t-s,2)+Math.pow(e-o,2)<Math.pow(n.hitRadius+n.radius,2)}inXRange(t,e){return Rs(this,t,"x",e)}inYRange(t,e){return Rs(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!ce(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,le(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function Ts(t,e){const{x:i,y:n,base:s,width:o,height:a}=t.getProps(["x","y","base","width","height"],e);let r,l,h,c,d;return t.horizontal?(d=a/2,r=Math.min(i,s),l=Math.max(i,s),h=n-d,c=n+d):(d=o/2,r=i-d,l=i+d,h=Math.min(n,s),c=Math.max(n,s)),{left:r,top:h,right:l,bottom:c}}function Fs(t,e,i,n){return t?0:Ct(e,i,n)}function Os(t,e,i,n){const s=null===e,o=null===i,a=t&&!(s&&o)&&Ts(t,n);return a&&(s||St(e,a.left,a.right))&&(o||St(i,a.top,a.bottom))}function Ls(t,e){t.rect(e.x,e.y,e.w,e.h)}function Bs(t,e,i={}){const n=t.x!==i.x?-e:0,s=t.y!==i.y?-e:0,o=(t.x+t.w!==i.x+i.w?e:0)-n,a=(t.y+t.h!==i.y+i.h?e:0)-s;return{x:t.x+n,y:t.y+s,w:t.w+o,h:t.h+a,radius:t.radius}}class zs extends Fn{static id="bar";static defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:n}}=this,{inner:s,outer:o}=function(t){const e=Ts(t),i=e.right-e.left,n=e.bottom-e.top,s=function(t,e,i){const n=t.options.borderWidth,s=t.borderSkipped,o=Me(n);return{t:Fs(s.top,o.top,0,i),r:Fs(s.right,o.right,0,e),b:Fs(s.bottom,o.bottom,0,i),l:Fs(s.left,o.left,0,e)}}(t,i/2,n/2),o=function(t,e,i){const{enableBorderRadius:n}=t.getProps(["enableBorderRadius"]),s=t.options.borderRadius,o=ke(s),a=Math.min(e,i),r=t.borderSkipped,l=n||B(s);return{topLeft:Fs(!l||r.top||r.left,o.topLeft,0,a),topRight:Fs(!l||r.top||r.right,o.topRight,0,a),bottomLeft:Fs(!l||r.bottom||r.left,o.bottomLeft,0,a),bottomRight:Fs(!l||r.bottom||r.right,o.bottomRight,0,a)}}(t,i/2,n/2);return{outer:{x:e.left,y:e.top,w:i,h:n,radius:o},inner:{x:e.left+s.l,y:e.top+s.t,w:i-s.l-s.r,h:n-s.t-s.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(s.t,s.l)),topRight:Math.max(0,o.topRight-Math.max(s.t,s.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(s.b,s.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(s.b,s.r))}}}}(this),a=(r=o.radius).topLeft||r.topRight||r.bottomLeft||r.bottomRight?xe:Ls;var r;t.save(),o.w===s.w&&o.h===s.h||(t.beginPath(),a(t,Bs(o,e,s)),t.clip(),a(t,Bs(s,-e,o)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),a(t,Bs(s,e)),t.fillStyle=n,t.fill(),t.restore()}inRange(t,e,i){return Os(this,t,e,i)}inXRange(t,e){return Os(this,t,null,e)}inYRange(t,e){return Os(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:n,horizontal:s}=this.getProps(["x","y","base","horizontal"],t);return{x:s?(e+n)/2:e,y:s?i:(i+n)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}var $s=Object.freeze({__proto__:null,ArcElement:ws,BarElement:zs,LineElement:Ds,PointElement:As});const Vs=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],Ns=Vs.map((t=>t.replace("rgb(","rgba(").replace(")",", 0.5)")));function Ws(t){return Vs[t%Vs.length]}function Hs(t){return Ns[t%Ns.length]}function js(t){let e;for(e in t)if(t[e].borderColor||t[e].backgroundColor)return!0;return!1}var Ys={id:"colors",defaults:{enabled:!0,forceOverride:!1},beforeLayout(t,e,i){if(!i.enabled)return;const{data:{datasets:n},options:s}=t.config,{elements:o}=s,a=js(n)||(r=s)&&(r.borderColor||r.backgroundColor)||o&&js(o)||"rgba(0,0,0,0.1)"!==ne.borderColor||"rgba(0,0,0,0.1)"!==ne.backgroundColor;var r;if(!i.forceOverride&&a)return;const l=function(t){let e=0;return(i,n)=>{const s=t.getDatasetMeta(n).controller;s instanceof Ui?e=function(t,e){return t.backgroundColor=t.data.map((()=>Ws(e++))),e}(i,e):s instanceof qi?e=function(t,e){return t.backgroundColor=t.data.map((()=>Hs(e++))),e}(i,e):s&&(e=function(t,e){return t.borderColor=Ws(e),t.backgroundColor=Hs(e),++e}(i,e))}}(t);n.forEach(l)}};function Us(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,writable:!0,value:e})}}function qs(t){t.data.datasets.forEach((t=>{Us(t)}))}var Xs={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void qs(t);const n=t.width;t.data.datasets.forEach(((e,s)=>{const{_data:o,indexAxis:a}=e,r=t.getDatasetMeta(s),l=o||e.data;if("y"===Pe([a,t.options.indexAxis]))return;if(!r.controller.supportsDecimation)return;const h=t.scales[r.xAxisID];if("linear"!==h.type&&"time"!==h.type)return;if(t.options.parsing)return;let c,{start:d,count:u}=function(t,e){const i=e.length;let n,s=0;const{iScale:o}=t,{min:a,max:r,minDefined:l,maxDefined:h}=o.getUserBounds();return l&&(s=Ct(Et(e,o.axis,a).lo,0,i-1)),n=h?Ct(Et(e,o.axis,r).hi+1,s,i)-s:i-s,{start:s,count:n}}(r,l);if(u<=(i.threshold||4*n))Us(e);else{switch(O(o)&&(e._data=l,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":c=function(t,e,i,n,s){const o=s.samples||n;if(o>=i)return t.slice(e,e+i);const a=[],r=(i-2)/(o-2);let l=0;const h=e+i-1;let c,d,u,g,f,p=e;for(a[l++]=t[p],c=0;c<o-2;c++){let n,s=0,o=0;const h=Math.floor((c+1)*r)+1+e,m=Math.min(Math.floor((c+2)*r)+1,i)+e,b=m-h;for(n=h;n<m;n++)s+=t[n].x,o+=t[n].y;s/=b,o/=b;const x=Math.floor(c*r)+1+e,y=Math.min(Math.floor((c+1)*r)+1,i)+e,{x:_,y:v}=t[p];for(u=g=-1,n=x;n<y;n++)g=.5*Math.abs((_-s)*(t[n].y-v)-(_-t[n].x)*(o-v)),g>u&&(u=g,d=t[n],f=n);a[l++]=d,p=f}return a[l++]=t[h],a}(l,d,u,n,i);break;case"min-max":c=function(t,e,i,n){let s,o,a,r,l,h,c,d,u,g,f=0,p=0;const m=[],b=e+i-1,x=t[e].x,y=t[b].x-x;for(s=e;s<e+i;++s){o=t[s],a=(o.x-x)/y*n,r=o.y;const e=0|a;if(e===l)r<u?(u=r,h=s):r>g&&(g=r,c=s),f=(p*f+o.x)/++p;else{const i=s-1;if(!O(h)&&!O(c)){const e=Math.min(h,c),n=Math.max(h,c);e!==d&&e!==i&&m.push({...t[e],x:f}),n!==d&&n!==i&&m.push({...t[n],x:f})}s>0&&i!==d&&m.push(t[i]),m.push(o),l=e,p=0,u=g=r,h=c=d=s}}return m}(l,d,u,n);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=c}}))},destroy(t){qs(t)}};function Gs(t,e,i,n){if(n)return;let s=e[t],o=i[t];return"angle"===t&&(s=Mt(s),o=Mt(o)),{property:t,start:s,end:o}}function Ks(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function Zs(t,e,i,n){return t&&e?n(t[i],e[i]):t?t[i]:e?e[i]:0}function Js(t,e){let i=[],n=!1;return L(t)?(n=!0,i=t):i=function(t,e){const{x:i=null,y:n=null}=t||{},s=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=Ks(t,e,s);const a=s[t],r=s[e];null!==n?(o.push({x:a.x,y:n}),o.push({x:r.x,y:n})):null!==i&&(o.push({x:i,y:a.y}),o.push({x:i,y:r.y}))})),o}(t,e),i.length?new Ds({points:i,options:{tension:0},_loop:n,_fullLoop:n}):null}function Qs(t){return t&&!1!==t.fill}function to(t,e,i){let n=t[e].fill;const s=[e];let o;if(!i)return n;for(;!1!==n&&-1===s.indexOf(n);){if(!z(n))return n;if(o=t[n],!o)return!1;if(o.visible)return n;s.push(n),n=o.fill}return!1}function eo(t,e,i){const n=function(t){const e=t.options,i=e.fill;let n=V(i&&i.target,i);return void 0===n&&(n=!!e.backgroundColor),!1!==n&&null!==n&&(!0===n?"origin":n)}(t);if(B(n))return!isNaN(n.value)&&n;let s=parseFloat(n);return z(s)&&Math.floor(s)===s?function(t,e,i,n){return"-"!==t&&"+"!==t||(i=e+i),!(i===e||i<0||i>=n)&&i}(n[0],e,s,i):["origin","start","end","stack","shape"].indexOf(n)>=0&&n}function io(t,e,i){const n=[];for(let s=0;s<i.length;s++){const o=i[s],{first:a,last:r,point:l}=no(o,e,"x");if(!(!l||a&&r))if(a)n.unshift(l);else if(t.push(l),!r)break}t.push(...n)}function no(t,e,i){const n=t.interpolate(e,i);if(!n)return{};const s=n[i],o=t.segments,a=t.points;let r=!1,l=!1;for(let t=0;t<o.length;t++){const e=o[t],n=a[e.start][i],h=a[e.end][i];if(St(s,n,h)){r=s===n,l=s===h;break}}return{first:r,last:l,point:n}}class so{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:n,y:s,radius:o}=this;return e=e||{start:0,end:st},t.arc(n,s,o,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:n}=this,s=t.angle;return{x:e+Math.cos(s)*n,y:i+Math.sin(s)*n,angle:s}}}function oo(t,e,i){const n=function(t){const{chart:e,fill:i,line:n}=t;if(z(i))return function(t,e){const i=t.getDatasetMeta(e);return i&&t.isDatasetVisible(e)?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:n}=t,s=[],o=n.segments,a=n.points,r=function(t,e){const i=[],n=t.getMatchingVisibleMetas("line");for(let t=0;t<n.length;t++){const s=n[t];if(s.index===e)break;s.hidden||i.unshift(s.dataset)}return i}(e,i);r.push(Js({x:null,y:e.bottom},n));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)io(s,a[t],r)}return new Ds({points:s,options:{}})}(t);if("shape"===i)return!0;const s=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:i}=t,n=e.options,s=e.getLabels().length,o=n.reverse?e.max:e.min,a=function(t,e,i){let n;return n="start"===t?i:"end"===t?e.options.reverse?e.min:e.max:B(t)?t.value:e.getBaseValue(),n}(i,e,o),r=[];if(n.grid.circular){const t=e.getPointPositionForValue(0,o);return new so({x:t.x,y:t.y,radius:e.getDistanceFromCenterForValue(a)})}for(let t=0;t<s;++t)r.push(e.getPointPositionForValue(t,a));return r}(t):function(t){const{scale:e={},fill:i}=t,n=function(t,e){let i=null;return"start"===t?i=e.bottom:"end"===t?i=e.top:B(t)?i=e.getPixelForValue(t.value):e.getBasePixel&&(i=e.getBasePixel()),i}(i,e);if(z(n)){const t=e.isHorizontal();return{x:t?n:null,y:t?null:n}}return null}(t)}(t);return s instanceof so?s:Js(s,n)}(e),{chart:s,index:o,line:a,scale:r,axis:l}=e,h=a.options,c=h.fill,d=h.backgroundColor,{above:u=d,below:g=d}=c||{},f=s.getDatasetMeta(o),p=yi(s,f);n&&a.points.length&&(de(t,i),function(t,e){const{line:i,target:n,above:s,below:o,area:a,scale:r,clip:l}=e,h=i._loop?"angle":e.axis;t.save(),"x"===h&&o!==s&&(ao(t,n,a.top),ro(t,{line:i,target:n,color:s,scale:r,property:h,clip:l}),t.restore(),t.save(),ao(t,n,a.bottom)),ro(t,{line:i,target:n,color:o,scale:r,property:h,clip:l}),t.restore()}(t,{line:a,target:n,above:u,below:g,area:i,scale:r,axis:l,clip:p}),ue(t))}function ao(t,e,i){const{segments:n,points:s}=e;let o=!0,a=!1;t.beginPath();for(const r of n){const{start:n,end:l}=r,h=s[n],c=s[Ks(n,l,s)];o?(t.moveTo(h.x,h.y),o=!1):(t.lineTo(h.x,i),t.lineTo(h.x,h.y)),a=!!e.pathSegment(t,r,{move:a}),a?t.closePath():t.lineTo(c.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function ro(t,e){const{line:i,target:n,property:s,color:o,scale:a,clip:r}=e,l=function(t,e,i){const n=t.segments,s=t.points,o=e.points,a=[];for(const t of n){let{start:n,end:r}=t;r=Ks(n,r,s);const l=Gs(i,s[n],s[r],t.loop);if(!e.segments){a.push({source:t,target:l,start:s[n],end:s[r]});continue}const h=pi(e,l);for(const e of h){const n=Gs(i,o[e.start],o[e.end],e.loop),r=fi(t,s,n);for(const t of r)a.push({source:t,target:e,start:{[i]:Zs(l,n,"start",Math.max)},end:{[i]:Zs(l,n,"end",Math.min)}})}}return a}(i,n,s);for(const{source:e,target:h,start:c,end:d}of l){const{style:{backgroundColor:l=o}={}}=e,u=!0!==n;t.save(),t.fillStyle=l,lo(t,a,r,u&&Gs(s,c,d)),t.beginPath();const g=!!i.pathSegment(t,e);let f;if(u){g?t.closePath():ho(t,n,d,s);const e=!!n.pathSegment(t,h,{move:g,reverse:!0});f=g&&e,f||ho(t,n,c,s)}t.closePath(),t.fill(f?"evenodd":"nonzero"),t.restore()}}function lo(t,e,i,n){const s=e.chart.chartArea,{property:o,start:a,end:r}=n||{};if("x"===o||"y"===o){let e,n,l,h;"x"===o?(e=a,n=s.top,l=r,h=s.bottom):(e=s.left,n=a,l=s.right,h=r),t.beginPath(),i&&(e=Math.max(e,i.left),l=Math.min(l,i.right),n=Math.max(n,i.top),h=Math.min(h,i.bottom)),t.rect(e,n,l-e,h-n),t.clip()}}function ho(t,e,i,n){const s=e.interpolate(i,n);s&&t.lineTo(s.x,s.y)}var co={id:"filler",afterDatasetsUpdate(t,e,i){const n=(t.data.datasets||[]).length,s=[];let o,a,r,l;for(a=0;a<n;++a)o=t.getDatasetMeta(a),r=o.dataset,l=null,r&&r.options&&r instanceof Ds&&(l={visible:t.isDatasetVisible(a),index:a,fill:eo(r,a,n),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:r}),o.$filler=l,s.push(l);for(a=0;a<n;++a)l=s[a],l&&!1!==l.fill&&(l.fill=to(s,a,i.propagate))},beforeDraw(t,e,i){const n="beforeDraw"===i.drawTime,s=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=s.length-1;e>=0;--e){const i=s[e].$filler;i&&(i.line.updateControlPoints(o,i.axis),n&&i.fill&&oo(t.ctx,i,o))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const n=t.getSortedVisibleDatasetMetas();for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;Qs(i)&&oo(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const n=e.meta.$filler;Qs(n)&&"beforeDatasetDraw"===i.drawTime&&oo(t.ctx,n,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const uo=(t,e)=>{let{boxHeight:i=e,boxWidth:n=e}=t;return t.usePointStyle&&(i=Math.min(i,e),n=t.pointStyleWidth||Math.min(n,e)),{boxWidth:n,boxHeight:i,itemHeight:Math.max(e,i)}};class go extends Fn{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=W(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,n=Se(i.font),s=n.size,o=this._computeTitleHeight(),{boxWidth:a,itemHeight:r}=uo(i,s);let l,h;e.font=n.string,this.isHorizontal()?(l=this.maxWidth,h=this._fitRows(o,s,a,r)+10):(h=this.maxHeight,l=this._fitCols(o,n,a,r)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(h,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,n){const{ctx:s,maxWidth:o,options:{labels:{padding:a}}}=this,r=this.legendHitBoxes=[],l=this.lineWidths=[0],h=n+a;let c=t;s.textAlign="left",s.textBaseline="middle";let d=-1,u=-h;return this.legendItems.forEach(((t,g)=>{const f=i+e/2+s.measureText(t.text).width;(0===g||l[l.length-1]+f+2*a>o)&&(c+=h,l[l.length-(g>0?0:1)]=0,u+=h,d++),r[g]={left:0,top:u,row:d,width:f,height:n},l[l.length-1]+=f+a})),c}_fitCols(t,e,i,n){const{ctx:s,maxHeight:o,options:{labels:{padding:a}}}=this,r=this.legendHitBoxes=[],l=this.columnSizes=[],h=o-t;let c=a,d=0,u=0,g=0,f=0;return this.legendItems.forEach(((t,o)=>{const{itemWidth:p,itemHeight:m}=function(t,e,i,n,s){const o=function(t,e,i,n){let s=t.text;return s&&"string"!=typeof s&&(s=s.reduce(((t,e)=>t.length>e.length?t:e))),e+i.size/2+n.measureText(s).width}(n,t,e,i),a=function(t,e,i){let n=t;return"string"!=typeof e.text&&(n=fo(e,i)),n}(s,n,e.lineHeight);return{itemWidth:o,itemHeight:a}}(i,e,s,t,n);o>0&&u+m+2*a>h&&(c+=d+a,l.push({width:d,height:u}),g+=d+a,f++,d=u=0),r[o]={left:g,top:u,col:f,width:p,height:m},d=Math.max(d,p),u+=m+a})),c+=d,l.push({width:d,height:u}),c}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:n},rtl:s}}=this,o=hi(s,this.left,this.width);if(this.isHorizontal()){let s=0,a=Lt(i,this.left+n,this.right-this.lineWidths[s]);for(const r of e)s!==r.row&&(s=r.row,a=Lt(i,this.left+n,this.right-this.lineWidths[s])),r.top+=this.top+t+n,r.left=o.leftForLtr(o.x(a),r.width),a+=r.width+n}else{let s=0,a=Lt(i,this.top+t+n,this.bottom-this.columnSizes[s].height);for(const r of e)r.col!==s&&(s=r.col,a=Lt(i,this.top+t+n,this.bottom-this.columnSizes[s].height)),r.top=a,r.left+=this.left+n,r.left=o.leftForLtr(o.x(r.left),r.width),a+=r.height+n}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;de(t,this),this._draw(),ue(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:n}=this,{align:s,labels:o}=t,a=ne.color,r=hi(t.rtl,this.left,this.width),l=Se(o.font),{padding:h}=o,c=l.size,d=c/2;let u;this.drawTitle(),n.textAlign=r.textAlign("left"),n.textBaseline="middle",n.lineWidth=.5,n.font=l.string;const{boxWidth:g,boxHeight:f,itemHeight:p}=uo(o,c),m=this.isHorizontal(),b=this._computeTitleHeight();u=m?{x:Lt(s,this.left+h,this.right-i[0]),y:this.top+h+b,line:0}:{x:this.left+h,y:Lt(s,this.top+b+h,this.bottom-e[0].height),line:0},ci(this.ctx,t.textDirection);const x=p+h;this.legendItems.forEach(((y,_)=>{n.strokeStyle=y.fontColor,n.fillStyle=y.fontColor;const v=n.measureText(y.text).width,w=r.textAlign(y.textAlign||(y.textAlign=o.textAlign)),M=g+d+v;let k=u.x,C=u.y;if(r.setWidth(this.width),m?_>0&&k+M+h>this.right&&(C=u.y+=x,u.line++,k=u.x=Lt(s,this.left+h,this.right-i[u.line])):_>0&&C+x>this.bottom&&(k=u.x=k+e[u.line].width+h,u.line++,C=u.y=Lt(s,this.top+b+h,this.bottom-e[u.line].height)),function(t,e,i){if(isNaN(g)||g<=0||isNaN(f)||f<0)return;n.save();const s=V(i.lineWidth,1);if(n.fillStyle=V(i.fillStyle,a),n.lineCap=V(i.lineCap,"butt"),n.lineDashOffset=V(i.lineDashOffset,0),n.lineJoin=V(i.lineJoin,"miter"),n.lineWidth=s,n.strokeStyle=V(i.strokeStyle,a),n.setLineDash(V(i.lineDash,[])),o.usePointStyle){const a={radius:f*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:s},l=r.xPlus(t,g/2);he(n,a,l,e+d,o.pointStyleWidth&&g)}else{const o=e+Math.max((c-f)/2,0),a=r.leftForLtr(t,g),l=ke(i.borderRadius);n.beginPath(),Object.values(l).some((t=>0!==t))?xe(n,{x:a,y:o,w:g,h:f,radius:l}):n.rect(a,o,g,f),n.fill(),0!==s&&n.stroke()}n.restore()}(r.x(k),C,y),k=((t,e,i,n)=>t===(n?"left":"right")?i:"center"===t?(e+i)/2:e)(w,k+g+d,m?k+M:this.right,t.rtl),function(t,e,i){be(n,i.text,t,e+p/2,l,{strikethrough:i.hidden,textAlign:r.textAlign(i.textAlign)})}(r.x(k),C,y),m)u.x+=M+h;else if("string"!=typeof y.text){const t=l.lineHeight;u.y+=fo(y,t)+h}else u.y+=x})),di(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=Se(e.font),n=Ce(e.padding);if(!e.display)return;const s=hi(t.rtl,this.left,this.width),o=this.ctx,a=e.position,r=i.size/2,l=n.top+r;let h,c=this.left,d=this.width;if(this.isHorizontal())d=Math.max(...this.lineWidths),h=this.top+l,c=Lt(t.align,c,this.right-d);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);h=l+Lt(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const u=Lt(a,c,c+d);o.textAlign=s.textAlign(Ot(a)),o.textBaseline="middle",o.strokeStyle=e.color,o.fillStyle=e.color,o.font=i.string,be(o,e.text,u,h,i)}_computeTitleHeight(){const t=this.options.title,e=Se(t.font),i=Ce(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,n,s;if(St(t,this.left,this.right)&&St(e,this.top,this.bottom))for(s=this.legendHitBoxes,i=0;i<s.length;++i)if(n=s[i],St(t,n.left,n.left+n.width)&&St(e,n.top,n.top+n.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t&&"mouseout"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const o=this._hoveredItem,a=(s=i,null!==(n=o)&&null!==s&&n.datasetIndex===s.datasetIndex&&n.index===s.index);o&&!a&&W(e.onLeave,[t,o,this],this),this._hoveredItem=i,i&&!a&&W(e.onHover,[t,i,this],this)}else i&&W(e.onClick,[t,i,this],this);var n,s}}function fo(t,e){return e*(t.text?t.text.length:0)}var po={id:"legend",_element:go,start(t,e,i){const n=t.legend=new go({ctx:t.ctx,options:i,chart:t});mn.configure(t,n,i),mn.addBox(t,n)},stop(t){mn.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const n=t.legend;mn.configure(t,n,i),n.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const n=e.datasetIndex,s=i.chart;s.isDatasetVisible(n)?(s.hide(n),e.hidden=!0):(s.show(n),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:n,textAlign:s,color:o,useBorderRadius:a,borderRadius:r}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const l=t.controller.getStyle(i?0:void 0),h=Ce(l.borderWidth);return{text:e[t.index].label,fillStyle:l.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:l.borderCapStyle,lineDash:l.borderDash,lineDashOffset:l.borderDashOffset,lineJoin:l.borderJoinStyle,lineWidth:(h.width+h.height)/4,strokeStyle:l.borderColor,pointStyle:n||l.pointStyle,rotation:l.rotation,textAlign:s||l.textAlign,borderRadius:a&&(r||l.borderRadius),datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class mo extends Fn{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const n=L(i.text)?i.text.length:1;this._padding=Ce(i.padding);const s=n*Se(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=s:this.width=s}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:n,right:s,options:o}=this,a=o.align;let r,l,h,c=0;return this.isHorizontal()?(l=Lt(a,i,s),h=e+t,r=s-i):("left"===o.position?(l=i+t,h=Lt(a,n,e),c=-.5*nt):(l=s-t,h=Lt(a,e,n),c=.5*nt),r=n-e),{titleX:l,titleY:h,maxWidth:r,rotation:c}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=Se(e.font),n=i.lineHeight/2+this._padding.top,{titleX:s,titleY:o,maxWidth:a,rotation:r}=this._drawArgs(n);be(t,e.text,0,0,i,{color:e.color,maxWidth:a,rotation:r,textAlign:Ot(e.align),textBaseline:"middle",translation:[s,o]})}}var bo={id:"title",_element:mo,start(t,e,i){!function(t,e){const i=new mo({ctx:t.ctx,options:e,chart:t});mn.configure(t,i,e),mn.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;mn.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const n=t.titleBlock;mn.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const xo=new WeakMap;var yo={id:"subtitle",start(t,e,i){const n=new mo({ctx:t.ctx,options:i,chart:t});mn.configure(t,n,i),mn.addBox(t,n),xo.set(t,n)},stop(t){mn.removeBox(t,xo.get(t)),xo.delete(t)},beforeUpdate(t,e,i){const n=xo.get(t);mn.configure(t,n,i),n.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const _o={average(t){if(!t.length)return!1;let e,i,n=new Set,s=0,o=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();n.add(t.x),s+=t.y,++o}}return 0!==o&&0!==n.size&&{x:[...n].reduce(((t,e)=>t+e))/n.size,y:s/o}},nearest(t,e){if(!t.length)return!1;let i,n,s,o=e.x,a=e.y,r=Number.POSITIVE_INFINITY;for(i=0,n=t.length;i<n;++i){const n=t[i].element;if(n&&n.hasValue()){const t=vt(e,n.getCenterPoint());t<r&&(r=t,s=n)}}if(s){const t=s.tooltipPosition();o=t.x,a=t.y}return{x:o,y:a}}};function vo(t,e){return e&&(L(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function wo(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function Mo(t,e){const{element:i,datasetIndex:n,index:s}=e,o=t.getDatasetMeta(n).controller,{label:a,value:r}=o.getLabelAndValue(s);return{chart:t,label:a,parsed:o.getParsed(s),raw:t.data.datasets[n].data[s],formattedValue:r,dataset:o.getDataset(),dataIndex:s,datasetIndex:n,element:i}}function ko(t,e){const i=t.chart.ctx,{body:n,footer:s,title:o}=t,{boxWidth:a,boxHeight:r}=e,l=Se(e.bodyFont),h=Se(e.titleFont),c=Se(e.footerFont),d=o.length,u=s.length,g=n.length,f=Ce(e.padding);let p=f.height,m=0,b=n.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);b+=t.beforeBody.length+t.afterBody.length,d&&(p+=d*h.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),b&&(p+=g*(e.displayColors?Math.max(r,l.lineHeight):l.lineHeight)+(b-g)*l.lineHeight+(b-1)*e.bodySpacing),u&&(p+=e.footerMarginTop+u*c.lineHeight+(u-1)*e.footerSpacing);let x=0;const y=function(t){m=Math.max(m,i.measureText(t).width+x)};return i.save(),i.font=h.string,H(t.title,y),i.font=l.string,H(t.beforeBody.concat(t.afterBody),y),x=e.displayColors?a+2+e.boxPadding:0,H(n,(t=>{H(t.before,y),H(t.lines,y),H(t.after,y)})),x=0,i.font=c.string,H(t.footer,y),i.restore(),m+=f.width,{width:m,height:p}}function Co(t,e,i,n){const{x:s,width:o}=i,{width:a,chartArea:{left:r,right:l}}=t;let h="center";return"center"===n?h=s<=(r+l)/2?"left":"right":s<=o/2?h="left":s>=a-o/2&&(h="right"),function(t,e,i,n){const{x:s,width:o}=n,a=i.caretSize+i.caretPadding;return"left"===t&&s+o+a>e.width||"right"===t&&s-o-a<0||void 0}(h,t,e,i)&&(h="center"),h}function So(t,e,i){const n=i.yAlign||e.yAlign||function(t,e){const{y:i,height:n}=e;return i<n/2?"top":i>t.height-n/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||Co(t,e,i,n),yAlign:n}}function Po(t,e,i,n){const{caretSize:s,caretPadding:o,cornerRadius:a}=t,{xAlign:r,yAlign:l}=i,h=s+o,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:g}=ke(a);let f=function(t,e){let{x:i,width:n}=t;return"right"===e?i-=n:"center"===e&&(i-=n/2),i}(e,r);const p=function(t,e,i){let{y:n,height:s}=t;return"top"===e?n+=i:n-="bottom"===e?s+i:s/2,n}(e,l,h);return"center"===l?"left"===r?f+=h:"right"===r&&(f-=h):"left"===r?f-=Math.max(c,u)+s:"right"===r&&(f+=Math.max(d,g)+s),{x:Ct(f,0,n.width-e.width),y:Ct(p,0,n.height-e.height)}}function Eo(t,e,i){const n=Ce(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-n.right:t.x+n.left}function Io(t){return vo([],wo(t))}function Do(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}const Ro={beforeTitle:T,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,n=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(n>0&&e.dataIndex<n)return i[e.dataIndex]}return""},afterTitle:T,beforeBody:T,beforeLabel:T,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return O(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:T,afterBody:T,beforeFooter:T,footer:T,afterFooter:T};function Ao(t,e,i,n){const s=t[e].call(i,n);return void 0===s?Ro[e].call(i,n):s}class To extends Fn{static positioners=_o;constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),n=i.enabled&&e.options.animation&&i.animations,s=new Ci(this.chart,n);return n._cacheable&&(this._cachedAnimations=Object.freeze(s)),s}getContext(){return this.$context||(this.$context=Ee(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"}))}getTitle(t,e){const{callbacks:i}=e,n=Ao(i,"beforeTitle",this,t),s=Ao(i,"title",this,t),o=Ao(i,"afterTitle",this,t);let a=[];return a=vo(a,wo(n)),a=vo(a,wo(s)),a=vo(a,wo(o)),a}getBeforeBody(t,e){return Io(Ao(e.callbacks,"beforeBody",this,t))}getBody(t,e){const{callbacks:i}=e,n=[];return H(t,(t=>{const e={before:[],lines:[],after:[]},s=Do(i,t);vo(e.before,wo(Ao(s,"beforeLabel",this,t))),vo(e.lines,Ao(s,"label",this,t)),vo(e.after,wo(Ao(s,"afterLabel",this,t))),n.push(e)})),n}getAfterBody(t,e){return Io(Ao(e.callbacks,"afterBody",this,t))}getFooter(t,e){const{callbacks:i}=e,n=Ao(i,"beforeFooter",this,t),s=Ao(i,"footer",this,t),o=Ao(i,"afterFooter",this,t);let a=[];return a=vo(a,wo(n)),a=vo(a,wo(s)),a=vo(a,wo(o)),a}_createItems(t){const e=this._active,i=this.chart.data,n=[],s=[],o=[];let a,r,l=[];for(a=0,r=e.length;a<r;++a)l.push(Mo(this.chart,e[a]));return t.filter&&(l=l.filter(((e,n,s)=>t.filter(e,n,s,i)))),t.itemSort&&(l=l.sort(((e,n)=>t.itemSort(e,n,i)))),H(l,(e=>{const i=Do(t.callbacks,e);n.push(Ao(i,"labelColor",this,e)),s.push(Ao(i,"labelPointStyle",this,e)),o.push(Ao(i,"labelTextColor",this,e))})),this.labelColors=n,this.labelPointStyles=s,this.labelTextColors=o,this.dataPoints=l,l}update(t,e){const i=this.options.setContext(this.getContext()),n=this._active;let s,o=[];if(n.length){const t=_o[i.position].call(this,n,this._eventPosition);o=this._createItems(i),this.title=this.getTitle(o,i),this.beforeBody=this.getBeforeBody(o,i),this.body=this.getBody(o,i),this.afterBody=this.getAfterBody(o,i),this.footer=this.getFooter(o,i);const e=this._size=ko(this,i),a=Object.assign({},t,e),r=So(this.chart,i,a),l=Po(i,a,r,this.chart);this.xAlign=r.xAlign,this.yAlign=r.yAlign,s={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(s={opacity:0});this._tooltipItems=o,this.$context=void 0,s&&this._resolveAnimations().update(this,s),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,n){const s=this.getCaretPosition(t,i,n);e.lineTo(s.x1,s.y1),e.lineTo(s.x2,s.y2),e.lineTo(s.x3,s.y3)}getCaretPosition(t,e,i){const{xAlign:n,yAlign:s}=this,{caretSize:o,cornerRadius:a}=i,{topLeft:r,topRight:l,bottomLeft:h,bottomRight:c}=ke(a),{x:d,y:u}=t,{width:g,height:f}=e;let p,m,b,x,y,_;return"center"===s?(y=u+f/2,"left"===n?(p=d,m=p-o,x=y+o,_=y-o):(p=d+g,m=p+o,x=y-o,_=y+o),b=p):(m="left"===n?d+Math.max(r,h)+o:"right"===n?d+g-Math.max(l,c)-o:this.caretX,"top"===s?(x=u,y=x-o,p=m-o,b=m+o):(x=u+f,y=x+o,p=m+o,b=m-o),_=x),{x1:p,x2:m,x3:b,y1:x,y2:y,y3:_}}drawTitle(t,e,i){const n=this.title,s=n.length;let o,a,r;if(s){const l=hi(i.rtl,this.x,this.width);for(t.x=Eo(this,i.titleAlign,i),e.textAlign=l.textAlign(i.titleAlign),e.textBaseline="middle",o=Se(i.titleFont),a=i.titleSpacing,e.fillStyle=i.titleColor,e.font=o.string,r=0;r<s;++r)e.fillText(n[r],l.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+a,r+1===s&&(t.y+=i.titleMarginBottom-a)}}_drawColorBox(t,e,i,n,s){const o=this.labelColors[i],a=this.labelPointStyles[i],{boxHeight:r,boxWidth:l}=s,h=Se(s.bodyFont),c=Eo(this,"left",s),d=n.x(c),u=r<h.lineHeight?(h.lineHeight-r)/2:0,g=e.y+u;if(s.usePointStyle){const e={radius:Math.min(l,r)/2,pointStyle:a.pointStyle,rotation:a.rotation,borderWidth:1},i=n.leftForLtr(d,l)+l/2,h=g+r/2;t.strokeStyle=s.multiKeyBackground,t.fillStyle=s.multiKeyBackground,le(t,e,i,h),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,le(t,e,i,h)}else{t.lineWidth=B(o.borderWidth)?Math.max(...Object.values(o.borderWidth)):o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=n.leftForLtr(d,l),i=n.leftForLtr(n.xPlus(d,1),l-2),a=ke(o.borderRadius);Object.values(a).some((t=>0!==t))?(t.beginPath(),t.fillStyle=s.multiKeyBackground,xe(t,{x:e,y:g,w:l,h:r,radius:a}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),xe(t,{x:i,y:g+1,w:l-2,h:r-2,radius:a}),t.fill()):(t.fillStyle=s.multiKeyBackground,t.fillRect(e,g,l,r),t.strokeRect(e,g,l,r),t.fillStyle=o.backgroundColor,t.fillRect(i,g+1,l-2,r-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:n}=this,{bodySpacing:s,bodyAlign:o,displayColors:a,boxHeight:r,boxWidth:l,boxPadding:h}=i,c=Se(i.bodyFont);let d=c.lineHeight,u=0;const g=hi(i.rtl,this.x,this.width),f=function(i){e.fillText(i,g.x(t.x+u),t.y+d/2),t.y+=d+s},p=g.textAlign(o);let m,b,x,y,_,v,w;for(e.textAlign=o,e.textBaseline="middle",e.font=c.string,t.x=Eo(this,p,i),e.fillStyle=i.bodyColor,H(this.beforeBody,f),u=a&&"right"!==p?"center"===o?l/2+h:l+2+h:0,y=0,v=n.length;y<v;++y){for(m=n[y],b=this.labelTextColors[y],e.fillStyle=b,H(m.before,f),x=m.lines,a&&x.length&&(this._drawColorBox(e,t,y,g,i),d=Math.max(c.lineHeight,r)),_=0,w=x.length;_<w;++_)f(x[_]),d=c.lineHeight;H(m.after,f)}u=0,d=c.lineHeight,H(this.afterBody,f),t.y-=s}drawFooter(t,e,i){const n=this.footer,s=n.length;let o,a;if(s){const r=hi(i.rtl,this.x,this.width);for(t.x=Eo(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=r.textAlign(i.footerAlign),e.textBaseline="middle",o=Se(i.footerFont),e.fillStyle=i.footerColor,e.font=o.string,a=0;a<s;++a)e.fillText(n[a],r.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+i.footerSpacing}}drawBackground(t,e,i,n){const{xAlign:s,yAlign:o}=this,{x:a,y:r}=t,{width:l,height:h}=i,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:g}=ke(n.cornerRadius);e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.beginPath(),e.moveTo(a+c,r),"top"===o&&this.drawCaret(t,e,i,n),e.lineTo(a+l-d,r),e.quadraticCurveTo(a+l,r,a+l,r+d),"center"===o&&"right"===s&&this.drawCaret(t,e,i,n),e.lineTo(a+l,r+h-g),e.quadraticCurveTo(a+l,r+h,a+l-g,r+h),"bottom"===o&&this.drawCaret(t,e,i,n),e.lineTo(a+u,r+h),e.quadraticCurveTo(a,r+h,a,r+h-u),"center"===o&&"left"===s&&this.drawCaret(t,e,i,n),e.lineTo(a,r+c),e.quadraticCurveTo(a,r,a+c,r),e.closePath(),e.fill(),n.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,n=i&&i.x,s=i&&i.y;if(n||s){const i=_o[t.position].call(this,this._active,this._eventPosition);if(!i)return;const o=this._size=ko(this,t),a=Object.assign({},i,this._size),r=So(e,t,a),l=Po(t,a,r,e);n._to===l.x&&s._to===l.y||(this.xAlign=r.xAlign,this.yAlign=r.yAlign,this.width=o.width,this.height=o.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const n={width:this.width,height:this.height},s={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const o=Ce(e.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&a&&(t.save(),t.globalAlpha=i,this.drawBackground(s,t,n,e),ci(t,e.textDirection),s.y+=o.top,this.drawTitle(s,t,e),this.drawBody(s,t,e),this.drawFooter(s,t,e),di(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,n=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),s=!j(i,n),o=this._positionChanged(n,e);(s||o)&&(this._active=n,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const n=this.options,s=this._active||[],o=this._getActiveElements(t,s,e,i),a=this._positionChanged(o,t),r=e||!j(o,s)||a;return r&&(this._active=o,(n.enabled||n.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),r}_getActiveElements(t,e,i,n){const s=this.options;if("mouseout"===t.type)return[];if(!n)return e.filter((t=>this.chart.data.datasets[t.datasetIndex]&&void 0!==this.chart.getDatasetMeta(t.datasetIndex).controller.getParsed(t.index)));const o=this.chart.getElementsAtEventForMode(t,s.mode,s,i);return s.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:i,caretY:n,options:s}=this,o=_o[s.position].call(this,t,e);return!1!==o&&(i!==o.x||n!==o.y)}}var Fo={id:"tooltip",_element:To,positioners:_o,afterInit(t,e,i){i&&(t.tooltip=new To({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const i={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",{...i,cancelable:!0}))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i)}},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:Ro},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},Oo=Object.freeze({__proto__:null,Colors:Ys,Decimation:Xs,Filler:co,Legend:po,SubTitle:yo,Title:bo,Tooltip:Fo});function Lo(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}function Bo(t,e,{horizontal:i,minRotation:n}){const s=bt(n),o=(i?Math.sin(s):Math.cos(s))||.001,a=.75*e*(""+t).length;return Math.min(e/o,a)}class zo extends Hn{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return O(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:n,max:s}=this;const o=t=>n=e?n:t,a=t=>s=i?s:t;if(t){const t=ut(n),e=ut(s);t<0&&e<0?a(0):t>0&&e>0&&o(0)}if(n===s){let e=0===s?1:Math.abs(.05*s);a(s+e),t||o(n-e)}this.min=n,this.max=s}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:n}=t;return n?(e=Math.ceil(this.max/n)-Math.floor(this.min/n)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${n} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const n=function(t,e){const i=[],{bounds:n,step:s,min:o,max:a,precision:r,count:l,maxTicks:h,maxDigits:c,includeBounds:d}=t,u=s||1,g=h-1,{min:f,max:p}=e,m=!O(o),b=!O(a),x=!O(l),y=(p-f)/(c+1);let _,v,w,M,k=ft((p-f)/g/u)*u;if(k<1e-14&&!m&&!b)return[{value:f},{value:p}];M=Math.ceil(p/k)-Math.floor(f/k),M>g&&(k=ft(M*k/g/u)*u),O(r)||(_=Math.pow(10,r),k=Math.ceil(k*_)/_),"ticks"===n?(v=Math.floor(f/k)*k,w=Math.ceil(p/k)*k):(v=f,w=p),m&&b&&s&&function(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}((a-o)/s,k/1e3)?(M=Math.round(Math.min((a-o)/k,h)),k=(a-o)/M,v=o,w=a):x?(v=m?o:v,w=b?a:w,M=l-1,k=(w-v)/M):(M=(w-v)/k,M=gt(M,Math.round(M),k/1e3)?Math.round(M):Math.ceil(M));const C=Math.max(yt(k),yt(v));_=Math.pow(10,O(r)?C:r),v=Math.round(v*_)/_,w=Math.round(w*_)/_;let S=0;for(m&&(d&&v!==o?(i.push({value:o}),v<o&&S++,gt(Math.round((v+S*k)*_)/_,o,Bo(o,y,t))&&S++):v<o&&S++);S<M;++S){const t=Math.round((v+S*k)*_)/_;if(b&&t>a)break;i.push({value:t})}return b&&d&&w!==a?i.length&&gt(i[i.length-1].value,a,Bo(a,y,t))?i[i.length-1].value=a:i.push({value:a}):b&&w!==a||i.push({value:w}),i}({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&mt(n,this,"value"),t.reverse?(n.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),n}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const n=(i-e)/Math.max(t.length-1,1)/2;e-=n,i+=n}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return Gt(t,this.chart.options.locale,this.options.ticks.format)}}class $o extends zo{static id="linear";static defaults={ticks:{callback:Zt.formatters.numeric}};determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=z(t)?t:0,this.max=z(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=bt(this.options.ticks.minRotation),n=(t?Math.sin(i):Math.cos(i))||.001,s=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,s.lineHeight/n))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}const Vo=t=>Math.floor(dt(t)),No=(t,e)=>Math.pow(10,Vo(t)+e);function Wo(t){return 1==t/Math.pow(10,Vo(t))}function Ho(t,e,i){const n=Math.pow(10,i),s=Math.floor(t/n);return Math.ceil(e/n)-s}class jo extends Hn{static id="logarithmic";static defaults={ticks:{callback:Zt.formatters.logarithmic,major:{enabled:!0}}};constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=zo.prototype.parse.apply(this,[t,e]);if(0!==i)return z(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=z(t)?Math.max(0,t):null,this.max=z(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!z(this._userMin)&&(this.min=t===No(this.min,0)?No(this.min,-1):No(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,n=this.max;const s=e=>i=t?i:e,o=t=>n=e?n:t;i===n&&(i<=0?(s(1),o(10)):(s(No(i,-1)),o(No(n,1)))),i<=0&&s(No(n,-1)),n<=0&&o(No(i,1)),this.min=i,this.max=n}buildTicks(){const t=this.options,e=function(t,{min:e,max:i}){e=$(t.min,e);const n=[],s=Vo(e);let o=function(t,e){let i=Vo(e-t);for(;Ho(t,e,i)>10;)i++;for(;Ho(t,e,i)<10;)i--;return Math.min(i,Vo(t))}(e,i),a=o<0?Math.pow(10,Math.abs(o)):1;const r=Math.pow(10,o),l=s>o?Math.pow(10,s):0,h=Math.round((e-l)*a)/a,c=Math.floor((e-l)/r/10)*r*10;let d=Math.floor((h-c)/Math.pow(10,o)),u=$(t.min,Math.round((l+c+d*Math.pow(10,o))*a)/a);for(;u<i;)n.push({value:u,major:Wo(u),significand:d}),d>=10?d=d<15?15:20:d++,d>=20&&(o++,d=2,a=o>=0?1:a),u=Math.round((l+c+d*Math.pow(10,o))*a)/a;const g=$(t.max,u);return n.push({value:g,major:Wo(g),significand:d}),n}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&mt(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":Gt(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=dt(t),this._valueRange=dt(this.max)-dt(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(dt(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function Yo(t){const e=t.ticks;if(e.display&&t.display){const t=Ce(e.backdropPadding);return V(e.font&&e.font.size,ne.font.size)+t.height}return 0}function Uo(t,e,i,n,s){return t===n||t===s?{start:e-i/2,end:e+i/2}:t<n||t>s?{start:e-i,end:e}:{start:e,end:e+i}}function qo(t,e,i,n,s){const o=Math.abs(Math.sin(i)),a=Math.abs(Math.cos(i));let r=0,l=0;n.start<e.l?(r=(e.l-n.start)/o,t.l=Math.min(t.l,e.l-r)):n.end>e.r&&(r=(n.end-e.r)/o,t.r=Math.max(t.r,e.r+r)),s.start<e.t?(l=(e.t-s.start)/a,t.t=Math.min(t.t,e.t-l)):s.end>e.b&&(l=(s.end-e.b)/a,t.b=Math.max(t.b,e.b+l))}function Xo(t,e,i){const n=t.drawingArea,{extra:s,additionalAngle:o,padding:a,size:r}=i,l=t.getPointPosition(e,n+s+a,o),h=Math.round(xt(Mt(l.angle+lt))),c=function(t,e,i){return 90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e),t}(l.y,r.h,h),d=function(t){return 0===t||180===t?"center":t<180?"left":"right"}(h),u=(g=l.x,f=r.w,"right"===(p=d)?g-=f:"center"===p&&(g-=f/2),g);var g,f,p;return{visible:!0,x:l.x,y:c,textAlign:d,left:u,top:c,right:u+r.w,bottom:c+r.h}}function Go(t,e){if(!e)return!0;const{left:i,top:n,right:s,bottom:o}=t;return!(ce({x:i,y:n},e)||ce({x:i,y:o},e)||ce({x:s,y:n},e)||ce({x:s,y:o},e))}function Ko(t,e,i){const{left:n,top:s,right:o,bottom:a}=i,{backdropColor:r}=e;if(!O(r)){const i=ke(e.borderRadius),l=Ce(e.backdropPadding);t.fillStyle=r;const h=n-l.left,c=s-l.top,d=o-n+l.width,u=a-s+l.height;Object.values(i).some((t=>0!==t))?(t.beginPath(),xe(t,{x:h,y:c,w:d,h:u,radius:i}),t.fill()):t.fillRect(h,c,d,u)}}function Zo(t,e,i,n){const{ctx:s}=t;if(i)s.arc(t.xCenter,t.yCenter,e,0,st);else{let i=t.getPointPosition(0,e);s.moveTo(i.x,i.y);for(let o=1;o<n;o++)i=t.getPointPosition(o,e),s.lineTo(i.x,i.y)}}class Jo extends zo{static id="radialLinear";static defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Zt.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}};static defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"};static descriptors={angleLines:{_fallback:"grid"}};constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=Ce(Yo(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=z(t)&&!isNaN(t)?t:0,this.max=z(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Yo(this.options))}generateTickLabels(t){zo.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=W(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),n=[],s=[],o=t._pointLabels.length,a=t.options.pointLabels,r=a.centerPointLabels?nt/o:0;for(let d=0;d<o;d++){const o=a.setContext(t.getPointLabelContext(d));s[d]=o.padding;const u=t.getPointPosition(d,t.drawingArea+s[d],r),g=Se(o.font),f=(l=t.ctx,h=g,c=L(c=t._pointLabels[d])?c:[c],{w:oe(l,h.string,c),h:c.length*h.lineHeight});n[d]=f;const p=Mt(t.getIndexAngle(d)+r),m=Math.round(xt(p));qo(i,e,p,Uo(m,u.x,f.w,0,180),Uo(m,u.y,f.h,90,270))}var l,h,c;t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const n=[],s=t._pointLabels.length,o=t.options,{centerPointLabels:a,display:r}=o.pointLabels,l={extra:Yo(o)/2,additionalAngle:a?nt/s:0};let h;for(let o=0;o<s;o++){l.padding=i[o],l.size=e[o];const s=Xo(t,o,l);n.push(s),"auto"===r&&(s.visible=Go(s,h),s.visible&&(h=s))}return n}(t,n,s)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,n){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-n)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,n))}getIndexAngle(t){return Mt(t*(st/(this._pointLabels.length||1))+bt(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(O(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(O(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return Ee(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const n=this.getIndexAngle(t)-lt+i;return{x:Math.cos(n)*e+this.xCenter,y:Math.sin(n)*e+this.yCenter,angle:n}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:n,bottom:s}=this._pointLabelItems[t];return{left:e,top:i,right:n,bottom:s}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),Zo(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:n,border:s}=e,o=this._pointLabels.length;let a,r,l;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:n}}=t;for(let s=e-1;s>=0;s--){const e=t._pointLabelItems[s];if(!e.visible)continue;const o=n.setContext(t.getPointLabelContext(s));Ko(i,o,e);const a=Se(o.font),{x:r,y:l,textAlign:h}=e;be(i,t._pointLabels[s],r,l+a.lineHeight/2,a,{color:o.color,textAlign:h,textBaseline:"middle"})}}(this,o),n.display&&this.ticks.forEach(((t,e)=>{if(0!==e||0===e&&this.min<0){r=this.getDistanceFromCenterForValue(t.value);const i=this.getContext(e),a=n.setContext(i),l=s.setContext(i);!function(t,e,i,n,s){const o=t.ctx,a=e.circular,{color:r,lineWidth:l}=e;!a&&!n||!r||!l||i<0||(o.save(),o.strokeStyle=r,o.lineWidth=l,o.setLineDash(s.dash||[]),o.lineDashOffset=s.dashOffset,o.beginPath(),Zo(t,i,a,n),o.closePath(),o.stroke(),o.restore())}(this,a,r,o,l)}})),i.display){for(t.save(),a=o-1;a>=0;a--){const n=i.setContext(this.getPointLabelContext(a)),{color:s,lineWidth:o}=n;o&&s&&(t.lineWidth=o,t.strokeStyle=s,t.setLineDash(n.borderDash),t.lineDashOffset=n.borderDashOffset,r=this.getDistanceFromCenterForValue(e.reverse?this.min:this.max),l=this.getPointPosition(a,r),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(l.x,l.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const n=this.getIndexAngle(0);let s,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(n),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((n,a)=>{if(0===a&&this.min>=0&&!e.reverse)return;const r=i.setContext(this.getContext(a)),l=Se(r.font);if(s=this.getDistanceFromCenterForValue(this.ticks[a].value),r.showLabelBackdrop){t.font=l.string,o=t.measureText(n.label).width,t.fillStyle=r.backdropColor;const e=Ce(r.backdropPadding);t.fillRect(-o/2-e.left,-s-l.size/2-e.top,o+e.width,l.size+e.height)}be(t,n.label,0,-s,l,{color:r.color,strokeColor:r.textStrokeColor,strokeWidth:r.textStrokeWidth})})),t.restore()}drawTitle(){}}const Qo={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},ta=Object.keys(Qo);function ea(t,e){return t-e}function ia(t,e){if(O(e))return null;const i=t._adapter,{parser:n,round:s,isoWeekday:o}=t._parseOpts;let a=e;return"function"==typeof n&&(a=n(a)),z(a)||(a="string"==typeof n?i.parse(a,n):i.parse(a)),null===a?null:(s&&(a="week"!==s||!pt(o)&&!0!==o?i.startOf(a,s):i.startOf(a,"isoWeek",o)),+a)}function na(t,e,i,n){const s=ta.length;for(let o=ta.indexOf(t);o<s-1;++o){const t=Qo[ta[o]],s=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(s*t.size))<=n)return ta[o]}return ta[s-1]}function sa(t,e,i){if(i){if(i.length){const{lo:n,hi:s}=Pt(i,e);t[i[n]>=e?i[n]:i[s]]=!0}}else t[e]=!0}function oa(t,e,i){const n=[],s={},o=e.length;let a,r;for(a=0;a<o;++a)r=e[a],s[r]=a,n.push({value:r,major:!1});return 0!==o&&i?function(t,e,i,n){const s=t._adapter,o=+s.startOf(e[0].value,n),a=e[e.length-1].value;let r,l;for(r=o;r<=a;r=+s.add(r,1,n))l=i[r],l>=0&&(e[l].major=!0);return e}(t,n,s,i):n}class aa extends Hn{static id="time";static defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}};constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e={}){const i=t.time||(t.time={}),n=this._adapter=new Zi(t.adapters.date);n.init(e),G(i.displayFormats,n.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:ia(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:n,max:s,minDefined:o,maxDefined:a}=this.getUserBounds();function r(t){o||isNaN(t.min)||(n=Math.min(n,t.min)),a||isNaN(t.max)||(s=Math.max(s,t.max))}o&&a||(r(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||r(this.getMinMax(!1))),n=z(n)&&!isNaN(n)?n:+e.startOf(Date.now(),i),s=z(s)&&!isNaN(s)?s:+e.endOf(Date.now(),i)+1,this.min=Math.min(n,s-1),this.max=Math.max(n+1,s)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,n="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&n.length&&(this.min=this._userMin||n[0],this.max=this._userMax||n[n.length-1]);const s=this.min,o=function(t,e,i){let n=0,s=t.length;for(;n<s&&t[n]<e;)n++;for(;s>n&&t[s-1]>i;)s--;return n>0||s<t.length?t.slice(n,s):t}(n,s,this.max);return this._unit=e.unit||(i.autoSkip?na(e.minUnit,this.min,this.max,this._getLabelCapacity(s)):function(t,e,i,n,s){for(let o=ta.length-1;o>=ta.indexOf(i);o--){const i=ta[o];if(Qo[i].common&&t._adapter.diff(s,n,i)>=e-1)return i}return ta[i?ta.indexOf(i):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=ta.indexOf(t)+1,i=ta.length;e<i;++e)if(Qo[ta[e]].common)return ta[e]}(this._unit):void 0,this.initOffsets(n),t.reverse&&o.reverse(),oa(this,o,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t=[]){let e,i,n=0,s=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),n=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),s=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;n=Ct(n,0,o),s=Ct(s,0,o),this._offsets={start:n,end:s,factor:1/(n+1+s)}}_generate(){const t=this._adapter,e=this.min,i=this.max,n=this.options,s=n.time,o=s.unit||na(s.minUnit,e,i,this._getLabelCapacity(e)),a=V(n.ticks.stepSize,1),r="week"===o&&s.isoWeekday,l=pt(r)||!0===r,h={};let c,d,u=e;if(l&&(u=+t.startOf(u,"isoWeek",r)),u=+t.startOf(u,l?"day":o),t.diff(i,e,o)>1e5*a)throw new Error(e+" and "+i+" are too far apart with stepSize of "+a+" "+o);const g="data"===n.ticks.source&&this.getDataTimestamps();for(c=u,d=0;c<i;c=+t.add(c,a,o),d++)sa(h,c,g);return c!==i&&"ticks"!==n.bounds&&1!==d||sa(h,c,g),Object.keys(h).sort(ea).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}format(t,e){const i=this.options.time.displayFormats,n=this._unit,s=e||i[n];return this._adapter.format(t,s)}_tickFormatFunction(t,e,i,n){const s=this.options,o=s.ticks.callback;if(o)return W(o,[t,e,i],this);const a=s.time.displayFormats,r=this._unit,l=this._majorUnit,h=r&&a[r],c=l&&a[l],d=i[e],u=l&&c&&d&&d.major;return this._adapter.format(t,n||(u?c:h))}generateTickLabels(t){let e,i,n;for(e=0,i=t.length;e<i;++e)n=t[e],n.label=this._tickFormatFunction(n.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,n=bt(this.isHorizontal()?e.maxRotation:e.minRotation),s=Math.cos(n),o=Math.sin(n),a=this._resolveTickFontOptions(0).size;return{w:i*s+a*o,h:i*o+a*s}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,n=i[e.unit]||i.millisecond,s=this._tickFormatFunction(t,0,oa(this,[t],this._majorUnit),n),o=this._getLabelSize(s),a=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return a>0?a:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const n=this.getMatchingVisibleMetas();if(this._normalized&&n.length)return this._cache.data=n[0].controller.getAllParsedValues(this);for(t=0,e=n.length;t<e;++t)i=i.concat(n[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const n=this.getLabels();for(e=0,i=n.length;e<i;++e)t.push(ia(this,n[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return At(t.sort(ea))}}function ra(t,e,i){let n,s,o,a,r=0,l=t.length-1;i?(e>=t[r].pos&&e<=t[l].pos&&({lo:r,hi:l}=Et(t,"pos",e)),({pos:n,time:o}=t[r]),({pos:s,time:a}=t[l])):(e>=t[r].time&&e<=t[l].time&&({lo:r,hi:l}=Et(t,"time",e)),({time:n,pos:o}=t[r]),({time:s,pos:a}=t[l]));const h=s-n;return h?o+(a-o)*(e-n)/h:o}var la=Object.freeze({__proto__:null,CategoryScale:class extends Hn{static id="category";static defaults={ticks:{callback:Lo}};constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:n}of e)t[i]===n&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(O(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:Ct(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:function(t,e,i,n){const s=t.indexOf(e);return-1===s?((t,e,i,n)=>("string"==typeof e?(i=t.push(e)-1,n.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,n):s!==t.lastIndexOf(e)?i:s}(i,t,V(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:n}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(n=this.getLabels().length-1)),this.min=i,this.max=n}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,n=[];let s=this.getLabels();s=0===t&&e===s.length-1?s:s.slice(t,e+1),this._valueRange=Math.max(s.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)n.push({value:i});return n}getLabelForValue(t){return Lo.call(this,t)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}},LinearScale:$o,LogarithmicScale:jo,RadialLinearScale:Jo,TimeScale:aa,TimeSeriesScale:class extends aa{static id="timeseries";static defaults=aa.defaults;constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=ra(e,this.min),this._tableRange=ra(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,n=[],s=[];let o,a,r,l,h;for(o=0,a=t.length;o<a;++o)l=t[o],l>=e&&l<=i&&n.push(l);if(n.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(o=0,a=n.length;o<a;++o)h=n[o+1],r=n[o-1],l=n[o],Math.round((h+r)/2)!==l&&s.push({time:l,pos:o/(a-1)});return s}_generate(){const t=this.min,e=this.max;let i=super.getDataTimestamps();return i.includes(t)&&i.length||i.splice(0,0,t),i.includes(e)&&1!==i.length||i.push(e),i.sort(((t,e)=>t-e))}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(ra(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return ra(this._table,i*this._tableRange+this._minPos,!0)}}});const ha=[Xi,$s,Oo,la];var ca=function(){if("undefined"!=typeof window){if(window.devicePixelRatio)return window.devicePixelRatio;var t=window.screen;if(t)return(t.deviceXDPI||1)/(t.logicalXDPI||1)}return 1}(),da=function(t,e,i){var n,s=[].concat(e),o=s.length,a=t.font,r=0;for(t.font=i.string,n=0;n<o;++n)r=Math.max(t.measureText(s[n]).width,r);return t.font=a,{height:o*i.lineHeight,width:r}};function ua(t,e){var i=e.x,n=e.y;if(null===i)return{x:0,y:-1};if(null===n)return{x:1,y:0};var s=t.x-i,o=t.y-n,a=Math.sqrt(s*s+o*o);return{x:a?s/a:0,y:a?o/a:-1}}function ga(t,e,i){var n=0;return t<i.left?n|=1:t>i.right&&(n|=2),e<i.top?n|=8:e>i.bottom&&(n|=4),n}function fa(t,e){var i,n,s=e.anchor,o=t;return e.clamp&&(o=function(t,e){for(var i,n,s,o=t.x0,a=t.y0,r=t.x1,l=t.y1,h=ga(o,a,e),c=ga(r,l,e);h|c&&!(h&c);)8&(i=h||c)?(n=o+(r-o)*(e.top-a)/(l-a),s=e.top):4&i?(n=o+(r-o)*(e.bottom-a)/(l-a),s=e.bottom):2&i?(s=a+(l-a)*(e.right-o)/(r-o),n=e.right):1&i&&(s=a+(l-a)*(e.left-o)/(r-o),n=e.left),i===h?h=ga(o=n,a=s,e):c=ga(r=n,l=s,e);return{x0:o,x1:r,y0:a,y1:l}}(o,e.area)),"start"===s?(i=o.x0,n=o.y0):"end"===s?(i=o.x1,n=o.y1):(i=(o.x0+o.x1)/2,n=(o.y0+o.y1)/2),function(t,e,i,n,s){switch(s){case"center":i=n=0;break;case"bottom":i=0,n=1;break;case"right":i=1,n=0;break;case"left":i=-1,n=0;break;case"top":i=0,n=-1;break;case"start":i=-i,n=-n;break;case"end":break;default:s*=Math.PI/180,i=Math.cos(s),n=Math.sin(s)}return{x:t,y:e,vx:i,vy:n}}(i,n,t.vx,t.vy,e.align)}var pa=function(t,e){var i=(t.startAngle+t.endAngle)/2,n=Math.cos(i),s=Math.sin(i),o=t.innerRadius,a=t.outerRadius;return fa({x0:t.x+n*o,y0:t.y+s*o,x1:t.x+n*a,y1:t.y+s*a,vx:n,vy:s},e)},ma=function(t,e){var i=ua(t,e.origin),n=i.x*t.options.radius,s=i.y*t.options.radius;return fa({x0:t.x-n,y0:t.y-s,x1:t.x+n,y1:t.y+s,vx:i.x,vy:i.y},e)},ba=function(t,e){var i=ua(t,e.origin),n=t.x,s=t.y,o=0,a=0;return t.horizontal?(n=Math.min(t.x,t.base),o=Math.abs(t.base-t.x)):(s=Math.min(t.y,t.base),a=Math.abs(t.base-t.y)),fa({x0:n,y0:s+a,x1:n+o,y1:s,vx:i.x,vy:i.y},e)},xa=function(t,e){var i=ua(t,e.origin);return fa({x0:t.x,y0:t.y,x1:t.x+(t.width||0),y1:t.y+(t.height||0),vx:i.x,vy:i.y},e)},ya=function(t){return Math.round(t*ca)/ca};function _a(t,e){var i=e.chart.getDatasetMeta(e.datasetIndex).vScale;if(!i)return null;if(void 0!==i.xCenter&&void 0!==i.yCenter)return{x:i.xCenter,y:i.yCenter};var n=i.getBasePixel();return t.horizontal?{x:n,y:null}:{x:null,y:n}}function va(t,e,i){var n=t.shadowBlur,s=i.stroked,o=ya(i.x),a=ya(i.y),r=ya(i.w);s&&t.strokeText(e,o,a,r),i.filled&&(n&&s&&(t.shadowBlur=0),t.fillText(e,o,a,r),n&&s&&(t.shadowBlur=n))}var wa=function(t,e,i,n){var s=this;s._config=t,s._index=n,s._model=null,s._rects=null,s._ctx=e,s._el=i};X(wa.prototype,{_modelize:function(t,e,i,n){var s,o=this,a=o._index,r=Se(Pe([i.font,{}],n,a)),l=Pe([i.color,ne.color],n,a);return{align:Pe([i.align,"center"],n,a),anchor:Pe([i.anchor,"center"],n,a),area:n.chart.chartArea,backgroundColor:Pe([i.backgroundColor,null],n,a),borderColor:Pe([i.borderColor,null],n,a),borderRadius:Pe([i.borderRadius,0],n,a),borderWidth:Pe([i.borderWidth,0],n,a),clamp:Pe([i.clamp,!1],n,a),clip:Pe([i.clip,!1],n,a),color:l,display:t,font:r,lines:e,offset:Pe([i.offset,4],n,a),opacity:Pe([i.opacity,1],n,a),origin:_a(o._el,n),padding:Ce(Pe([i.padding,4],n,a)),positioner:(s=o._el,s instanceof ws?pa:s instanceof As?ma:s instanceof zs?ba:xa),rotation:Pe([i.rotation,0],n,a)*(Math.PI/180),size:da(o._ctx,e,r),textAlign:Pe([i.textAlign,"start"],n,a),textShadowBlur:Pe([i.textShadowBlur,0],n,a),textShadowColor:Pe([i.textShadowColor,l],n,a),textStrokeColor:Pe([i.textStrokeColor,l],n,a),textStrokeWidth:Pe([i.textStrokeWidth,0],n,a)}},update:function(t){var e,i,n,s=this,o=null,a=null,r=s._index,l=s._config,h=Pe([l.display,!0],t,r);h&&(e=t.dataset.data[r],(n=O(i=V(W(l.formatter,[e,t]),e))?[]:function(t){var e,i=[];for(t=[].concat(t);t.length;)"string"==typeof(e=t.pop())?i.unshift.apply(i,e.split("\n")):Array.isArray(e)?t.push.apply(t,e):O(t)||i.unshift(""+e);return i}(i)).length&&(a=function(t){var e=t.borderWidth||0,i=t.padding,n=t.size.height,s=t.size.width,o=-s/2,a=-n/2;return{frame:{x:o-i.left-e,y:a-i.top-e,w:s+i.width+2*e,h:n+i.height+2*e},text:{x:o,y:a,w:s,h:n}}}(o=s._modelize(h,n,l,t)))),s._model=o,s._rects=a},geometry:function(){return this._rects?this._rects.frame:{}},rotation:function(){return this._model?this._model.rotation:0},visible:function(){return this._model&&this._model.opacity},model:function(){return this._model},draw:function(t,e){var i,n,s,o,a=t.ctx,r=this._model,l=this._rects;this.visible()&&(a.save(),r.clip&&(i=r.area,a.beginPath(),a.rect(i.left,i.top,i.right-i.left,i.bottom-i.top),a.clip()),a.globalAlpha=(n=0,s=r.opacity,o=1,Math.max(n,Math.min(s,o))),a.translate(ya(e.x),ya(e.y)),a.rotate(r.rotation),function(t,e,i){var n=i.backgroundColor,s=i.borderColor,o=i.borderWidth;(n||s&&o)&&(t.beginPath(),function(t,e,i,n,s,o){var a=Math.PI/2;if(o){var r=Math.min(o,s/2,n/2),l=e+r,h=i+r,c=e+n-r,d=i+s-r;t.moveTo(e,h),l<c&&h<d?(t.arc(l,h,r,-Math.PI,-a),t.arc(c,h,r,-a,0),t.arc(c,d,r,0,a),t.arc(l,d,r,a,Math.PI)):l<c?(t.moveTo(l,i),t.arc(c,h,r,-a,a),t.arc(l,h,r,a,Math.PI+a)):h<d?(t.arc(l,h,r,-Math.PI,0),t.arc(l,d,r,0,Math.PI)):t.arc(l,h,r,-Math.PI,Math.PI),t.closePath(),t.moveTo(e,i)}else t.rect(e,i,n,s)}(t,ya(e.x)+o/2,ya(e.y)+o/2,ya(e.w)-o,ya(e.h)-o,i.borderRadius),t.closePath(),n&&(t.fillStyle=n,t.fill()),s&&o&&(t.strokeStyle=s,t.lineWidth=o,t.lineJoin="miter",t.stroke()))}(a,l.frame,r),function(t,e,i,n){var s,o=n.textAlign,a=n.color,r=!!a,l=n.font,h=e.length,c=n.textStrokeColor,d=n.textStrokeWidth,u=c&&d;if(h&&(r||u))for(i=function(t,e,i){var n=i.lineHeight,s=t.w,o=t.x;return"center"===e?o+=s/2:"end"!==e&&"right"!==e||(o+=s),{h:n,w:s,x:o,y:t.y+n/2}}(i,o,l),t.font=l.string,t.textAlign=o,t.textBaseline="middle",t.shadowBlur=n.textShadowBlur,t.shadowColor=n.textShadowColor,r&&(t.fillStyle=a),u&&(t.lineJoin="round",t.lineWidth=d,t.strokeStyle=c),s=0,h=e.length;s<h;++s)va(t,e[s],{stroked:u,filled:r,w:i.w,x:i.x,y:i.y+i.h*s})}(a,r.lines,l.text,r),a.restore())}});var Ma=Number.MIN_SAFE_INTEGER||-9007199254740991,ka=Number.MAX_SAFE_INTEGER||9007199254740991;function Ca(t,e,i){var n=Math.cos(i),s=Math.sin(i),o=e.x,a=e.y;return{x:o+n*(t.x-o)-s*(t.y-a),y:a+s*(t.x-o)+n*(t.y-a)}}function Sa(t,e){var i,n,s,o,a,r=ka,l=Ma,h=e.origin;for(i=0;i<t.length;++i)s=(n=t[i]).x-h.x,o=n.y-h.y,a=e.vx*s+e.vy*o,r=Math.min(r,a),l=Math.max(l,a);return{min:r,max:l}}function Pa(t,e){var i=e.x-t.x,n=e.y-t.y,s=Math.sqrt(i*i+n*n);return{vx:(e.x-t.x)/s,vy:(e.y-t.y)/s,origin:t,ln:s}}var Ea=function(){this._rotation=0,this._rect={x:0,y:0,w:0,h:0}};function Ia(t,e,i){var n=e.positioner(t,e),s=n.vx,o=n.vy;if(!s&&!o)return{x:n.x,y:n.y};var a=i.w,r=i.h,l=e.rotation,h=Math.abs(a/2*Math.cos(l))+Math.abs(r/2*Math.sin(l)),c=Math.abs(a/2*Math.sin(l))+Math.abs(r/2*Math.cos(l)),d=1/Math.max(Math.abs(s),Math.abs(o));return h*=s*d,c*=o*d,h+=e.offset*s,c+=e.offset*o,{x:n.x+h,y:n.y+c}}X(Ea.prototype,{center:function(){var t=this._rect;return{x:t.x+t.w/2,y:t.y+t.h/2}},update:function(t,e,i){this._rotation=i,this._rect={x:e.x+t.x,y:e.y+t.y,w:e.w,h:e.h}},contains:function(t){var e=this,i=e._rect;return!((t=Ca(t,e.center(),-e._rotation)).x<i.x-1||t.y<i.y-1||t.x>i.x+i.w+2||t.y>i.y+i.h+2)},intersects:function(t){var e,i,n,s=this._points(),o=t._points(),a=[Pa(s[0],s[1]),Pa(s[0],s[3])];for(this._rotation!==t._rotation&&a.push(Pa(o[0],o[1]),Pa(o[0],o[3])),e=0;e<a.length;++e)if(i=Sa(s,a[e]),n=Sa(o,a[e]),i.max<n.min||n.max<i.min)return!1;return!0},_points:function(){var t=this,e=t._rect,i=t._rotation,n=t.center();return[Ca({x:e.x,y:e.y},n,i),Ca({x:e.x+e.w,y:e.y},n,i),Ca({x:e.x+e.w,y:e.y+e.h},n,i),Ca({x:e.x,y:e.y+e.h},n,i)]}});var Da={prepare:function(t){var e,i,n,s,o,a=[];for(e=0,n=t.length;e<n;++e)for(i=0,s=t[e].length;i<s;++i)o=t[e][i],a.push(o),o.$layout={_box:new Ea,_hidable:!1,_visible:!0,_set:e,_idx:o._index};return a.sort((function(t,e){var i=t.$layout,n=e.$layout;return i._idx===n._idx?n._set-i._set:n._idx-i._idx})),this.update(a),a},update:function(t){var e,i,n,s,o,a=!1;for(e=0,i=t.length;e<i;++e)s=(n=t[e]).model(),(o=n.$layout)._hidable=s&&"auto"===s.display,o._visible=n.visible(),a|=o._hidable;a&&function(t){var e,i,n,s,o,a,r;for(e=0,i=t.length;e<i;++e)(s=(n=t[e]).$layout)._visible&&(r=new Proxy(n._el,{get:(t,e)=>t.getProps([e],!0)[e]}),o=n.geometry(),a=Ia(r,n.model(),o),s._box.update(a,o,n.rotation()));!function(t,e){var i,n,s,o;for(i=t.length-1;i>=0;--i)for(s=t[i].$layout,n=i-1;n>=0&&s._visible;--n)(o=t[n].$layout)._visible&&s._box.intersects(o._box)&&e(s,o)}(t,(function(t,e){var i=t._hidable,n=e._hidable;i&&n||n?e._visible=!1:i&&(t._visible=!1)}))}(t)},lookup:function(t,e){var i,n;for(i=t.length-1;i>=0;--i)if((n=t[i].$layout)&&n._visible&&n._box.contains(e))return t[i];return null},draw:function(t,e){var i,n,s,o,a,r;for(i=0,n=e.length;i<n;++i)(o=(s=e[i]).$layout)._visible&&(a=s.geometry(),r=Ia(s._el,s.model(),a),o._box.update(r,a,s.rotation()),s.draw(t,r))}},Ra="$datalabels",Aa="$default";function Ta(t,e,i,n){if(e){var s,o=i.$context,a=i.$groups;e[a._set]&&(s=e[a._set][a._key])&&!0===W(s,[o,n])&&(t[Ra]._dirty=!0,i.update(o))}}var Fa={id:"datalabels",defaults:{align:"center",anchor:"center",backgroundColor:null,borderColor:null,borderRadius:0,borderWidth:0,clamp:!1,clip:!1,color:void 0,display:!0,font:{family:void 0,lineHeight:1.2,size:void 0,style:void 0,weight:null},formatter:function(t){if(O(t))return null;var e,i,n,s=t;if(B(t))if(O(t.label))if(O(t.r))for(s="",n=0,i=(e=Object.keys(t)).length;n<i;++n)s+=(0!==n?", ":"")+e[n]+": "+t[e[n]];else s=t.r;else s=t.label;return""+s},labels:void 0,listeners:{},offset:4,opacity:1,padding:{top:4,right:4,bottom:4,left:4},rotation:0,textAlign:"start",textStrokeColor:void 0,textStrokeWidth:0,textShadowBlur:0,textShadowColor:void 0},beforeInit:function(t){t[Ra]={_actives:[]}},beforeUpdate:function(t){var e=t[Ra];e._listened=!1,e._listeners={},e._datasets=[],e._labels=[]},afterDatasetUpdate:function(t,e,i){var n,s,o,a,r,l,h,c,d=e.index,u=t[Ra],g=u._datasets[d]=[],f=t.isDatasetVisible(d),p=t.data.datasets[d],m=function(t,e){var i,n,s,o=t.datalabels,a=[];return!1===o?null:(!0===o&&(o={}),e=X({},[e,o]),n=e.labels||{},s=Object.keys(n),delete e.labels,s.length?s.forEach((function(t){n[t]&&a.push(X({},[e,n[t],{_key:t}]))})):a.push(e),i=a.reduce((function(t,e){return H(e.listeners||{},(function(i,n){t[n]=t[n]||{},t[n][e._key||Aa]=i})),delete e.listeners,t}),{}),{labels:a,listeners:i})}(p,i),b=e.meta.data||[],x=t.ctx;for(x.save(),n=0,o=b.length;n<o;++n)if((h=b[n])[Ra]=[],f&&h&&t.getDataVisibility(n)&&!h.skip)for(s=0,a=m.labels.length;s<a;++s)l=(r=m.labels[s])._key,(c=new wa(r,x,h,n)).$groups={_set:d,_key:l||Aa},c.$context={active:!1,chart:t,dataIndex:n,dataset:p,datasetIndex:d},c.update(c.$context),h[Ra].push(c),g.push(c);x.restore(),X(u._listeners,m.listeners,{merger:function(t,i,n){i[t]=i[t]||{},i[t][e.index]=n[t],u._listened=!0}})},afterUpdate:function(t){t[Ra]._labels=Da.prepare(t[Ra]._datasets)},afterDatasetsDraw:function(t){Da.draw(t,t[Ra]._labels)},beforeEvent:function(t,e){if(t[Ra]._listened){var i=e.event;switch(i.type){case"mousemove":case"mouseout":!function(t,e){var i,n,s=t[Ra],o=s._listeners;if(o.enter||o.leave){if("mousemove"===e.type)n=Da.lookup(s._labels,e);else if("mouseout"!==e.type)return;i=s._hovered,s._hovered=n,function(t,e,i,n,s){var o,a;(i||n)&&(i?n?i!==n&&(a=o=!0):a=!0:o=!0,a&&Ta(t,e.leave,i,s),o&&Ta(t,e.enter,n,s))}(t,o,i,n,e)}}(t,i);break;case"click":!function(t,e){var i=t[Ra],n=i._listeners.click,s=n&&Da.lookup(i._labels,e);s&&Ta(t,n,s,e)}(t,i)}}},afterEvent:function(t){var e,i,n,s,o,a,r,l=t[Ra],h=function(t,e){var i,n,s,o,a=t.slice(),r=[];for(i=0,s=e.length;i<s;++i)o=e[i],-1===(n=a.indexOf(o))?r.push([o,1]):a.splice(n,1);for(i=0,s=a.length;i<s;++i)r.push([a[i],-1]);return r}(l._actives,l._actives=t.getActiveElements());for(e=0,i=h.length;e<i;++e)if((o=h[e])[1])for(n=0,s=(r=o[0].element[Ra]||[]).length;n<s;++n)(a=r[n]).$context.active=1===o[1],a.update(a.$context);(l._dirty||h.length)&&(Da.update(l._labels),t.render()),delete l._dirty}};function Oa(){let n=parseFloat(document.getElementById("purchasePrice").value)||0,s=parseFloat(document.getElementById("renoCosts").value)||0,o=parseFloat(document.getElementById("holdingCosts").value)||0,a=parseFloat(document.getElementById("afterRepairValue").value)||0,r=parseFloat(document.getElementById("desiredProfitMargin").value)||0,l=parseFloat(document.getElementById("houseinterestRate").value)||0,h=parseFloat(document.getElementById("loanPoints").value)||0,c=parseFloat(document.getElementById("houseLoanYear").value)||0,d=12*c,u=parseFloat(document.getElementById("gapCosts").value)||0,g=parseFloat(document.getElementById("downPaymentPercent").value)||0,f=a*(parseFloat(document.getElementById("resaleCosts").value)||0)/100,p=document.getElementById("propertyAddress").value,m=parseFloat(document.getElementById("projectMonths").value)||0,b=parseFloat(document.getElementById("houseMonthlyRent").value)||0,x=parseFloat(document.getElementById("propertyTaxesHF").value)||0,y=parseFloat(document.getElementById("insurance").value)||0,_=parseFloat(document.getElementById("houseAnnualMaintenance").value)||0,v=parseFloat(document.getElementById("houseAnnualUtilities").value)||0,w=document.getElementById("downPaymentType").value,M="purchaseAndReno"===w?n+s:n,k=parseFloat(document.getElementById("closingCosts").value)||0,C=M*g/100,S=l/100/12,P="purchaseAndReno"===w?n+s-C:n-C,E=_/12*m,I=v/12*m,D=P*h/100,R=x/12*m,A=y/12*m,T=c>0?P*S/(1-Math.pow(1+S,-d)):0,F=T*m,O=function(t,e,i,n){let s=0,o=t;for(let t=0;t<i;t++){const t=o*n;s+=t,o+=t-e}return s}(P,T,m,S),L=n+s+o+k+f+F+D+R+A+E+I-(P+C),B=L>0?L*u/100:0,z=n+s+o+k+F+D+B+R+A+E+I,$=C+("purchaseAndReno"!==w?s:0)+o+k+F+B+R+A+E+I+D,V=a-z-f,N=a>0?V/a*100:0,W=$>0?V/$*100:0,H=o+R+A+E+I+O+B,j=(.01*a-H/m).toFixed(2),Y=Number(j)>0&&V>0?(V/(12*Number(j))).toFixed(2):"N/A",U=m>0?(H/m).toFixed(2):0,q=V>0&&b>0?(V/b).toFixed(2):"N/A",X=((.8*N).toFixed(2),(.8*V).toFixed(2),(.9*V).toFixed(2),N>=r&&V>0?"YES":"NO"),G=a*(1-r/100)-(s+o+k+f+F+D+B+R+A+E+I);document.getElementById("totalInvestment").innerText=t(z),document.getElementById("netProfit").innerText=t(V),document.getElementById("totalCashInvested").innerText=t($),document.getElementById("profitMargin").innerText=e(N)+"%",document.getElementById("cashOnCashReturn").innerText=e(W)+"%",document.getElementById("breakEvenYears").innerText=Y,document.getElementById("rentalVsFlip").innerText="N/A"!==q?q>m?`Best to flip. ${q} rental months to match flip profit.`:`Best to rent. ${q} rental months to match flip profit.`:"N/A",document.getElementById("dealStatus").innerText=X,document.getElementById("monthlyHoldingCost").innerText=`${t(U)}`,document.getElementById("displayedAddress").innerText=p?`📍 ${p}`:"",u>0&&(document.getElementById("calculatedGapCost").innerText=t(B)),document.getElementById("maxPurchasePrice").innerText=G>0?t(G):0;let K=document.getElementById("netProfit"),Z=document.querySelector(".netprocard"),J=document.querySelector(".netprocardhead");K.style.color="black",J.style.color=V>0?"black":"#d0b870",Z.style.background=0===V?"#ffffff":V>0?"#d0b870":"#f86d6d";let Q=document.getElementById("profitMargin"),tt=document.querySelector(".promarcard"),et=document.querySelector(".promarcardhead");Q.style.color="black",et.style.color=N>=r?"#d0b870":"black",tt.style.background=0===N?"#ffffff":N>=r?"#d0b870":"#f86d6d";let it=document.getElementById("rentalVsFlip"),nt=document.querySelector(".rvfcard"),st=document.querySelector(".rvfcardhead");it.style.color="black",st.style.color="N/A"!==q&&q>m?"black":"#d0b870",nt.style.background="N/A"===q?"#ffffff":"N/A"!==q&&q>m?"#d0b870":"#f86d6d";let ot=document.querySelector(".dealCardd"),at=document.querySelector(".dealCarddhead");document.getElementById("dealStatus").style.color="black",at.style.color="YES"===X?"black":"#d0b870",ot.style.background="YES"===X?"#d0b870":"#f86d6d",i("projectCostBreakdownChart"),i("arvDistributionChart"),function(t){const e=document.getElementById("projectCostBreakdownChart").getContext("2d"),i=[t.purchase,t.reno,t.holding+t.loanInterest+t.proratedTaxes+t.proratedInsurance,t.loanFees,t.resaleCosts,t.closing],n=i.reduce(((t,e)=>t+e),0);new xs(e,{type:"doughnut",data:{labels:["Purchase","Renovation","Holding (incl. interest, taxes, insurance)","Loan Fees","Resale Costs","Closing Costs"],datasets:[{data:i,backgroundColor:["#F39655","#B77CE9","#55CBE5","#e74c3c","#1abc9c","#e67e22"],borderColor:"#ffffff",borderWidth:4,hoverOffset:20}]},options:{responsive:!0,cutout:"0%",plugins:{datalabels:{color:"#ffffff",font:{weight:"bold",size:14},formatter:(t,e)=>`${(t/n*100).toFixed(1)}%`,display:function(t){return t.dataset.data[t.dataIndex]/n*100>=5}},title:{display:!0,text:"Project Cost Breakdown",font:{size:20,weight:"bold",color:"#000000"}},legend:{position:"right",labels:{boxWidth:14,padding:16,font:{size:14,color:"#000000"}}},tooltip:{callbacks:{label:function(t){const e=t.parsed,i=(e/n*100).toFixed(2);return`${t.label}: $${e.toLocaleString()} (${i}%)`}}}}},plugins:[Fa]})}({purchase:n,reno:s,holding:o,loanInterest:O,loanFees:D,resaleCosts:f,closing:k,proratedTaxes:R,proratedInsurance:A}),function(t){const e=document.getElementById("arvDistributionChart").getContext("2d"),i=[t.investment,t.resaleCosts,t.netProfit],n=i.reduce(((t,e)=>t+e),0);new xs(e,{type:"pie",data:{labels:["Total Investment","Resale Costs","Net Profit"],datasets:[{data:i,backgroundColor:["#2980b9","#f1c40f","#2ecc71"],borderColor:"#ffffff",borderWidth:4,hoverOffset:20}]},options:{responsive:!0,plugins:{title:{display:!0,text:"ARV Distribution",font:{size:20,weight:"bold"},color:"#000000"},legend:{position:"right",labels:{boxWidth:14,padding:16,font:{size:14,color:"#000000"}}},tooltip:{callbacks:{label:function(t){const e=t.parsed,i=(e/n*100).toFixed(2);return`${t.label}: $${e.toLocaleString()} (${i}%)`}}},datalabels:{color:"#ffffff",font:{weight:"bold",size:14},formatter:(t,e)=>`${(t/n*100).toFixed(1)}%`,display:function(t){return t.dataset.data[t.dataIndex]/n*100>=5}}}},plugins:[Fa]})}({investment:z,resaleCosts:f,netProfit:V})}let La;function Ba(){let e=document.getElementById("currentAge"),i=document.getElementById("retirementAge"),n=document.getElementById("expectedLifespan"),s=document.getElementById("currentSavings"),o=document.getElementById("monthlyContributions"),a=document.getElementById("annualReturn"),r=document.getElementById("inflationRate"),l=document.getElementById("desiredIncome"),h=document.getElementById("realEstateAppreciation"),c=document.getElementById("mortgageBalance"),d=document.getElementById("wholeLifeInsurance"),u=document.getElementById("lifeInsuranceMonthlyContributions"),g=document.getElementById("mortgageTerm"),f=document.getElementById("mortgageInterestRate"),p=document.getElementById("currentStockValue"),m=document.getElementById("currentRealEstateEquity"),b=document.getElementById("stockGrowthRate"),x={currentAge:document.getElementById("errorCurrentAge"),retirementAge:document.getElementById("errorRetirementAge"),expectedLifespan:document.getElementById("errorExpectedLifespan"),currentSavings:document.getElementById("errorCurrentSavings"),monthlyContributions:document.getElementById("errorMonthlyContributions"),annualReturn:document.getElementById("errorAnnualReturn"),inflationRate:document.getElementById("errorInflationRate"),desiredIncome:document.getElementById("errorDesiredIncome"),currentStockValue:document.getElementById("errorCurrentStockValue"),currentRealEstateEquity:document.getElementById("errorCurrentRealEstateEquity"),realEstateAppreciation:document.getElementById("errorRealEstateAppreciation"),mortgageBalance:document.getElementById("errormortgageBalance"),wholeLifeInsurance:document.getElementById("errorwholeLifeInsurance"),lifeInsuranceMonthlyContributions:document.getElementById("errorLifeInsuranceMonthlyContributions"),mortgageTerm:document.getElementById("errorMortgageTerm"),mortgageInterestRate:document.getElementById("errorMortgageInterestRate"),stockGrowthRate:document.getElementById("errorStockGrowthRate")};Object.values(x).forEach((t=>t.innerText=""));let y=!0;function _(t,e,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1/0,o=parseFloat(t.value)||0;(o<n||o>s)&&(e.innerText=`${i} must be a valid number (${n} - ${s}).`,y=!1)}if(_(e,x.currentAge,"Current Age",18,100),_(i,x.retirementAge,"Retirement Age",18,100),_(n,x.expectedLifespan,"Expected Lifespan",parseInt(e.value,10)||18,120),_(s,x.currentSavings,"Current Savings",0),_(o,x.monthlyContributions,"Monthly Contributions",0),_(a,x.annualReturn,"Expected Annual Return (%)",0,100),_(r,x.inflationRate,"Inflation Rate (%)",0,100),_(l,x.desiredIncome,"Desired Retirement Income",0),_(p,x.currentStockValue,"Current Stock Value",0),_(m,x.currentRealEstateEquity,"Current Real Estate Equity",0),_(h,x.realEstateAppreciation,"Real Estate Appreciation (%)",0,100),_(c,x.mortgageBalance,"Mortgage Balance",0),_(d,x.wholeLifeInsurance,"Whole Life Insurance",0),_(u,x.lifeInsuranceMonthlyContributions,"Life Insurance Monthly Contributions",0),_(f,x.mortgageInterestRate,"Mortgage Interest Rate",0,100),_(b,x.stockGrowthRate,"Stock Growth Rate (%)",0,100),parseInt(e.value)>=parseInt(i.value)&&(x.retirementAge.innerText="Retirement age must be greater than current age.",y=!1),!y)return;let v=parseInt(i.value)-parseInt(e.value),w=(parseFloat(a.value)||0)/100/12,M=12*v,k=(parseFloat(s.value)||0)*Math.pow(1+(parseFloat(a.value)||0)/100,v),C=0!==w?(parseFloat(o.value)||0)*((Math.pow(1+w,M)-1)/w*(1+w)):0,S=(parseFloat(p.value)||0)*Math.pow(1.03,v),P=(parseFloat(h.value)||0)/100,E=parseFloat(c.value)||0,I=(parseFloat(m.value)||0)*Math.pow(1+P,v);isNaN(I)&&(I=0);let D=parseFloat(u.value)||0,R=0!==w?D*((Math.pow(1+w,M)-1)/w)*(1+w):0,A=(parseFloat(d.value)||0)*Math.pow(1+w,M)+R,T=(isNaN(k)?0:k)+(isNaN(C)?0:C)+(isNaN(S)?0:S)+(isNaN(I)?0:I)+A;const F=g/12;if(F<v){const t=v-F,e=0!==w?12*monthlyPayment*((Math.pow(1+w,12*t)-1)/w)*(1+w):0;T+=isNaN(e)?0:e}let O=(parseFloat(l.value)||0)*Math.pow(1+(parseFloat(r.value)||0)/100,v),L=[];b=b.value/100;for(let t=5;t<=v;t+=5){const e=(parseFloat(m.value)||0)*Math.pow(1+P,t),i=E,n=12*parseFloat(g.value||0),s=parseFloat(f.value||0)/100/12,o=i*(s*Math.pow(1+s,n))/(Math.pow(1+s,n)-1),r=Math.min(12*t,n),l=i*Math.pow(1+s,r)-o*(Math.pow(1+s,r)-1)/s,h=isNaN(e-l)?0:e-l;let c=0;if(12*t>n){const e=(12*t-n)/12;c=0!==w?12*o*((Math.pow(1+w,12*e)-1)/w)*(1+w):0}const u=0!==w?D*((Math.pow(1+w,12*t)-1)/w)*(1+w):0,x=(parseFloat(d.value)||0)*Math.pow(1+(parseFloat(a.value)||0)/100,t)+u;L.push({year:t,stockValue:(parseFloat(p.value)||0)*Math.pow(1+b,t),realEstateValue:h,insuranceValue:x,extraInvestmentValue:isNaN(c)?0:c})}let B=0,z=T,$=O;for(;z>0&&(B++,!(B>100));)z-=$,z*=1+(parseFloat(a.value)||0)/100,$*=1+(parseFloat(r.value)||0)/100;n=n.value;let V,N=n-parseInt(i.value),W=document.querySelector(".short");if(0===O||0===T?(V="",W.style.backgroundColor="#FFF",document.querySelector(".shortcap").style.color=""):B>=N?(V="Surplus (Funds last throughout retirement)",W.style.backgroundColor="#d0b870",document.querySelector(".shortcap").style.color="black"):(document.querySelector(".shortcap").style.color="#d0b870",V=`Funds wont last throughout the retirement years, short by ${N-B} years)`,W.style.backgroundColor="#f86d6d"),""!=a.value){document.getElementById("totalSavings").innerHTML=`${t(T)}`;let e=document.getElementById("totalSavings"),i=document.querySelector(".totalSavingsCard"),n=document.querySelector(".totalSavingshead");e.style.color="black",n.style.color="black",i.style.background="#d0b870"}if(document.getElementById("annualWithdrawal").innerHTML=`${t(O)}`,l.value&&r.value){let t=isNaN(B)?"N/A":B>100?"> 100":B;document.getElementById("yearsUntilDepletion").innerHTML=`${t}`}else document.getElementById("yearsUntilDepletion").innerHTML="";document.getElementById("shortfallSurplus").innerHTML=isNaN(B)?"N/A":V;let H=document.getElementById("projections");H.innerHTML='<h3 class="dynamicHead">Time-based Asset Projections:</h3>',L.forEach((e=>{const i=e.stockValue+e.realEstateValue+e.insuranceValue;H.innerHTML+=`\n        <p class="dynamicPara">In <strong>${e.year} years:</strong></p>\n        <ul>\n          <li class="dynamicList">Stock Value: ${t(e.stockValue)}</li>\n          <li class="dynamicList">Real Estate Value: ${t(e.realEstateValue)}</li>\n          <li class="dynamicList">Life Insurance Value: ${t(e.insuranceValue)}</li>\n          <li class="dynamicList"><strong>Total Value: ${t(i)}</strong></li>\n        </ul>`})),(S>0||I>0||A>0||C>0)&&(function(t,e,i,n){const s=document.getElementById("assetBreakdownChart").getContext("2d"),o=t+e+i+n,a={labels:["Stocks","Real Estate","Whole Life Insurance","Savings"],datasets:[{label:"Asset Distribution at Retirement",data:[t,e,i,n],backgroundColor:["#F39655","#B77CE9 ","#55CBE5 ","#e67e22"],borderColor:"#ffffff",borderWidth:4,hoverOffset:20}]};window.assetBreakdownChart instanceof xs&&window.assetBreakdownChart.destroy(),window.assetBreakdownChart=new xs(s,{type:"pie",data:a,options:{responsive:!0,plugins:{title:{display:!0,text:"Asset Allocation Breakdown at Retirement",font:{size:20,weight:"bold"},color:"#000000"},legend:{position:"right",labels:{boxWidth:14,padding:16,font:{size:14,color:"#000000"}}},tooltip:{callbacks:{label:function(t){const e=t.parsed,i=(e/o*100).toFixed(2);return`${t.label}: $${e.toLocaleString()} (${i}%)`}}},datalabels:{color:"#ffffff",font:{weight:"bold",size:14},formatter:(t,e)=>`${(t/o*100).toFixed(1)}%`,display:function(t){return t.dataset.data[t.dataIndex]/o*100>=5}}}},plugins:[Fa]})}(S,I,A,k+C),function(t,e,i,n){const s=document.getElementById("incomeSourceChart").getContext("2d"),o=[t,e,i,n],a=o.reduce(((t,e)=>t+e),0);La&&La.destroy(),La=new xs(s,{type:"pie",data:{labels:["Contributions","Stock","Real Estate","Whole Life Insurance"],datasets:[{label:"Income Source Contribution at Retirement",data:o,backgroundColor:["#55CBE5","#e74c3c","#F39655","#B77CE9"],borderColor:"#ffffff",borderWidth:4,hoverOffset:20}]},options:{responsive:!0,plugins:{title:{display:!0,text:"Income Sources at Retirement",font:{size:20,weight:"bold"},color:"#000000"},legend:{position:"right",labels:{boxWidth:14,padding:16,font:{size:14,color:"#000000"}}},tooltip:{callbacks:{label:function(t){const e=t.parsed,i=(e/a*100).toFixed(2);return`${t.label}: $${e.toLocaleString()} (${i}%)`}}},datalabels:{color:"white",font:{weight:"bold",size:14},formatter:(t,e)=>{const i=t/a*100;return i>=5?`${i.toFixed(1)}%`:""}}},animation:{animateRotate:!0,animateScale:!0,duration:1500,easing:"easeOutBounce"}},plugins:[Fa]})}(C,S,I,A))}function za(t){let e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=parseFloat(document.getElementById("propertyPrice").value.trim())||0,n=parseFloat(document.getElementById("downPayment").value.trim())||0,s=parseFloat(document.getElementById("loanTerm").value.trim())||0,o=parseFloat(document.getElementById("interestRate").value.trim())||0,a=parseFloat(document.getElementById("monthlyRent").value.trim())||0,r=parseFloat(document.getElementById("vacancyRate").value.trim())||0,l=parseFloat(document.getElementById("propertyTaxes").value.trim())||0,h=parseFloat(document.getElementById("insuranceCosts").value.trim())||0,c=parseFloat(document.getElementById("maintenanceCosts").value.trim())||0,d=parseFloat(document.getElementById("managementFees").value.trim())||0,u=parseFloat(document.getElementById("appreciationRate").value.trim())||3,g=parseFloat(document.getElementById("utilities").value.trim())||0,f=parseFloat(document.getElementById("renovations").value.trim())||0;if(!t||t<0)return;let p=i-n,m=o/100/12,b=12*s,x=m>0?p*(m*Math.pow(1+m,b))/(Math.pow(1+m,b)-1):p/b,y=(Math.pow(1+u/100,t),12*a*Math.pow(1.02,t)),_=y*(r/100),v=_+l+h+c+y*(d/100)+g+f,w=y-v,M=12*x;return e?{year:t,grossRentIncome:y,vacancyLoss:_,adjustedRentIncome:y-_,operatingExpenses:v,netOperatingIncome:w,annualMortgagePayment:M,capitalExpenditures:1425,cashFlow:w-M}:void 0}function $a(){const t=parseInt(document.getElementById("years_tbl").value),e=document.getElementById("yearlyTables");e.innerHTML="";let i=[];i=t<=1?[0,1,2]:t>=30?[28,29,30]:[t-1,t,t+1];const n=i.map((t=>za(t,!0))).filter(Boolean);if(n.length>0){const t=function(t){const e={"Property Taxes":parseFloat(document.getElementById("propertyTaxes").value)||0,Insurance:parseFloat(document.getElementById("insuranceCosts").value)||0,Maintenance:parseFloat(document.getElementById("maintenanceCosts").value)||0,Utilities:parseFloat(document.getElementById("utilities").value)||0,Renovations:parseFloat(document.getElementById("renovations").value)||0},i=document.createElement("div");i.classList.add("mb-5","table-design");let n=`\n      <h5>Fixed Annual Expenses</h5>\n      <table class="table table-bordered">\n        <thead class="clr-bg" style="background-color: #333333; color: white;">\n          <tr><th>Category</th><th>Amount</th></tr>\n        </thead>\n        <tbody>\n          ${Object.entries(e).map((t=>{let[e,i]=t;return`\n            <tr><td>${e}</td><td>$${i.toFixed(2)}</td></tr>\n          `})).join("")}\n        </tbody>\n      </table>\n    `,s=`\n      <h5>Yearly Financials: Years ${t.map((t=>t.year)).join(", ")}</h5>\n      <table class="table table-bordered">\n        <thead class="clr-bg" style="background-color: #333333; color: white;">\n          <tr>\n            <th>Category</th>\n            ${t.map((t=>`<th>Year ${t.year}</th>`)).join("")}\n          </tr>\n        </thead>\n        <tbody>\n    `;return["Gross Rent","Vacancy","Operating Income","Operating Expenses","Management Fees","Vacancy Loss","Net Operating Income (NOI)","Loan Payments","Capital Expenditures","Cash Flow"].forEach((e=>{s+=`<tr><td>${e}</td>`,t.forEach((t=>{let i=0;switch(e){case"Gross Rent":i=t.grossRentIncome;break;case"Vacancy":case"Vacancy Loss":i=t.vacancyLoss;break;case"Operating Income":i=t.adjustedRentIncome;break;case"Operating Expenses":i=t.operatingExpenses;break;case"Management Fees":i=t.adjustedRentIncome*(parseFloat(document.getElementById("managementFees").value)||0)/100;break;case"Net Operating Income (NOI)":i=t.netOperatingIncome;break;case"Loan Payments":i=-t.annualMortgagePayment;break;case"Capital Expenditures":i=-t.capitalExpenditures;break;case"Cash Flow":i=t.cashFlow}s+=`<td>$${i.toFixed(2)}</td>`})),s+="</tr>"})),s+="</tbody></table>",i.innerHTML=s+n,i}(n);e.appendChild(t)}}function Va(){let i=parseFloat(document.getElementById("propertyPrice").value.trim())||0,n=parseFloat(document.getElementById("initialRenovations").value.trim())||0,s=parseFloat(document.getElementById("downPayment").value.trim())||0,o=s/100*i,a=parseFloat(document.getElementById("loanTerm").value.trim())||0,r=parseFloat(document.getElementById("interestRate").value.trim())||0,l=parseFloat(document.getElementById("monthlyRent").value.trim())||0,h=parseFloat(document.getElementById("vacancyRate").value.trim())||0,c=parseFloat(document.getElementById("propertyTaxes").value.trim())||0,d=parseFloat(document.getElementById("insuranceCosts").value.trim())||0,u=parseFloat(document.getElementById("maintenanceCosts").value.trim())||0,g=parseFloat(document.getElementById("managementFees").value.trim())||0,f=parseFloat(document.getElementById("utilities").value.trim())||0,p=parseFloat(document.getElementById("renovations").value.trim())||0,m=parseFloat(document.getElementById("rentGrowth").value.trim())||0,b=parseFloat(document.getElementById("closingCostsRent").value.trim())||0,x=b/100*i,y=parseInt(document.getElementById("timeDuration").value.trim())||10,_=(parseFloat(document.getElementById("appreciationRate").value.trim()),{propertyPrice:document.getElementById("errorPropertyPrice"),initialRenovations:document.getElementById("errorInitialRenovations"),downPayment:document.getElementById("errorDownPaymentPer"),loanTerm:document.getElementById("errorLoanTerm"),interestRate:document.getElementById("errorInterestRate"),monthlyRent:document.getElementById("errorMonthlyRent"),vacancyRate:document.getElementById("errorVacancyRate"),propertyTaxes:document.getElementById("errorPropertyTaxes"),insuranceCosts:document.getElementById("errorInsuranceCosts"),maintenanceCosts:document.getElementById("errorMaintenanceCosts"),managementFees:document.getElementById("errorManagementFees"),utilities:document.getElementById("errorUtilities"),renovations:document.getElementById("errorRenovations"),rentGrowth:document.getElementById("errorRentGrowth"),closingCosts:document.getElementById("errorClosingCostsRent")});Object.values(_).forEach((t=>t.innerText=""));let v=!0;function w(t,e,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:1/0;"Down Payment (%)"==i&&(t<n||t>s)?e.innerText=`${i} must be less than 100 .`:"Loan Term (Years)"==i&&(t<n||t>s)?e.innerText=`${i} must be less than 30 .`:(t<n||t>s)&&(e.innerText=`${i} must be greater than ${n} .`,v=!1)}if(w(i,_.propertyPrice,"Property Price",1e3),w(s,_.downPayment,"Down Payment (%)",0,100),w(a,_.loanTerm,"Loan Term (Years)",1,30),w(r,_.interestRate,"Interest Rate (%)",0,100),w(l,_.monthlyRent,"Monthly Rent",0),w(h,_.vacancyRate,"Vacancy Rate (%)",0,100),w(c,_.propertyTaxes,"Annual Property Taxes",0),w(d,_.insuranceCosts,"Annual Insurance Costs",0),w(u,_.maintenanceCosts,"Annual Maintenance Costs",0),w(g,_.managementFees,"Management Fees (%)",0,100),w(f,_.utilities,"Utilities",0),w(p,_.renovations,"Renovations",0),w(m,_.rentGrowth,"Rent Growth (%)",0,100),w(b,_.closingCosts,"Closing Costs (%)",0,100),w(n,_.initialRenovations,"Initial Renovations",0),!v)return;let M=i-o,k=r/100/12,C=12*a,S=k>0?M*(k*Math.pow(1+k,C))/(Math.pow(1+k,C)-1):a>0?M/C:0,P=12*l,E=P-P*(h/100),I=c+d+u+E*(g/100)+f+p,D=E-I,R=12*S,A=D-R,T=A/12,F=D/i*100,O=o+x+n,L=O>0?A/O*100:0,B=R>0?D/R:0,z=[],$=[],V=S+c/12+d/12+u/12+E*(g/100)/12+f/12+p/12;for(let t=0;t<y;t++){let e=12*l*Math.pow(1+m/100,t),i=e-e*(h/100);z.push(e),$.push(i)}document.getElementById("loanAmount").innerText=t(M),document.getElementById("mortgagePayment").innerText=t(V),document.getElementById("noi").innerText=t(D),document.getElementById("cashFlow").innerText=t(T),document.getElementById("capRate").innerText=e(F)+"%",document.getElementById("cocReturn").innerText=e(L)+"%",document.getElementById("annualCashFlow").innerText=t(A),document.getElementById("cashInvestedRent").innerText=t(O),document.getElementById("debtServiceRatio").innerText=B.toFixed(2);let N=document.getElementById("debtcard");B>1.2?(N.style.backgroundColor="#d0b870",document.querySelector(".dssr").style.color="black"):N.style.backgroundColor="rgb(248, 109, 109)",function(t,e,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;const s=document.getElementById("portfolioPieChart").getContext("2d");window.portfolioPieChart instanceof xs&&window.portfolioPieChart.destroy();const o=i*n,a=["Income","Expenses"],r=[t*n,e*n],l=["#B77CE9","#55CBE5"],h=o>=0?"Profit":"Loss",c=Math.abs(o),d=o>=0?"#3B8D21":"#F39655";a.push(h),r.push(c),l.push(d);const u=r.reduce(((t,e)=>t+e),0);window.portfolioPieChart=new xs(s,{type:"pie",data:{labels:a,datasets:[{data:r,backgroundColor:l,borderColor:"#fff",borderWidth:2,hoverOffset:12}]},options:{responsive:!0,plugins:{legend:{position:"bottom",labels:{color:"black",font:{size:14,family:"Arial, sans-serif"},padding:15}},title:{display:!0,text:`Portfolio Composition (Over ${n} Year${n>1?"s":""})`,font:{size:20,weight:"bold",family:"Arial, sans-serif"},color:"#333",padding:{top:10,bottom:20}},tooltip:{callbacks:{label:function(t){const e=parseFloat(t.raw),i=(e/u*100).toFixed(1);return`${t.label}: $${e.toFixed(2)} (${i}%)`},afterBody:function(){return`Total: $${u.toFixed(2)}`}}},datalabels:{color:"white",font:{size:14,weight:"bold"},formatter:(t,e)=>{const i=(t/e.chart.data.datasets[0].data.reduce(((t,e)=>t+e),0)*100).toFixed(1);return i>=5?`${i}%`:""}}}},plugins:[Fa]})}(E,I,A,y),function(t,e,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;const s=document.getElementById("cashFlowPieChart").getContext("2d");window.cashFlowPieChart instanceof xs&&window.cashFlowPieChart.destroy();const o=i*n,a=["Mortgage Payments","Operating Expenses"],r=[t*n,e*n],l=["#55CBE5","#F39655"],h=o>=0?"Net Profit":"Net Loss",c=o>=0?"#4CAF50":"#FF5722";a.push(h),r.push(Math.abs(o)),l.push(c);const d=r.reduce(((t,e)=>t+e),0);window.cashFlowPieChart=new xs(s,{type:"pie",data:{labels:a,datasets:[{label:"Cash Flow Breakdown",data:r.map((t=>t.toFixed(2))),backgroundColor:l,hoverOffset:15,borderWidth:3,borderColor:"#fff"}]},options:{responsive:!0,interaction:{mode:"nearest",intersect:!1},plugins:{title:{display:!0,text:`Cash Flow Breakdown (Over ${n} Year${n>1?"s":""})`,font:{size:22,weight:"bold"},color:"#333"},tooltip:{enabled:!0,mode:"index",intersect:!1,backgroundColor:"rgba(0, 0, 0, 0.9)",titleFont:{size:20,weight:"bold"},bodyFont:{size:16},padding:14,boxPadding:6,borderColor:"#fff",borderWidth:1,callbacks:{label:function(t){const e=t.label||"",i=parseFloat(t.raw),n=(i/d*100).toFixed(2);return`${e}: $${i.toFixed(2)} (${n}%)`},afterBody:function(){return`Total: $${d.toFixed(2)}`}}},legend:{display:!0,labels:{font:{size:16},boxWidth:25,usePointStyle:!0,padding:20}},datalabels:{color:"white",font:{size:14,weight:"bold"},formatter:(t,e)=>{const i=(t/e.chart.data.datasets[0].data.reduce(((t,e)=>parseFloat(t)+parseFloat(e)),0)*100).toFixed(1);return i>=5?`${i}%`:""}},animation:{animateRotate:!0,animateScale:!0,duration:1500,easing:"easeOutBounce"}}},plugins:[Fa]})}(R,I,A,y),za(parseFloat(document.getElementById("years_tbl").value.trim())||1,!0),$a()}xs.register(...ha),xs.register(...ha),xs.register(...ha),xs.register(...ha),xs.register(...ha),xs.register(...ha),document.addEventListener("DOMContentLoaded",(function(){const t=document.querySelectorAll("#purchasePrice,#propertyAddress, #renoCosts, #holdingCosts, #desiredProfitMargin, #closingCosts, #afterRepairValue,#projectMonths,#resaleCosts,#downPaymentPercent,#gapCosts,#loanPoints,#houseLoanYear,#houseinterestRate,#houseMonthlyRent,#insurance,#propertyTaxesHF,#downPaymentType,#houseAnnualMaintenance,#houseAnnualUtilities"),e=document.querySelectorAll("#currentAge, #retirementAge, #expectedLifespan, #currentSavings,#lifeInsuranceMonthlyContributions,#wholeLifeInsurance, #monthlyContributions, #annualReturn,#desiredIncome,#inflationRate,#currentRealEstateEquity,#currentStockValue, #stockGrowthRate, #realEstateAppreciation,#mortgageBalance , #mortgageInterestRate , #mortgageTerm"),i=document.querySelectorAll("#managementFees, #maintenanceCosts, #insuranceCosts,#renovations,#utilities,#rentGrowth,#closingCostsRent, #propertyTaxes, #vacancyRate,#monthlyRent,#interestRate,#loanTerm,#downPayment,#propertyPrice,#timeDuration , #appreciationRate, #initialRenovations ");t.forEach((t=>{t.addEventListener("input",Oa)})),e.forEach((t=>{t.addEventListener("input",Ba)})),i.forEach((t=>{t.addEventListener("input",Va)})),document.getElementById("download-pdf").addEventListener("click",(()=>{if(window.jspdf&&"undefined"!=typeof html2canvas){const{jsPDF:t}=window.jspdf,e=new t;function i(t){const e=document.getElementById(t);return e&&e.value?e.value:"N/A"}const n=document.createElement("div");n.id="combinedContent",n.style.padding="20px",n.style.backgroundColor="#fff",n.style.color="#000",n.style.width="800px",n.style.margin="auto";const s=document.getElementById("contentPDF");n.appendChild(s.cloneNode(!0));const o=document.createElement("div");o.innerHTML=`\n            <h2 style="text-align:center; margin-top: 20px;">Inputs</h2>\n            <table border="1" cellspacing="0" cellpadding="5" style="width:100%; text-align:left;">\n              <tr><td><strong>Property Address:</strong></td><td>$${i("propertyAddress")}</td></tr>\n              <tr><td><strong>Property Purchase Price:</strong></td><td>$${i("purchasePrice")}</td></tr>\n              <tr><td><strong>Renovation Costs:</strong></td><td>$${i("renoCosts")}</td></tr>\n              <tr><td><strong>Closing Costs:</strong></td><td>${i("closingCosts")}%</td></tr>\n              <tr><td><strong>Holding Costs:</strong></td><td>$${i("holdingCosts")}</td></tr>\n              <tr><td><strong>After Repair Value:</strong></td><td>$${i("afterRepairValue")}</td></tr>\n              <tr><td><strong>Project Months:</strong></td><td>${i("projectMonths")} Months</td></tr>\n              <tr><td><strong>House Monthly Rent:</strong></td><td>$${i("houseMonthlyRent")}</td></tr>\n              <tr><td><strong>House Interest Rate:</strong></td><td>${i("houseinterestRate")}%</td></tr>\n              <tr><td><strong>Loan Points:</strong></td><td>${i("loanPoints")}%</td></tr>\n              <tr><td><strong>Loan Term:</strong></td><td>${i("houseLoanYear")} Years</td></tr>\n              <tr><td><strong>Gap Costs:</strong></td><td>$${i("gapCosts")}</td></tr>\n              <tr><td><strong>Down Payment Percent:</strong></td><td>${i("downPaymentPercent")}%</td></tr>\n              <tr><td><strong>Resale Costs:</strong></td><td>$${i("resaleCosts")}</td></tr>\n              <tr><td><strong>Desired Profit Margin:</strong></td><td>${i("desiredProfitMargin")}%</td></tr>\n              <tr><td><strong>Down Payment Based On:</strong></td><td>$${i("downPaymentType")}</td></tr>\n              <tr><td><strong>Annual Maintenance:</strong></td><td>$${i("houseAnnualMaintenance")}</td></tr>\n              <tr><td><strong>Annual Utilities:</strong></td><td>$${i("houseAnnualUtilities")}</td></tr>\n              <tr><td><strong>Annual Insurance:</strong></td><td>$${i("insurance")}</td></tr>\n              <tr><td><strong>Annual Property Taxes:</strong></td><td>$${i("propertyTaxesHF")}</td></tr>\n            </table>\n          `,n.appendChild(o),document.body.appendChild(n),html2canvas(n,{scale:2,useCORS:!0}).then((t=>{const i=e.internal.pageSize.height;let s=190*t.height/t.width,o=s,a=10;const r=t.toDataURL("image/png");for(e.addImage(r,"PNG",10,a,190,s),o-=i-20;o>0;)a=o-s,e.addPage(),e.addImage(r,"PNG",10,a,190,s),o-=i-20;e.save("house_flipping_analysis.pdf"),n.remove()})).catch((t=>{console.error("Error capturing HTML content:",t)}))}else console.error("jsPDF or html2canvas not loaded correctly.")})),document.getElementById("download-pdf2").addEventListener("click",(function(){if(window.jspdf&&"undefined"!=typeof html2canvas){const{jsPDF:t}=window.jspdf,e=new t;function i(t){const e=document.getElementById(t);return e&&e.value?e.value:"N/A"}const n=document.createElement("div");n.id="combinedContent",n.style.padding="20px",n.style.backgroundColor="#fff",n.style.color="#000",n.style.width="800px",n.style.margin="auto";const s=document.getElementById("contentPDF2");n.appendChild(s.cloneNode(!0));const o=document.createElement("div");o.innerHTML=`\n            <h2 style="text-align:center; margin-top: 20px;">Retirement Planning Inputs</h2>\n            <table border="1" cellspacing="0" cellpadding="5" style="width:100%; text-align:left;">\n              <tr><td><strong>Current Age:</strong></td><td>${i("currentAge")}</td></tr>\n              <tr><td><strong>Retirement Age:</strong></td><td>${i("retirementAge")}</td></tr>\n              <tr><td><strong>Current Savings:</strong></td><td>$${i("currentSavings")}</td></tr>\n              <tr><td><strong>Monthly Contributions:</strong></td><td>$${i("monthlyContributions")}</td></tr>\n              <tr><td><strong>Annual Return:</strong></td><td>${i("annualReturn")}%</td></tr>\n              <tr><td><strong>Inflation Rate:</strong></td><td>${i("inflationRate")}%</td></tr>\n              <tr><td><strong>Desired Income:</strong></td><td>$${i("desiredIncome")}</td></tr>\n              <tr><td><strong>Whole Life Insurance Value:</strong></td><td>$${i("wholeLifeInsurance")}</td></tr>\n              <tr><td><strong>Monthly Contributions to Whole Life Insurance:</strong></td><td>$${i("lifeInsuranceMonthlyContributions")}</td></tr>\n              <tr><td><strong>Current Stock Value:</strong></td><td>$${i("currentStockValue")}</td></tr>\n              <tr><td><strong>Current Real Estate Equity:</strong></td><td>$${i("currentRealEstateEquity")}</td></tr>\n              <tr><td><strong>Current Mortgage Balance:</strong></td><td>$${i("mortgageBalance")}</td></tr>\n              <tr><td><strong>Mortgage Term (Years):</strong></td><td>$${i("mortgageTerm")}</td></tr>\n              <tr><td><strong>Mortgage Interest Rate (%):</strong></td><td>$${i("mortgageInterestRate")}</td></tr>\n            </table>\n          `,n.appendChild(o),document.body.appendChild(n),html2canvas(n,{scale:2,useCORS:!0}).then((t=>{const i=e.internal.pageSize.height;let s=190*t.height/t.width,o=s,a=10;const r=t.toDataURL("image/png");for(e.addImage(r,"PNG",10,a,190,s),o-=i-20;o>0;)a=o-s,e.addPage(),e.addImage(r,"PNG",10,a,190,s),o-=i-20;e.save("retirement_planning_calculator.pdf"),n.remove()})).catch((t=>{console.error("Error capturing HTML content:",t)}))}else console.error("jsPDF or html2canvas not loaded correctly.")})),document.getElementById("download-pdf3").addEventListener("click",(function(){if(window.jspdf&&"undefined"!=typeof html2canvas){const{jsPDF:t}=window.jspdf,e=new t;function i(t){const e=document.getElementById(t);return e&&e.value?e.value:"N/A"}const n=document.getElementById("contentPDF3");html2canvas(n,{scale:2,useCORS:!0}).then((t=>{const n=e.internal.pageSize.height;let s=190*t.height/t.width,o=s,a=10;const r=t.toDataURL("image/png");for(e.addImage(r,"PNG",10,a,190,s),o-=n-20;o>0;)a=o-s,e.addPage(),e.addImage(r,"PNG",10,a,190,s),o-=n-20;e.addPage();const l=document.createElement("div");l.style.padding="20px",l.style.backgroundColor="#fff",l.style.color="#000",l.style.width="800px",l.style.margin="auto",l.innerHTML=`\n          <h2 style="text-align:center; margin-top: 20px;">Rental Property Inputs</h2>\n          <table border="1" cellspacing="0" cellpadding="5" style="width:100%; text-align:left;">\n            <tr><td><strong>Property Price:</strong></td><td>$${i("propertyPrice")}</td></tr>\n            <tr><td><strong>Down Payment:</strong></td><td>$${i("downPayment")}</td></tr>\n            <tr><td><strong>Loan Term:</strong></td><td>${i("loanTerm")} Years</td></tr>\n            <tr><td><strong>Interest Rate:</strong></td><td>${i("interestRate")}%</td></tr>\n            <tr><td><strong>Monthly Rent:</strong></td><td>$${i("monthlyRent")}</td></tr>\n            <tr><td><strong>Vacancy Rate:</strong></td><td>${i("vacancyRate")}%</td></tr>\n            <tr><td><strong>Closing Cost:</strong></td><td>${i("closingCostsRent")}%</td></tr>\n            <tr><td><strong>Property Taxes:</strong></td><td>$${i("propertyTaxes")}</td></tr>\n            <tr><td><strong>Annual Renovations:</strong></td><td>$${i("renovations")}</td></tr>\n            <tr><td><strong>Annual Utilities:</strong></td><td>$${i("utilities")}</td></tr>\n            <tr><td><strong>Insurance Costs:</strong></td><td>$${i("insuranceCosts")}</td></tr>\n            <tr><td><strong>Maintenance Costs:</strong></td><td>$${i("maintenanceCosts")}</td></tr>\n            <tr><td><strong>Management Fees:</strong></td><td>$${i("managementFees")}</td></tr>\n            <tr><td><strong>Property Appreciation Rate:</strong></td><td>${i("appreciationRate")}%</td></tr>\n            <tr><td><strong>Annual Rent Growth:</strong></td><td>${i("rentGrowth")}%</td></tr>\n          </table>\n        `,document.body.appendChild(l),html2canvas(l,{scale:2,useCORS:!0}).then((t=>{const i=t.toDataURL("image/png"),s=190*t.height/t.width;let o=s;for(;o>0;)e.addImage(i,"PNG",10,10,190,s),o-=n-20,o>0&&e.addPage();e.save("rental_property_evaluation.pdf"),l.remove()}))})).catch((t=>{console.error("Error capturing HTML content:",t)}))}else console.error("jsPDF or html2canvas not loaded correctly.")}));const n=document.getElementById("years_tbl");n&&n.addEventListener("change",$a),Oa(),Ba(),Va(),function(){const t=document.getElementById("years_tbl");t.innerHTML="";for(let e=1;e<=30;e++){const i=document.createElement("option");i.value=e,i.textContent=`${e} ${1===e?"Year":"Years"}`,1===e&&(i.selected=!0),t.appendChild(i)}}()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,